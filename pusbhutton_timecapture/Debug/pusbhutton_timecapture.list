
pusbhutton_timecapture.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b50  080001c8  080001c8  000011c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000d18  08000d18  0000200c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000d18  08000d18  0000200c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000d18  08000d18  0000200c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000d18  08000d18  0000200c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d18  08000d18  00001d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000d1c  08000d1c  00001d1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08000d20  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  2000000c  08000d2c  0000200c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  08000d2c  00002030  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000200c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003a80  00000000  00000000  0000203c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000bea  00000000  00000000  00005abc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003a0  00000000  00000000  000066a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000296  00000000  00000000  00006a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000233e8  00000000  00000000  00006cde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003d53  00000000  00000000  0002a0c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc524  00000000  00000000  0002de19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010a33d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000ca8  00000000  00000000  0010a380  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0010b028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08000d00 	.word	0x08000d00

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08000d00 	.word	0x08000d00

08000208 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000208:	b480      	push	{r7}
 800020a:	b083      	sub	sp, #12
 800020c:	af00      	add	r7, sp, #0
 800020e:	4603      	mov	r3, r0
 8000210:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000216:	2b00      	cmp	r3, #0
 8000218:	db0b      	blt.n	8000232 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800021a:	79fb      	ldrb	r3, [r7, #7]
 800021c:	f003 021f 	and.w	r2, r3, #31
 8000220:	4907      	ldr	r1, [pc, #28]	@ (8000240 <__NVIC_EnableIRQ+0x38>)
 8000222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000226:	095b      	lsrs	r3, r3, #5
 8000228:	2001      	movs	r0, #1
 800022a:	fa00 f202 	lsl.w	r2, r0, r2
 800022e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000232:	bf00      	nop
 8000234:	370c      	adds	r7, #12
 8000236:	46bd      	mov	sp, r7
 8000238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop
 8000240:	e000e100 	.word	0xe000e100

08000244 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000244:	b480      	push	{r7}
 8000246:	b083      	sub	sp, #12
 8000248:	af00      	add	r7, sp, #0
 800024a:	4603      	mov	r3, r0
 800024c:	6039      	str	r1, [r7, #0]
 800024e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000250:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000254:	2b00      	cmp	r3, #0
 8000256:	db0a      	blt.n	800026e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000258:	683b      	ldr	r3, [r7, #0]
 800025a:	b2da      	uxtb	r2, r3
 800025c:	490c      	ldr	r1, [pc, #48]	@ (8000290 <__NVIC_SetPriority+0x4c>)
 800025e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000262:	0112      	lsls	r2, r2, #4
 8000264:	b2d2      	uxtb	r2, r2
 8000266:	440b      	add	r3, r1
 8000268:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800026c:	e00a      	b.n	8000284 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800026e:	683b      	ldr	r3, [r7, #0]
 8000270:	b2da      	uxtb	r2, r3
 8000272:	4908      	ldr	r1, [pc, #32]	@ (8000294 <__NVIC_SetPriority+0x50>)
 8000274:	79fb      	ldrb	r3, [r7, #7]
 8000276:	f003 030f 	and.w	r3, r3, #15
 800027a:	3b04      	subs	r3, #4
 800027c:	0112      	lsls	r2, r2, #4
 800027e:	b2d2      	uxtb	r2, r2
 8000280:	440b      	add	r3, r1
 8000282:	761a      	strb	r2, [r3, #24]
}
 8000284:	bf00      	nop
 8000286:	370c      	adds	r7, #12
 8000288:	46bd      	mov	sp, r7
 800028a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028e:	4770      	bx	lr
 8000290:	e000e100 	.word	0xe000e100
 8000294:	e000ed00 	.word	0xe000ed00

08000298 <main>:

volatile uint32_t duration_ms = 0;
volatile uint8_t button_pressed = 0;

int main(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
    HAL_Init();
 800029c:	f000 f9f9 	bl	8000692 <HAL_Init>
    systemclock_init();
 80002a0:	f000 f900 	bl	80004a4 <systemclock_init>
    gpio_init();
 80002a4:	f000 f886 	bl	80003b4 <gpio_init>
    tim6_init();
 80002a8:	f000 f85c 	bl	8000364 <tim6_init>
    GPIOD->ODR |= (1 <<5);
 80002ac:	4b11      	ldr	r3, [pc, #68]	@ (80002f4 <main+0x5c>)
 80002ae:	695b      	ldr	r3, [r3, #20]
 80002b0:	4a10      	ldr	r2, [pc, #64]	@ (80002f4 <main+0x5c>)
 80002b2:	f043 0320 	orr.w	r3, r3, #32
 80002b6:	6153      	str	r3, [r2, #20]
    while (1)
    {
        if (duration_ms > 0)
 80002b8:	4b0f      	ldr	r3, [pc, #60]	@ (80002f8 <main+0x60>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d0fb      	beq.n	80002b8 <main+0x20>
        {
            // LED ON (active-low)
            GPIOD->ODR &= ~(1 << 5);
 80002c0:	4b0c      	ldr	r3, [pc, #48]	@ (80002f4 <main+0x5c>)
 80002c2:	695b      	ldr	r3, [r3, #20]
 80002c4:	4a0b      	ldr	r2, [pc, #44]	@ (80002f4 <main+0x5c>)
 80002c6:	f023 0320 	bic.w	r3, r3, #32
 80002ca:	6153      	str	r3, [r2, #20]
            HAL_Delay(duration_ms);
 80002cc:	4b0a      	ldr	r3, [pc, #40]	@ (80002f8 <main+0x60>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4618      	mov	r0, r3
 80002d2:	f000 fa3b 	bl	800074c <HAL_Delay>

            // LED OFF
            GPIOD->ODR |= (1 << 5);
 80002d6:	4b07      	ldr	r3, [pc, #28]	@ (80002f4 <main+0x5c>)
 80002d8:	695b      	ldr	r3, [r3, #20]
 80002da:	4a06      	ldr	r2, [pc, #24]	@ (80002f4 <main+0x5c>)
 80002dc:	f043 0320 	orr.w	r3, r3, #32
 80002e0:	6153      	str	r3, [r2, #20]
            HAL_Delay(duration_ms);
 80002e2:	4b05      	ldr	r3, [pc, #20]	@ (80002f8 <main+0x60>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	4618      	mov	r0, r3
 80002e8:	f000 fa30 	bl	800074c <HAL_Delay>

             duration_ms =0;// Prevent re-trigger
 80002ec:	4b02      	ldr	r3, [pc, #8]	@ (80002f8 <main+0x60>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	601a      	str	r2, [r3, #0]
        if (duration_ms > 0)
 80002f2:	e7e1      	b.n	80002b8 <main+0x20>
 80002f4:	40020c00 	.word	0x40020c00
 80002f8:	20000028 	.word	0x20000028

080002fc <EXTI15_10_IRQHandler>:
        }
    }
}

void EXTI15_10_IRQHandler(void)
{
 80002fc:	b480      	push	{r7}
 80002fe:	af00      	add	r7, sp, #0
    if (EXTI->PR & EXTI_PR_PR11)
 8000300:	4b14      	ldr	r3, [pc, #80]	@ (8000354 <EXTI15_10_IRQHandler+0x58>)
 8000302:	695b      	ldr	r3, [r3, #20]
 8000304:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000308:	2b00      	cmp	r3, #0
 800030a:	d01d      	beq.n	8000348 <EXTI15_10_IRQHandler+0x4c>
    {
        EXTI->PR = EXTI_PR_PR11;
 800030c:	4b11      	ldr	r3, [pc, #68]	@ (8000354 <EXTI15_10_IRQHandler+0x58>)
 800030e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000312:	615a      	str	r2, [r3, #20]

        if ((GPIOI->IDR & (1 << 11)) != 0)
 8000314:	4b10      	ldr	r3, [pc, #64]	@ (8000358 <EXTI15_10_IRQHandler+0x5c>)
 8000316:	691b      	ldr	r3, [r3, #16]
 8000318:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800031c:	2b00      	cmp	r3, #0
 800031e:	d009      	beq.n	8000334 <EXTI15_10_IRQHandler+0x38>
        {
            // rising edge = button pressed
            TIM6->CNT = 0;
 8000320:	4b0e      	ldr	r3, [pc, #56]	@ (800035c <EXTI15_10_IRQHandler+0x60>)
 8000322:	2200      	movs	r2, #0
 8000324:	625a      	str	r2, [r3, #36]	@ 0x24
            TIM6->CR1 |= TIM_CR1_CEN;
 8000326:	4b0d      	ldr	r3, [pc, #52]	@ (800035c <EXTI15_10_IRQHandler+0x60>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	4a0c      	ldr	r2, [pc, #48]	@ (800035c <EXTI15_10_IRQHandler+0x60>)
 800032c:	f043 0301 	orr.w	r3, r3, #1
 8000330:	6013      	str	r3, [r2, #0]
        	duration_ms = TIM6->CNT;
        	TIM6->CR1 &= ~TIM_CR1_CEN;

        }
    }
}
 8000332:	e009      	b.n	8000348 <EXTI15_10_IRQHandler+0x4c>
        	duration_ms = TIM6->CNT;
 8000334:	4b09      	ldr	r3, [pc, #36]	@ (800035c <EXTI15_10_IRQHandler+0x60>)
 8000336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000338:	4a09      	ldr	r2, [pc, #36]	@ (8000360 <EXTI15_10_IRQHandler+0x64>)
 800033a:	6013      	str	r3, [r2, #0]
        	TIM6->CR1 &= ~TIM_CR1_CEN;
 800033c:	4b07      	ldr	r3, [pc, #28]	@ (800035c <EXTI15_10_IRQHandler+0x60>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	4a06      	ldr	r2, [pc, #24]	@ (800035c <EXTI15_10_IRQHandler+0x60>)
 8000342:	f023 0301 	bic.w	r3, r3, #1
 8000346:	6013      	str	r3, [r2, #0]
}
 8000348:	bf00      	nop
 800034a:	46bd      	mov	sp, r7
 800034c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000350:	4770      	bx	lr
 8000352:	bf00      	nop
 8000354:	40013c00 	.word	0x40013c00
 8000358:	40022000 	.word	0x40022000
 800035c:	40001000 	.word	0x40001000
 8000360:	20000028 	.word	0x20000028

08000364 <tim6_init>:

void tim6_init(void)
{
 8000364:	b480      	push	{r7}
 8000366:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_TIM6EN;
 8000368:	4b10      	ldr	r3, [pc, #64]	@ (80003ac <tim6_init+0x48>)
 800036a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800036c:	4a0f      	ldr	r2, [pc, #60]	@ (80003ac <tim6_init+0x48>)
 800036e:	f043 0310 	orr.w	r3, r3, #16
 8000372:	6413      	str	r3, [r2, #64]	@ 0x40

    // Timer6 1ms tick
    // Assuming APB1 Timer Clock = 108MHz
    // (PSC + 1) * (ARR + 1) = 108000 → PSC=10799, ARR=9

    TIM6->PSC = 10799U;     // Prescaler
 8000374:	4b0e      	ldr	r3, [pc, #56]	@ (80003b0 <tim6_init+0x4c>)
 8000376:	f642 222f 	movw	r2, #10799	@ 0x2a2f
 800037a:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM6->ARR = 0xFFFF;     // Max ARR (we use CNT anyway)
 800037c:	4b0c      	ldr	r3, [pc, #48]	@ (80003b0 <tim6_init+0x4c>)
 800037e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000382:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM6->EGR = TIM_EGR_UG; // Load prescaler
 8000384:	4b0a      	ldr	r3, [pc, #40]	@ (80003b0 <tim6_init+0x4c>)
 8000386:	2201      	movs	r2, #1
 8000388:	615a      	str	r2, [r3, #20]
    TIM6->CR1 |= TIM_CR1_ARPE;
 800038a:	4b09      	ldr	r3, [pc, #36]	@ (80003b0 <tim6_init+0x4c>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	4a08      	ldr	r2, [pc, #32]	@ (80003b0 <tim6_init+0x4c>)
 8000390:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000394:	6013      	str	r3, [r2, #0]
    TIM6->CR1 &= ~TIM_CR1_CEN; // Initially off
 8000396:	4b06      	ldr	r3, [pc, #24]	@ (80003b0 <tim6_init+0x4c>)
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	4a05      	ldr	r2, [pc, #20]	@ (80003b0 <tim6_init+0x4c>)
 800039c:	f023 0301 	bic.w	r3, r3, #1
 80003a0:	6013      	str	r3, [r2, #0]
}
 80003a2:	bf00      	nop
 80003a4:	46bd      	mov	sp, r7
 80003a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003aa:	4770      	bx	lr
 80003ac:	40023800 	.word	0x40023800
 80003b0:	40001000 	.word	0x40001000

080003b4 <gpio_init>:

void gpio_init(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b088      	sub	sp, #32
 80003b8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ba:	f107 030c 	add.w	r3, r7, #12
 80003be:	2200      	movs	r2, #0
 80003c0:	601a      	str	r2, [r3, #0]
 80003c2:	605a      	str	r2, [r3, #4]
 80003c4:	609a      	str	r2, [r3, #8]
 80003c6:	60da      	str	r2, [r3, #12]
 80003c8:	611a      	str	r2, [r3, #16]

    // Clock Enable
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80003ca:	4b31      	ldr	r3, [pc, #196]	@ (8000490 <gpio_init+0xdc>)
 80003cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003ce:	4a30      	ldr	r2, [pc, #192]	@ (8000490 <gpio_init+0xdc>)
 80003d0:	f043 0308 	orr.w	r3, r3, #8
 80003d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80003d6:	4b2e      	ldr	r3, [pc, #184]	@ (8000490 <gpio_init+0xdc>)
 80003d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003da:	f003 0308 	and.w	r3, r3, #8
 80003de:	60bb      	str	r3, [r7, #8]
 80003e0:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80003e2:	4b2b      	ldr	r3, [pc, #172]	@ (8000490 <gpio_init+0xdc>)
 80003e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003e6:	4a2a      	ldr	r2, [pc, #168]	@ (8000490 <gpio_init+0xdc>)
 80003e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80003ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80003ee:	4b28      	ldr	r3, [pc, #160]	@ (8000490 <gpio_init+0xdc>)
 80003f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80003f6:	607b      	str	r3, [r7, #4]
 80003f8:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003fa:	4b25      	ldr	r3, [pc, #148]	@ (8000490 <gpio_init+0xdc>)
 80003fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80003fe:	4a24      	ldr	r2, [pc, #144]	@ (8000490 <gpio_init+0xdc>)
 8000400:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000404:	6453      	str	r3, [r2, #68]	@ 0x44
 8000406:	4b22      	ldr	r3, [pc, #136]	@ (8000490 <gpio_init+0xdc>)
 8000408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800040a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800040e:	603b      	str	r3, [r7, #0]
 8000410:	683b      	ldr	r3, [r7, #0]

    // Configure PD5 as output (LED)
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000412:	2320      	movs	r3, #32
 8000414:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000416:	2301      	movs	r3, #1
 8000418:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800041a:	2300      	movs	r3, #0
 800041c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800041e:	2300      	movs	r3, #0
 8000420:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000422:	f107 030c 	add.w	r3, r7, #12
 8000426:	4619      	mov	r1, r3
 8000428:	481a      	ldr	r0, [pc, #104]	@ (8000494 <gpio_init+0xe0>)
 800042a:	f000 fa99 	bl	8000960 <HAL_GPIO_Init>

    // Configure PI11 as input with interrupt on both edges
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800042e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000432:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000434:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000438:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;  // Use pull-up if button pulls to GND
 800043a:	2301      	movs	r3, #1
 800043c:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800043e:	f107 030c 	add.w	r3, r7, #12
 8000442:	4619      	mov	r1, r3
 8000444:	4814      	ldr	r0, [pc, #80]	@ (8000498 <gpio_init+0xe4>)
 8000446:	f000 fa8b 	bl	8000960 <HAL_GPIO_Init>

    // EXTI Configuration for PI11
    SYSCFG->EXTICR[2] &= ~(0xF << 12);   // Clear EXTI11 bits
 800044a:	4b14      	ldr	r3, [pc, #80]	@ (800049c <gpio_init+0xe8>)
 800044c:	691b      	ldr	r3, [r3, #16]
 800044e:	4a13      	ldr	r2, [pc, #76]	@ (800049c <gpio_init+0xe8>)
 8000450:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8000454:	6113      	str	r3, [r2, #16]
    SYSCFG->EXTICR[2] |= (0x8 << 12);    // Set EXTI11 to port I
 8000456:	4b11      	ldr	r3, [pc, #68]	@ (800049c <gpio_init+0xe8>)
 8000458:	691b      	ldr	r3, [r3, #16]
 800045a:	4a10      	ldr	r2, [pc, #64]	@ (800049c <gpio_init+0xe8>)
 800045c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000460:	6113      	str	r3, [r2, #16]

    EXTI->IMR |= (1 << 11);              // Unmask EXTI11
 8000462:	4b0f      	ldr	r3, [pc, #60]	@ (80004a0 <gpio_init+0xec>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	4a0e      	ldr	r2, [pc, #56]	@ (80004a0 <gpio_init+0xec>)
 8000468:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800046c:	6013      	str	r3, [r2, #0]
    EXTI->RTSR |= (1 << 11);             // Rising edge
 800046e:	4b0c      	ldr	r3, [pc, #48]	@ (80004a0 <gpio_init+0xec>)
 8000470:	689b      	ldr	r3, [r3, #8]
 8000472:	4a0b      	ldr	r2, [pc, #44]	@ (80004a0 <gpio_init+0xec>)
 8000474:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000478:	6093      	str	r3, [r2, #8]


    // NVIC Interrupt Enable
    NVIC_SetPriority(EXTI15_10_IRQn, 1);
 800047a:	2101      	movs	r1, #1
 800047c:	2028      	movs	r0, #40	@ 0x28
 800047e:	f7ff fee1 	bl	8000244 <__NVIC_SetPriority>
    NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000482:	2028      	movs	r0, #40	@ 0x28
 8000484:	f7ff fec0 	bl	8000208 <__NVIC_EnableIRQ>
}
 8000488:	bf00      	nop
 800048a:	3720      	adds	r7, #32
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}
 8000490:	40023800 	.word	0x40023800
 8000494:	40020c00 	.word	0x40020c00
 8000498:	40022000 	.word	0x40022000
 800049c:	40013800 	.word	0x40013800
 80004a0:	40013c00 	.word	0x40013c00

080004a4 <systemclock_init>:

void systemclock_init(void)
{
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0
    RCC->CR |= RCC_CR_HSEON;
 80004a8:	4b2e      	ldr	r3, [pc, #184]	@ (8000564 <systemclock_init+0xc0>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	4a2d      	ldr	r2, [pc, #180]	@ (8000564 <systemclock_init+0xc0>)
 80004ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80004b2:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & RCC_CR_HSERDY));
 80004b4:	bf00      	nop
 80004b6:	4b2b      	ldr	r3, [pc, #172]	@ (8000564 <systemclock_init+0xc0>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d0f9      	beq.n	80004b6 <systemclock_init+0x12>

    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80004c2:	4b28      	ldr	r3, [pc, #160]	@ (8000564 <systemclock_init+0xc0>)
 80004c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80004c6:	4a27      	ldr	r2, [pc, #156]	@ (8000564 <systemclock_init+0xc0>)
 80004c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004cc:	6413      	str	r3, [r2, #64]	@ 0x40
    PWR->CR1 |= PWR_CR1_ODEN;
 80004ce:	4b26      	ldr	r3, [pc, #152]	@ (8000568 <systemclock_init+0xc4>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	4a25      	ldr	r2, [pc, #148]	@ (8000568 <systemclock_init+0xc4>)
 80004d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80004d8:	6013      	str	r3, [r2, #0]
    while (!(PWR->CSR1 & PWR_CSR1_ODRDY));
 80004da:	bf00      	nop
 80004dc:	4b22      	ldr	r3, [pc, #136]	@ (8000568 <systemclock_init+0xc4>)
 80004de:	685b      	ldr	r3, [r3, #4]
 80004e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d0f9      	beq.n	80004dc <systemclock_init+0x38>
    PWR->CR1 |= PWR_CR1_ODSWEN;
 80004e8:	4b1f      	ldr	r3, [pc, #124]	@ (8000568 <systemclock_init+0xc4>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4a1e      	ldr	r2, [pc, #120]	@ (8000568 <systemclock_init+0xc4>)
 80004ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80004f2:	6013      	str	r3, [r2, #0]
    while (!(PWR->CSR1 & PWR_CSR1_ODSWRDY));
 80004f4:	bf00      	nop
 80004f6:	4b1c      	ldr	r3, [pc, #112]	@ (8000568 <systemclock_init+0xc4>)
 80004f8:	685b      	ldr	r3, [r3, #4]
 80004fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d0f9      	beq.n	80004f6 <systemclock_init+0x52>

    FLASH->ACR = FLASH_ACR_LATENCY_7WS | FLASH_ACR_PRFTEN | FLASH_ACR_ARTEN;
 8000502:	4b1a      	ldr	r3, [pc, #104]	@ (800056c <systemclock_init+0xc8>)
 8000504:	f240 3207 	movw	r2, #775	@ 0x307
 8000508:	601a      	str	r2, [r3, #0]

    RCC->PLLCFGR = (25 << RCC_PLLCFGR_PLLM_Pos) |
 800050a:	4b16      	ldr	r3, [pc, #88]	@ (8000564 <systemclock_init+0xc0>)
 800050c:	4a18      	ldr	r2, [pc, #96]	@ (8000570 <systemclock_init+0xcc>)
 800050e:	605a      	str	r2, [r3, #4]
                   (432 << RCC_PLLCFGR_PLLN_Pos) |
                   (0 << RCC_PLLCFGR_PLLP_Pos) |     // PLLP = 2
                   (RCC_PLLCFGR_PLLSRC_HSE) |
                   (9 << RCC_PLLCFGR_PLLQ_Pos);      // PLLQ = 9

    RCC->CR |= RCC_CR_PLLON;
 8000510:	4b14      	ldr	r3, [pc, #80]	@ (8000564 <systemclock_init+0xc0>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4a13      	ldr	r2, [pc, #76]	@ (8000564 <systemclock_init+0xc0>)
 8000516:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800051a:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & RCC_CR_PLLRDY));
 800051c:	bf00      	nop
 800051e:	4b11      	ldr	r3, [pc, #68]	@ (8000564 <systemclock_init+0xc0>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000526:	2b00      	cmp	r3, #0
 8000528:	d0f9      	beq.n	800051e <systemclock_init+0x7a>

    RCC->CFGR = RCC_CFGR_HPRE_DIV1 | RCC_CFGR_PPRE1_DIV4 | RCC_CFGR_PPRE2_DIV2;
 800052a:	4b0e      	ldr	r3, [pc, #56]	@ (8000564 <systemclock_init+0xc0>)
 800052c:	f44f 4214 	mov.w	r2, #37888	@ 0x9400
 8000530:	609a      	str	r2, [r3, #8]

    RCC->CFGR &= ~RCC_CFGR_SW;
 8000532:	4b0c      	ldr	r3, [pc, #48]	@ (8000564 <systemclock_init+0xc0>)
 8000534:	689b      	ldr	r3, [r3, #8]
 8000536:	4a0b      	ldr	r2, [pc, #44]	@ (8000564 <systemclock_init+0xc0>)
 8000538:	f023 0303 	bic.w	r3, r3, #3
 800053c:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 800053e:	4b09      	ldr	r3, [pc, #36]	@ (8000564 <systemclock_init+0xc0>)
 8000540:	689b      	ldr	r3, [r3, #8]
 8000542:	4a08      	ldr	r2, [pc, #32]	@ (8000564 <systemclock_init+0xc0>)
 8000544:	f043 0302 	orr.w	r3, r3, #2
 8000548:	6093      	str	r3, [r2, #8]
    while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 800054a:	bf00      	nop
 800054c:	4b05      	ldr	r3, [pc, #20]	@ (8000564 <systemclock_init+0xc0>)
 800054e:	689b      	ldr	r3, [r3, #8]
 8000550:	f003 030c 	and.w	r3, r3, #12
 8000554:	2b08      	cmp	r3, #8
 8000556:	d1f9      	bne.n	800054c <systemclock_init+0xa8>
}
 8000558:	bf00      	nop
 800055a:	bf00      	nop
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr
 8000564:	40023800 	.word	0x40023800
 8000568:	40007000 	.word	0x40007000
 800056c:	40023c00 	.word	0x40023c00
 8000570:	09406c19 	.word	0x09406c19

08000574 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800057a:	4b0f      	ldr	r3, [pc, #60]	@ (80005b8 <HAL_MspInit+0x44>)
 800057c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800057e:	4a0e      	ldr	r2, [pc, #56]	@ (80005b8 <HAL_MspInit+0x44>)
 8000580:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000584:	6413      	str	r3, [r2, #64]	@ 0x40
 8000586:	4b0c      	ldr	r3, [pc, #48]	@ (80005b8 <HAL_MspInit+0x44>)
 8000588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800058a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800058e:	607b      	str	r3, [r7, #4]
 8000590:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000592:	4b09      	ldr	r3, [pc, #36]	@ (80005b8 <HAL_MspInit+0x44>)
 8000594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000596:	4a08      	ldr	r2, [pc, #32]	@ (80005b8 <HAL_MspInit+0x44>)
 8000598:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800059c:	6453      	str	r3, [r2, #68]	@ 0x44
 800059e:	4b06      	ldr	r3, [pc, #24]	@ (80005b8 <HAL_MspInit+0x44>)
 80005a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005a6:	603b      	str	r3, [r7, #0]
 80005a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005aa:	bf00      	nop
 80005ac:	370c      	adds	r7, #12
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	40023800 	.word	0x40023800

080005bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005c0:	bf00      	nop
 80005c2:	e7fd      	b.n	80005c0 <NMI_Handler+0x4>

080005c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005c8:	bf00      	nop
 80005ca:	e7fd      	b.n	80005c8 <HardFault_Handler+0x4>

080005cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005d0:	bf00      	nop
 80005d2:	e7fd      	b.n	80005d0 <MemManage_Handler+0x4>

080005d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005d8:	bf00      	nop
 80005da:	e7fd      	b.n	80005d8 <BusFault_Handler+0x4>

080005dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005e0:	bf00      	nop
 80005e2:	e7fd      	b.n	80005e0 <UsageFault_Handler+0x4>

080005e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005e8:	bf00      	nop
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr

080005f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005f2:	b480      	push	{r7}
 80005f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005f6:	bf00      	nop
 80005f8:	46bd      	mov	sp, r7
 80005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fe:	4770      	bx	lr

08000600 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000604:	bf00      	nop
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr

0800060e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800060e:	b580      	push	{r7, lr}
 8000610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000612:	f000 f87b 	bl	800070c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000616:	bf00      	nop
 8000618:	bd80      	pop	{r7, pc}
	...

0800061c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000620:	4b06      	ldr	r3, [pc, #24]	@ (800063c <SystemInit+0x20>)
 8000622:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000626:	4a05      	ldr	r2, [pc, #20]	@ (800063c <SystemInit+0x20>)
 8000628:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800062c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000630:	bf00      	nop
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	e000ed00 	.word	0xe000ed00

08000640 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000640:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000678 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000644:	f7ff ffea 	bl	800061c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000648:	480c      	ldr	r0, [pc, #48]	@ (800067c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800064a:	490d      	ldr	r1, [pc, #52]	@ (8000680 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800064c:	4a0d      	ldr	r2, [pc, #52]	@ (8000684 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800064e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000650:	e002      	b.n	8000658 <LoopCopyDataInit>

08000652 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000652:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000654:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000656:	3304      	adds	r3, #4

08000658 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000658:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800065a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800065c:	d3f9      	bcc.n	8000652 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800065e:	4a0a      	ldr	r2, [pc, #40]	@ (8000688 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000660:	4c0a      	ldr	r4, [pc, #40]	@ (800068c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000662:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000664:	e001      	b.n	800066a <LoopFillZerobss>

08000666 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000666:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000668:	3204      	adds	r2, #4

0800066a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800066a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800066c:	d3fb      	bcc.n	8000666 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800066e:	f000 fb23 	bl	8000cb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000672:	f7ff fe11 	bl	8000298 <main>
  bx  lr    
 8000676:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000678:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800067c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000680:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000684:	08000d20 	.word	0x08000d20
  ldr r2, =_sbss
 8000688:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800068c:	20000030 	.word	0x20000030

08000690 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000690:	e7fe      	b.n	8000690 <ADC_IRQHandler>

08000692 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000692:	b580      	push	{r7, lr}
 8000694:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000696:	2003      	movs	r0, #3
 8000698:	f000 f92e 	bl	80008f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800069c:	200f      	movs	r0, #15
 800069e:	f000 f805 	bl	80006ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006a2:	f7ff ff67 	bl	8000574 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006a6:	2300      	movs	r3, #0
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	bd80      	pop	{r7, pc}

080006ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006b4:	4b12      	ldr	r3, [pc, #72]	@ (8000700 <HAL_InitTick+0x54>)
 80006b6:	681a      	ldr	r2, [r3, #0]
 80006b8:	4b12      	ldr	r3, [pc, #72]	@ (8000704 <HAL_InitTick+0x58>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	4619      	mov	r1, r3
 80006be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80006c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80006ca:	4618      	mov	r0, r3
 80006cc:	f000 f93b 	bl	8000946 <HAL_SYSTICK_Config>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006d6:	2301      	movs	r3, #1
 80006d8:	e00e      	b.n	80006f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	2b0f      	cmp	r3, #15
 80006de:	d80a      	bhi.n	80006f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006e0:	2200      	movs	r2, #0
 80006e2:	6879      	ldr	r1, [r7, #4]
 80006e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80006e8:	f000 f911 	bl	800090e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006ec:	4a06      	ldr	r2, [pc, #24]	@ (8000708 <HAL_InitTick+0x5c>)
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006f2:	2300      	movs	r3, #0
 80006f4:	e000      	b.n	80006f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006f6:	2301      	movs	r3, #1
}
 80006f8:	4618      	mov	r0, r3
 80006fa:	3708      	adds	r7, #8
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	20000000 	.word	0x20000000
 8000704:	20000008 	.word	0x20000008
 8000708:	20000004 	.word	0x20000004

0800070c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000710:	4b06      	ldr	r3, [pc, #24]	@ (800072c <HAL_IncTick+0x20>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	461a      	mov	r2, r3
 8000716:	4b06      	ldr	r3, [pc, #24]	@ (8000730 <HAL_IncTick+0x24>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	4413      	add	r3, r2
 800071c:	4a04      	ldr	r2, [pc, #16]	@ (8000730 <HAL_IncTick+0x24>)
 800071e:	6013      	str	r3, [r2, #0]
}
 8000720:	bf00      	nop
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	20000008 	.word	0x20000008
 8000730:	2000002c 	.word	0x2000002c

08000734 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  return uwTick;
 8000738:	4b03      	ldr	r3, [pc, #12]	@ (8000748 <HAL_GetTick+0x14>)
 800073a:	681b      	ldr	r3, [r3, #0]
}
 800073c:	4618      	mov	r0, r3
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	2000002c 	.word	0x2000002c

0800074c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000754:	f7ff ffee 	bl	8000734 <HAL_GetTick>
 8000758:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000764:	d005      	beq.n	8000772 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000766:	4b0a      	ldr	r3, [pc, #40]	@ (8000790 <HAL_Delay+0x44>)
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	461a      	mov	r2, r3
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	4413      	add	r3, r2
 8000770:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000772:	bf00      	nop
 8000774:	f7ff ffde 	bl	8000734 <HAL_GetTick>
 8000778:	4602      	mov	r2, r0
 800077a:	68bb      	ldr	r3, [r7, #8]
 800077c:	1ad3      	subs	r3, r2, r3
 800077e:	68fa      	ldr	r2, [r7, #12]
 8000780:	429a      	cmp	r2, r3
 8000782:	d8f7      	bhi.n	8000774 <HAL_Delay+0x28>
  {
  }
}
 8000784:	bf00      	nop
 8000786:	bf00      	nop
 8000788:	3710      	adds	r7, #16
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	20000008 	.word	0x20000008

08000794 <__NVIC_SetPriorityGrouping>:
{
 8000794:	b480      	push	{r7}
 8000796:	b085      	sub	sp, #20
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	f003 0307 	and.w	r3, r3, #7
 80007a2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007a4:	4b0b      	ldr	r3, [pc, #44]	@ (80007d4 <__NVIC_SetPriorityGrouping+0x40>)
 80007a6:	68db      	ldr	r3, [r3, #12]
 80007a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007aa:	68ba      	ldr	r2, [r7, #8]
 80007ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80007b0:	4013      	ands	r3, r2
 80007b2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007b8:	68bb      	ldr	r3, [r7, #8]
 80007ba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80007bc:	4b06      	ldr	r3, [pc, #24]	@ (80007d8 <__NVIC_SetPriorityGrouping+0x44>)
 80007be:	4313      	orrs	r3, r2
 80007c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007c2:	4a04      	ldr	r2, [pc, #16]	@ (80007d4 <__NVIC_SetPriorityGrouping+0x40>)
 80007c4:	68bb      	ldr	r3, [r7, #8]
 80007c6:	60d3      	str	r3, [r2, #12]
}
 80007c8:	bf00      	nop
 80007ca:	3714      	adds	r7, #20
 80007cc:	46bd      	mov	sp, r7
 80007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d2:	4770      	bx	lr
 80007d4:	e000ed00 	.word	0xe000ed00
 80007d8:	05fa0000 	.word	0x05fa0000

080007dc <__NVIC_GetPriorityGrouping>:
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007e0:	4b04      	ldr	r3, [pc, #16]	@ (80007f4 <__NVIC_GetPriorityGrouping+0x18>)
 80007e2:	68db      	ldr	r3, [r3, #12]
 80007e4:	0a1b      	lsrs	r3, r3, #8
 80007e6:	f003 0307 	and.w	r3, r3, #7
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr
 80007f4:	e000ed00 	.word	0xe000ed00

080007f8 <__NVIC_SetPriority>:
{
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	4603      	mov	r3, r0
 8000800:	6039      	str	r1, [r7, #0]
 8000802:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000808:	2b00      	cmp	r3, #0
 800080a:	db0a      	blt.n	8000822 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	b2da      	uxtb	r2, r3
 8000810:	490c      	ldr	r1, [pc, #48]	@ (8000844 <__NVIC_SetPriority+0x4c>)
 8000812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000816:	0112      	lsls	r2, r2, #4
 8000818:	b2d2      	uxtb	r2, r2
 800081a:	440b      	add	r3, r1
 800081c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000820:	e00a      	b.n	8000838 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	b2da      	uxtb	r2, r3
 8000826:	4908      	ldr	r1, [pc, #32]	@ (8000848 <__NVIC_SetPriority+0x50>)
 8000828:	79fb      	ldrb	r3, [r7, #7]
 800082a:	f003 030f 	and.w	r3, r3, #15
 800082e:	3b04      	subs	r3, #4
 8000830:	0112      	lsls	r2, r2, #4
 8000832:	b2d2      	uxtb	r2, r2
 8000834:	440b      	add	r3, r1
 8000836:	761a      	strb	r2, [r3, #24]
}
 8000838:	bf00      	nop
 800083a:	370c      	adds	r7, #12
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr
 8000844:	e000e100 	.word	0xe000e100
 8000848:	e000ed00 	.word	0xe000ed00

0800084c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800084c:	b480      	push	{r7}
 800084e:	b089      	sub	sp, #36	@ 0x24
 8000850:	af00      	add	r7, sp, #0
 8000852:	60f8      	str	r0, [r7, #12]
 8000854:	60b9      	str	r1, [r7, #8]
 8000856:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	f003 0307 	and.w	r3, r3, #7
 800085e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000860:	69fb      	ldr	r3, [r7, #28]
 8000862:	f1c3 0307 	rsb	r3, r3, #7
 8000866:	2b04      	cmp	r3, #4
 8000868:	bf28      	it	cs
 800086a:	2304      	movcs	r3, #4
 800086c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800086e:	69fb      	ldr	r3, [r7, #28]
 8000870:	3304      	adds	r3, #4
 8000872:	2b06      	cmp	r3, #6
 8000874:	d902      	bls.n	800087c <NVIC_EncodePriority+0x30>
 8000876:	69fb      	ldr	r3, [r7, #28]
 8000878:	3b03      	subs	r3, #3
 800087a:	e000      	b.n	800087e <NVIC_EncodePriority+0x32>
 800087c:	2300      	movs	r3, #0
 800087e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000880:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000884:	69bb      	ldr	r3, [r7, #24]
 8000886:	fa02 f303 	lsl.w	r3, r2, r3
 800088a:	43da      	mvns	r2, r3
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	401a      	ands	r2, r3
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000894:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	fa01 f303 	lsl.w	r3, r1, r3
 800089e:	43d9      	mvns	r1, r3
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008a4:	4313      	orrs	r3, r2
         );
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	3724      	adds	r7, #36	@ 0x24
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr
	...

080008b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	3b01      	subs	r3, #1
 80008c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80008c4:	d301      	bcc.n	80008ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008c6:	2301      	movs	r3, #1
 80008c8:	e00f      	b.n	80008ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008ca:	4a0a      	ldr	r2, [pc, #40]	@ (80008f4 <SysTick_Config+0x40>)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	3b01      	subs	r3, #1
 80008d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008d2:	210f      	movs	r1, #15
 80008d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80008d8:	f7ff ff8e 	bl	80007f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008dc:	4b05      	ldr	r3, [pc, #20]	@ (80008f4 <SysTick_Config+0x40>)
 80008de:	2200      	movs	r2, #0
 80008e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008e2:	4b04      	ldr	r3, [pc, #16]	@ (80008f4 <SysTick_Config+0x40>)
 80008e4:	2207      	movs	r2, #7
 80008e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008e8:	2300      	movs	r3, #0
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	3708      	adds	r7, #8
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	e000e010 	.word	0xe000e010

080008f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000900:	6878      	ldr	r0, [r7, #4]
 8000902:	f7ff ff47 	bl	8000794 <__NVIC_SetPriorityGrouping>
}
 8000906:	bf00      	nop
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}

0800090e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800090e:	b580      	push	{r7, lr}
 8000910:	b086      	sub	sp, #24
 8000912:	af00      	add	r7, sp, #0
 8000914:	4603      	mov	r3, r0
 8000916:	60b9      	str	r1, [r7, #8]
 8000918:	607a      	str	r2, [r7, #4]
 800091a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800091c:	2300      	movs	r3, #0
 800091e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000920:	f7ff ff5c 	bl	80007dc <__NVIC_GetPriorityGrouping>
 8000924:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000926:	687a      	ldr	r2, [r7, #4]
 8000928:	68b9      	ldr	r1, [r7, #8]
 800092a:	6978      	ldr	r0, [r7, #20]
 800092c:	f7ff ff8e 	bl	800084c <NVIC_EncodePriority>
 8000930:	4602      	mov	r2, r0
 8000932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000936:	4611      	mov	r1, r2
 8000938:	4618      	mov	r0, r3
 800093a:	f7ff ff5d 	bl	80007f8 <__NVIC_SetPriority>
}
 800093e:	bf00      	nop
 8000940:	3718      	adds	r7, #24
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}

08000946 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000946:	b580      	push	{r7, lr}
 8000948:	b082      	sub	sp, #8
 800094a:	af00      	add	r7, sp, #0
 800094c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800094e:	6878      	ldr	r0, [r7, #4]
 8000950:	f7ff ffb0 	bl	80008b4 <SysTick_Config>
 8000954:	4603      	mov	r3, r0
}
 8000956:	4618      	mov	r0, r3
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
	...

08000960 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000960:	b480      	push	{r7}
 8000962:	b089      	sub	sp, #36	@ 0x24
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
 8000968:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800096a:	2300      	movs	r3, #0
 800096c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800096e:	2300      	movs	r3, #0
 8000970:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000972:	2300      	movs	r3, #0
 8000974:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000976:	2300      	movs	r3, #0
 8000978:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800097a:	2300      	movs	r3, #0
 800097c:	61fb      	str	r3, [r7, #28]
 800097e:	e175      	b.n	8000c6c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000980:	2201      	movs	r2, #1
 8000982:	69fb      	ldr	r3, [r7, #28]
 8000984:	fa02 f303 	lsl.w	r3, r2, r3
 8000988:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	697a      	ldr	r2, [r7, #20]
 8000990:	4013      	ands	r3, r2
 8000992:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8000994:	693a      	ldr	r2, [r7, #16]
 8000996:	697b      	ldr	r3, [r7, #20]
 8000998:	429a      	cmp	r2, r3
 800099a:	f040 8164 	bne.w	8000c66 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	685b      	ldr	r3, [r3, #4]
 80009a2:	f003 0303 	and.w	r3, r3, #3
 80009a6:	2b01      	cmp	r3, #1
 80009a8:	d005      	beq.n	80009b6 <HAL_GPIO_Init+0x56>
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	685b      	ldr	r3, [r3, #4]
 80009ae:	f003 0303 	and.w	r3, r3, #3
 80009b2:	2b02      	cmp	r3, #2
 80009b4:	d130      	bne.n	8000a18 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	689b      	ldr	r3, [r3, #8]
 80009ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80009bc:	69fb      	ldr	r3, [r7, #28]
 80009be:	005b      	lsls	r3, r3, #1
 80009c0:	2203      	movs	r2, #3
 80009c2:	fa02 f303 	lsl.w	r3, r2, r3
 80009c6:	43db      	mvns	r3, r3
 80009c8:	69ba      	ldr	r2, [r7, #24]
 80009ca:	4013      	ands	r3, r2
 80009cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	68da      	ldr	r2, [r3, #12]
 80009d2:	69fb      	ldr	r3, [r7, #28]
 80009d4:	005b      	lsls	r3, r3, #1
 80009d6:	fa02 f303 	lsl.w	r3, r2, r3
 80009da:	69ba      	ldr	r2, [r7, #24]
 80009dc:	4313      	orrs	r3, r2
 80009de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	69ba      	ldr	r2, [r7, #24]
 80009e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	685b      	ldr	r3, [r3, #4]
 80009ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009ec:	2201      	movs	r2, #1
 80009ee:	69fb      	ldr	r3, [r7, #28]
 80009f0:	fa02 f303 	lsl.w	r3, r2, r3
 80009f4:	43db      	mvns	r3, r3
 80009f6:	69ba      	ldr	r2, [r7, #24]
 80009f8:	4013      	ands	r3, r2
 80009fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	685b      	ldr	r3, [r3, #4]
 8000a00:	091b      	lsrs	r3, r3, #4
 8000a02:	f003 0201 	and.w	r2, r3, #1
 8000a06:	69fb      	ldr	r3, [r7, #28]
 8000a08:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0c:	69ba      	ldr	r2, [r7, #24]
 8000a0e:	4313      	orrs	r3, r2
 8000a10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	69ba      	ldr	r2, [r7, #24]
 8000a16:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	685b      	ldr	r3, [r3, #4]
 8000a1c:	f003 0303 	and.w	r3, r3, #3
 8000a20:	2b03      	cmp	r3, #3
 8000a22:	d017      	beq.n	8000a54 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	68db      	ldr	r3, [r3, #12]
 8000a28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000a2a:	69fb      	ldr	r3, [r7, #28]
 8000a2c:	005b      	lsls	r3, r3, #1
 8000a2e:	2203      	movs	r2, #3
 8000a30:	fa02 f303 	lsl.w	r3, r2, r3
 8000a34:	43db      	mvns	r3, r3
 8000a36:	69ba      	ldr	r2, [r7, #24]
 8000a38:	4013      	ands	r3, r2
 8000a3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	689a      	ldr	r2, [r3, #8]
 8000a40:	69fb      	ldr	r3, [r7, #28]
 8000a42:	005b      	lsls	r3, r3, #1
 8000a44:	fa02 f303 	lsl.w	r3, r2, r3
 8000a48:	69ba      	ldr	r2, [r7, #24]
 8000a4a:	4313      	orrs	r3, r2
 8000a4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	69ba      	ldr	r2, [r7, #24]
 8000a52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	685b      	ldr	r3, [r3, #4]
 8000a58:	f003 0303 	and.w	r3, r3, #3
 8000a5c:	2b02      	cmp	r3, #2
 8000a5e:	d123      	bne.n	8000aa8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000a60:	69fb      	ldr	r3, [r7, #28]
 8000a62:	08da      	lsrs	r2, r3, #3
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	3208      	adds	r2, #8
 8000a68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000a6e:	69fb      	ldr	r3, [r7, #28]
 8000a70:	f003 0307 	and.w	r3, r3, #7
 8000a74:	009b      	lsls	r3, r3, #2
 8000a76:	220f      	movs	r2, #15
 8000a78:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7c:	43db      	mvns	r3, r3
 8000a7e:	69ba      	ldr	r2, [r7, #24]
 8000a80:	4013      	ands	r3, r2
 8000a82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	691a      	ldr	r2, [r3, #16]
 8000a88:	69fb      	ldr	r3, [r7, #28]
 8000a8a:	f003 0307 	and.w	r3, r3, #7
 8000a8e:	009b      	lsls	r3, r3, #2
 8000a90:	fa02 f303 	lsl.w	r3, r2, r3
 8000a94:	69ba      	ldr	r2, [r7, #24]
 8000a96:	4313      	orrs	r3, r2
 8000a98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000a9a:	69fb      	ldr	r3, [r7, #28]
 8000a9c:	08da      	lsrs	r2, r3, #3
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	3208      	adds	r2, #8
 8000aa2:	69b9      	ldr	r1, [r7, #24]
 8000aa4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000aae:	69fb      	ldr	r3, [r7, #28]
 8000ab0:	005b      	lsls	r3, r3, #1
 8000ab2:	2203      	movs	r2, #3
 8000ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab8:	43db      	mvns	r3, r3
 8000aba:	69ba      	ldr	r2, [r7, #24]
 8000abc:	4013      	ands	r3, r2
 8000abe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	f003 0203 	and.w	r2, r3, #3
 8000ac8:	69fb      	ldr	r3, [r7, #28]
 8000aca:	005b      	lsls	r3, r3, #1
 8000acc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad0:	69ba      	ldr	r2, [r7, #24]
 8000ad2:	4313      	orrs	r3, r2
 8000ad4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	69ba      	ldr	r2, [r7, #24]
 8000ada:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	685b      	ldr	r3, [r3, #4]
 8000ae0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	f000 80be 	beq.w	8000c66 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aea:	4b66      	ldr	r3, [pc, #408]	@ (8000c84 <HAL_GPIO_Init+0x324>)
 8000aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aee:	4a65      	ldr	r2, [pc, #404]	@ (8000c84 <HAL_GPIO_Init+0x324>)
 8000af0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000af4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000af6:	4b63      	ldr	r3, [pc, #396]	@ (8000c84 <HAL_GPIO_Init+0x324>)
 8000af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000afa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000afe:	60fb      	str	r3, [r7, #12]
 8000b00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000b02:	4a61      	ldr	r2, [pc, #388]	@ (8000c88 <HAL_GPIO_Init+0x328>)
 8000b04:	69fb      	ldr	r3, [r7, #28]
 8000b06:	089b      	lsrs	r3, r3, #2
 8000b08:	3302      	adds	r3, #2
 8000b0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000b10:	69fb      	ldr	r3, [r7, #28]
 8000b12:	f003 0303 	and.w	r3, r3, #3
 8000b16:	009b      	lsls	r3, r3, #2
 8000b18:	220f      	movs	r2, #15
 8000b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1e:	43db      	mvns	r3, r3
 8000b20:	69ba      	ldr	r2, [r7, #24]
 8000b22:	4013      	ands	r3, r2
 8000b24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	4a58      	ldr	r2, [pc, #352]	@ (8000c8c <HAL_GPIO_Init+0x32c>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d037      	beq.n	8000b9e <HAL_GPIO_Init+0x23e>
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	4a57      	ldr	r2, [pc, #348]	@ (8000c90 <HAL_GPIO_Init+0x330>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d031      	beq.n	8000b9a <HAL_GPIO_Init+0x23a>
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	4a56      	ldr	r2, [pc, #344]	@ (8000c94 <HAL_GPIO_Init+0x334>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d02b      	beq.n	8000b96 <HAL_GPIO_Init+0x236>
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	4a55      	ldr	r2, [pc, #340]	@ (8000c98 <HAL_GPIO_Init+0x338>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d025      	beq.n	8000b92 <HAL_GPIO_Init+0x232>
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	4a54      	ldr	r2, [pc, #336]	@ (8000c9c <HAL_GPIO_Init+0x33c>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d01f      	beq.n	8000b8e <HAL_GPIO_Init+0x22e>
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	4a53      	ldr	r2, [pc, #332]	@ (8000ca0 <HAL_GPIO_Init+0x340>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d019      	beq.n	8000b8a <HAL_GPIO_Init+0x22a>
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	4a52      	ldr	r2, [pc, #328]	@ (8000ca4 <HAL_GPIO_Init+0x344>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d013      	beq.n	8000b86 <HAL_GPIO_Init+0x226>
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	4a51      	ldr	r2, [pc, #324]	@ (8000ca8 <HAL_GPIO_Init+0x348>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d00d      	beq.n	8000b82 <HAL_GPIO_Init+0x222>
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	4a50      	ldr	r2, [pc, #320]	@ (8000cac <HAL_GPIO_Init+0x34c>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d007      	beq.n	8000b7e <HAL_GPIO_Init+0x21e>
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	4a4f      	ldr	r2, [pc, #316]	@ (8000cb0 <HAL_GPIO_Init+0x350>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d101      	bne.n	8000b7a <HAL_GPIO_Init+0x21a>
 8000b76:	2309      	movs	r3, #9
 8000b78:	e012      	b.n	8000ba0 <HAL_GPIO_Init+0x240>
 8000b7a:	230a      	movs	r3, #10
 8000b7c:	e010      	b.n	8000ba0 <HAL_GPIO_Init+0x240>
 8000b7e:	2308      	movs	r3, #8
 8000b80:	e00e      	b.n	8000ba0 <HAL_GPIO_Init+0x240>
 8000b82:	2307      	movs	r3, #7
 8000b84:	e00c      	b.n	8000ba0 <HAL_GPIO_Init+0x240>
 8000b86:	2306      	movs	r3, #6
 8000b88:	e00a      	b.n	8000ba0 <HAL_GPIO_Init+0x240>
 8000b8a:	2305      	movs	r3, #5
 8000b8c:	e008      	b.n	8000ba0 <HAL_GPIO_Init+0x240>
 8000b8e:	2304      	movs	r3, #4
 8000b90:	e006      	b.n	8000ba0 <HAL_GPIO_Init+0x240>
 8000b92:	2303      	movs	r3, #3
 8000b94:	e004      	b.n	8000ba0 <HAL_GPIO_Init+0x240>
 8000b96:	2302      	movs	r3, #2
 8000b98:	e002      	b.n	8000ba0 <HAL_GPIO_Init+0x240>
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	e000      	b.n	8000ba0 <HAL_GPIO_Init+0x240>
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	69fa      	ldr	r2, [r7, #28]
 8000ba2:	f002 0203 	and.w	r2, r2, #3
 8000ba6:	0092      	lsls	r2, r2, #2
 8000ba8:	4093      	lsls	r3, r2
 8000baa:	69ba      	ldr	r2, [r7, #24]
 8000bac:	4313      	orrs	r3, r2
 8000bae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000bb0:	4935      	ldr	r1, [pc, #212]	@ (8000c88 <HAL_GPIO_Init+0x328>)
 8000bb2:	69fb      	ldr	r3, [r7, #28]
 8000bb4:	089b      	lsrs	r3, r3, #2
 8000bb6:	3302      	adds	r3, #2
 8000bb8:	69ba      	ldr	r2, [r7, #24]
 8000bba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000bbe:	4b3d      	ldr	r3, [pc, #244]	@ (8000cb4 <HAL_GPIO_Init+0x354>)
 8000bc0:	689b      	ldr	r3, [r3, #8]
 8000bc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000bc4:	693b      	ldr	r3, [r7, #16]
 8000bc6:	43db      	mvns	r3, r3
 8000bc8:	69ba      	ldr	r2, [r7, #24]
 8000bca:	4013      	ands	r3, r2
 8000bcc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d003      	beq.n	8000be2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000bda:	69ba      	ldr	r2, [r7, #24]
 8000bdc:	693b      	ldr	r3, [r7, #16]
 8000bde:	4313      	orrs	r3, r2
 8000be0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000be2:	4a34      	ldr	r2, [pc, #208]	@ (8000cb4 <HAL_GPIO_Init+0x354>)
 8000be4:	69bb      	ldr	r3, [r7, #24]
 8000be6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000be8:	4b32      	ldr	r3, [pc, #200]	@ (8000cb4 <HAL_GPIO_Init+0x354>)
 8000bea:	68db      	ldr	r3, [r3, #12]
 8000bec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000bee:	693b      	ldr	r3, [r7, #16]
 8000bf0:	43db      	mvns	r3, r3
 8000bf2:	69ba      	ldr	r2, [r7, #24]
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d003      	beq.n	8000c0c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000c04:	69ba      	ldr	r2, [r7, #24]
 8000c06:	693b      	ldr	r3, [r7, #16]
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000c0c:	4a29      	ldr	r2, [pc, #164]	@ (8000cb4 <HAL_GPIO_Init+0x354>)
 8000c0e:	69bb      	ldr	r3, [r7, #24]
 8000c10:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000c12:	4b28      	ldr	r3, [pc, #160]	@ (8000cb4 <HAL_GPIO_Init+0x354>)
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c18:	693b      	ldr	r3, [r7, #16]
 8000c1a:	43db      	mvns	r3, r3
 8000c1c:	69ba      	ldr	r2, [r7, #24]
 8000c1e:	4013      	ands	r3, r2
 8000c20:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d003      	beq.n	8000c36 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000c2e:	69ba      	ldr	r2, [r7, #24]
 8000c30:	693b      	ldr	r3, [r7, #16]
 8000c32:	4313      	orrs	r3, r2
 8000c34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000c36:	4a1f      	ldr	r2, [pc, #124]	@ (8000cb4 <HAL_GPIO_Init+0x354>)
 8000c38:	69bb      	ldr	r3, [r7, #24]
 8000c3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c3c:	4b1d      	ldr	r3, [pc, #116]	@ (8000cb4 <HAL_GPIO_Init+0x354>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000c42:	693b      	ldr	r3, [r7, #16]
 8000c44:	43db      	mvns	r3, r3
 8000c46:	69ba      	ldr	r2, [r7, #24]
 8000c48:	4013      	ands	r3, r2
 8000c4a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d003      	beq.n	8000c60 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000c58:	69ba      	ldr	r2, [r7, #24]
 8000c5a:	693b      	ldr	r3, [r7, #16]
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000c60:	4a14      	ldr	r2, [pc, #80]	@ (8000cb4 <HAL_GPIO_Init+0x354>)
 8000c62:	69bb      	ldr	r3, [r7, #24]
 8000c64:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8000c66:	69fb      	ldr	r3, [r7, #28]
 8000c68:	3301      	adds	r3, #1
 8000c6a:	61fb      	str	r3, [r7, #28]
 8000c6c:	69fb      	ldr	r3, [r7, #28]
 8000c6e:	2b0f      	cmp	r3, #15
 8000c70:	f67f ae86 	bls.w	8000980 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000c74:	bf00      	nop
 8000c76:	bf00      	nop
 8000c78:	3724      	adds	r7, #36	@ 0x24
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	40023800 	.word	0x40023800
 8000c88:	40013800 	.word	0x40013800
 8000c8c:	40020000 	.word	0x40020000
 8000c90:	40020400 	.word	0x40020400
 8000c94:	40020800 	.word	0x40020800
 8000c98:	40020c00 	.word	0x40020c00
 8000c9c:	40021000 	.word	0x40021000
 8000ca0:	40021400 	.word	0x40021400
 8000ca4:	40021800 	.word	0x40021800
 8000ca8:	40021c00 	.word	0x40021c00
 8000cac:	40022000 	.word	0x40022000
 8000cb0:	40022400 	.word	0x40022400
 8000cb4:	40013c00 	.word	0x40013c00

08000cb8 <__libc_init_array>:
 8000cb8:	b570      	push	{r4, r5, r6, lr}
 8000cba:	4d0d      	ldr	r5, [pc, #52]	@ (8000cf0 <__libc_init_array+0x38>)
 8000cbc:	4c0d      	ldr	r4, [pc, #52]	@ (8000cf4 <__libc_init_array+0x3c>)
 8000cbe:	1b64      	subs	r4, r4, r5
 8000cc0:	10a4      	asrs	r4, r4, #2
 8000cc2:	2600      	movs	r6, #0
 8000cc4:	42a6      	cmp	r6, r4
 8000cc6:	d109      	bne.n	8000cdc <__libc_init_array+0x24>
 8000cc8:	4d0b      	ldr	r5, [pc, #44]	@ (8000cf8 <__libc_init_array+0x40>)
 8000cca:	4c0c      	ldr	r4, [pc, #48]	@ (8000cfc <__libc_init_array+0x44>)
 8000ccc:	f000 f818 	bl	8000d00 <_init>
 8000cd0:	1b64      	subs	r4, r4, r5
 8000cd2:	10a4      	asrs	r4, r4, #2
 8000cd4:	2600      	movs	r6, #0
 8000cd6:	42a6      	cmp	r6, r4
 8000cd8:	d105      	bne.n	8000ce6 <__libc_init_array+0x2e>
 8000cda:	bd70      	pop	{r4, r5, r6, pc}
 8000cdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ce0:	4798      	blx	r3
 8000ce2:	3601      	adds	r6, #1
 8000ce4:	e7ee      	b.n	8000cc4 <__libc_init_array+0xc>
 8000ce6:	f855 3b04 	ldr.w	r3, [r5], #4
 8000cea:	4798      	blx	r3
 8000cec:	3601      	adds	r6, #1
 8000cee:	e7f2      	b.n	8000cd6 <__libc_init_array+0x1e>
 8000cf0:	08000d18 	.word	0x08000d18
 8000cf4:	08000d18 	.word	0x08000d18
 8000cf8:	08000d18 	.word	0x08000d18
 8000cfc:	08000d1c 	.word	0x08000d1c

08000d00 <_init>:
 8000d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d02:	bf00      	nop
 8000d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d06:	bc08      	pop	{r3}
 8000d08:	469e      	mov	lr, r3
 8000d0a:	4770      	bx	lr

08000d0c <_fini>:
 8000d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d0e:	bf00      	nop
 8000d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d12:	bc08      	pop	{r3}
 8000d14:	469e      	mov	lr, r3
 8000d16:	4770      	bx	lr
