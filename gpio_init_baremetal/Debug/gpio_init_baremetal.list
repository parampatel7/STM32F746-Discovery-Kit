
gpio_init_baremetal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001290  080001c8  080001c8  000011c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001458  08001458  00002458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001468  08001468  0000300c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08001468  08001468  00002468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001470  08001470  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001470  08001470  00002470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001474  08001474  00002474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001478  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08001484  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08001484  0000302c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003b6d  00000000  00000000  0000303c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000e1d  00000000  00000000  00006ba9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000438  00000000  00000000  000079c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000030b  00000000  00000000  00007e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000235d8  00000000  00000000  0000810b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000048fb  00000000  00000000  0002b6e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc8d1  00000000  00000000  0002ffde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010c8af  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000f28  00000000  00000000  0010c8f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0010d81c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08001440 	.word	0x08001440

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08001440 	.word	0x08001440

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000218:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800021c:	f000 b988 	b.w	8000530 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	468e      	mov	lr, r1
 8000240:	4604      	mov	r4, r0
 8000242:	4688      	mov	r8, r1
 8000244:	2b00      	cmp	r3, #0
 8000246:	d14a      	bne.n	80002de <__udivmoddi4+0xa6>
 8000248:	428a      	cmp	r2, r1
 800024a:	4617      	mov	r7, r2
 800024c:	d962      	bls.n	8000314 <__udivmoddi4+0xdc>
 800024e:	fab2 f682 	clz	r6, r2
 8000252:	b14e      	cbz	r6, 8000268 <__udivmoddi4+0x30>
 8000254:	f1c6 0320 	rsb	r3, r6, #32
 8000258:	fa01 f806 	lsl.w	r8, r1, r6
 800025c:	fa20 f303 	lsr.w	r3, r0, r3
 8000260:	40b7      	lsls	r7, r6
 8000262:	ea43 0808 	orr.w	r8, r3, r8
 8000266:	40b4      	lsls	r4, r6
 8000268:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800026c:	fa1f fc87 	uxth.w	ip, r7
 8000270:	fbb8 f1fe 	udiv	r1, r8, lr
 8000274:	0c23      	lsrs	r3, r4, #16
 8000276:	fb0e 8811 	mls	r8, lr, r1, r8
 800027a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027e:	fb01 f20c 	mul.w	r2, r1, ip
 8000282:	429a      	cmp	r2, r3
 8000284:	d909      	bls.n	800029a <__udivmoddi4+0x62>
 8000286:	18fb      	adds	r3, r7, r3
 8000288:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800028c:	f080 80ea 	bcs.w	8000464 <__udivmoddi4+0x22c>
 8000290:	429a      	cmp	r2, r3
 8000292:	f240 80e7 	bls.w	8000464 <__udivmoddi4+0x22c>
 8000296:	3902      	subs	r1, #2
 8000298:	443b      	add	r3, r7
 800029a:	1a9a      	subs	r2, r3, r2
 800029c:	b2a3      	uxth	r3, r4
 800029e:	fbb2 f0fe 	udiv	r0, r2, lr
 80002a2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002aa:	fb00 fc0c 	mul.w	ip, r0, ip
 80002ae:	459c      	cmp	ip, r3
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0x8e>
 80002b2:	18fb      	adds	r3, r7, r3
 80002b4:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80002b8:	f080 80d6 	bcs.w	8000468 <__udivmoddi4+0x230>
 80002bc:	459c      	cmp	ip, r3
 80002be:	f240 80d3 	bls.w	8000468 <__udivmoddi4+0x230>
 80002c2:	443b      	add	r3, r7
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002ca:	eba3 030c 	sub.w	r3, r3, ip
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa2>
 80002d2:	40f3      	lsrs	r3, r6
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xb6>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb0>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa2>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x14c>
 80002f6:	4573      	cmp	r3, lr
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xc8>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 8105 	bhi.w	800050a <__udivmoddi4+0x2d2>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb6e 0203 	sbc.w	r2, lr, r3
 8000306:	2001      	movs	r0, #1
 8000308:	4690      	mov	r8, r2
 800030a:	2d00      	cmp	r5, #0
 800030c:	d0e5      	beq.n	80002da <__udivmoddi4+0xa2>
 800030e:	e9c5 4800 	strd	r4, r8, [r5]
 8000312:	e7e2      	b.n	80002da <__udivmoddi4+0xa2>
 8000314:	2a00      	cmp	r2, #0
 8000316:	f000 8090 	beq.w	800043a <__udivmoddi4+0x202>
 800031a:	fab2 f682 	clz	r6, r2
 800031e:	2e00      	cmp	r6, #0
 8000320:	f040 80a4 	bne.w	800046c <__udivmoddi4+0x234>
 8000324:	1a8a      	subs	r2, r1, r2
 8000326:	0c03      	lsrs	r3, r0, #16
 8000328:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800032c:	b280      	uxth	r0, r0
 800032e:	b2bc      	uxth	r4, r7
 8000330:	2101      	movs	r1, #1
 8000332:	fbb2 fcfe 	udiv	ip, r2, lr
 8000336:	fb0e 221c 	mls	r2, lr, ip, r2
 800033a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800033e:	fb04 f20c 	mul.w	r2, r4, ip
 8000342:	429a      	cmp	r2, r3
 8000344:	d907      	bls.n	8000356 <__udivmoddi4+0x11e>
 8000346:	18fb      	adds	r3, r7, r3
 8000348:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x11c>
 800034e:	429a      	cmp	r2, r3
 8000350:	f200 80e0 	bhi.w	8000514 <__udivmoddi4+0x2dc>
 8000354:	46c4      	mov	ip, r8
 8000356:	1a9b      	subs	r3, r3, r2
 8000358:	fbb3 f2fe 	udiv	r2, r3, lr
 800035c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000360:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000364:	fb02 f404 	mul.w	r4, r2, r4
 8000368:	429c      	cmp	r4, r3
 800036a:	d907      	bls.n	800037c <__udivmoddi4+0x144>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x142>
 8000374:	429c      	cmp	r4, r3
 8000376:	f200 80ca 	bhi.w	800050e <__udivmoddi4+0x2d6>
 800037a:	4602      	mov	r2, r0
 800037c:	1b1b      	subs	r3, r3, r4
 800037e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x98>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa0e f401 	lsl.w	r4, lr, r1
 8000394:	fa20 f306 	lsr.w	r3, r0, r6
 8000398:	fa2e fe06 	lsr.w	lr, lr, r6
 800039c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003a0:	4323      	orrs	r3, r4
 80003a2:	fa00 f801 	lsl.w	r8, r0, r1
 80003a6:	fa1f fc87 	uxth.w	ip, r7
 80003aa:	fbbe f0f9 	udiv	r0, lr, r9
 80003ae:	0c1c      	lsrs	r4, r3, #16
 80003b0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003b4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003b8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003bc:	45a6      	cmp	lr, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d909      	bls.n	80003d8 <__udivmoddi4+0x1a0>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80003ca:	f080 809c 	bcs.w	8000506 <__udivmoddi4+0x2ce>
 80003ce:	45a6      	cmp	lr, r4
 80003d0:	f240 8099 	bls.w	8000506 <__udivmoddi4+0x2ce>
 80003d4:	3802      	subs	r0, #2
 80003d6:	443c      	add	r4, r7
 80003d8:	eba4 040e 	sub.w	r4, r4, lr
 80003dc:	fa1f fe83 	uxth.w	lr, r3
 80003e0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e4:	fb09 4413 	mls	r4, r9, r3, r4
 80003e8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ec:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f0:	45a4      	cmp	ip, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x1ce>
 80003f4:	193c      	adds	r4, r7, r4
 80003f6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003fa:	f080 8082 	bcs.w	8000502 <__udivmoddi4+0x2ca>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d97f      	bls.n	8000502 <__udivmoddi4+0x2ca>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800040a:	eba4 040c 	sub.w	r4, r4, ip
 800040e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000412:	4564      	cmp	r4, ip
 8000414:	4673      	mov	r3, lr
 8000416:	46e1      	mov	r9, ip
 8000418:	d362      	bcc.n	80004e0 <__udivmoddi4+0x2a8>
 800041a:	d05f      	beq.n	80004dc <__udivmoddi4+0x2a4>
 800041c:	b15d      	cbz	r5, 8000436 <__udivmoddi4+0x1fe>
 800041e:	ebb8 0203 	subs.w	r2, r8, r3
 8000422:	eb64 0409 	sbc.w	r4, r4, r9
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	fa22 f301 	lsr.w	r3, r2, r1
 800042e:	431e      	orrs	r6, r3
 8000430:	40cc      	lsrs	r4, r1
 8000432:	e9c5 6400 	strd	r6, r4, [r5]
 8000436:	2100      	movs	r1, #0
 8000438:	e74f      	b.n	80002da <__udivmoddi4+0xa2>
 800043a:	fbb1 fcf2 	udiv	ip, r1, r2
 800043e:	0c01      	lsrs	r1, r0, #16
 8000440:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000444:	b280      	uxth	r0, r0
 8000446:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800044a:	463b      	mov	r3, r7
 800044c:	4638      	mov	r0, r7
 800044e:	463c      	mov	r4, r7
 8000450:	46b8      	mov	r8, r7
 8000452:	46be      	mov	lr, r7
 8000454:	2620      	movs	r6, #32
 8000456:	fbb1 f1f7 	udiv	r1, r1, r7
 800045a:	eba2 0208 	sub.w	r2, r2, r8
 800045e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000462:	e766      	b.n	8000332 <__udivmoddi4+0xfa>
 8000464:	4601      	mov	r1, r0
 8000466:	e718      	b.n	800029a <__udivmoddi4+0x62>
 8000468:	4610      	mov	r0, r2
 800046a:	e72c      	b.n	80002c6 <__udivmoddi4+0x8e>
 800046c:	f1c6 0220 	rsb	r2, r6, #32
 8000470:	fa2e f302 	lsr.w	r3, lr, r2
 8000474:	40b7      	lsls	r7, r6
 8000476:	40b1      	lsls	r1, r6
 8000478:	fa20 f202 	lsr.w	r2, r0, r2
 800047c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000480:	430a      	orrs	r2, r1
 8000482:	fbb3 f8fe 	udiv	r8, r3, lr
 8000486:	b2bc      	uxth	r4, r7
 8000488:	fb0e 3318 	mls	r3, lr, r8, r3
 800048c:	0c11      	lsrs	r1, r2, #16
 800048e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000492:	fb08 f904 	mul.w	r9, r8, r4
 8000496:	40b0      	lsls	r0, r6
 8000498:	4589      	cmp	r9, r1
 800049a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800049e:	b280      	uxth	r0, r0
 80004a0:	d93e      	bls.n	8000520 <__udivmoddi4+0x2e8>
 80004a2:	1879      	adds	r1, r7, r1
 80004a4:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 80004a8:	d201      	bcs.n	80004ae <__udivmoddi4+0x276>
 80004aa:	4589      	cmp	r9, r1
 80004ac:	d81f      	bhi.n	80004ee <__udivmoddi4+0x2b6>
 80004ae:	eba1 0109 	sub.w	r1, r1, r9
 80004b2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b6:	fb09 f804 	mul.w	r8, r9, r4
 80004ba:	fb0e 1119 	mls	r1, lr, r9, r1
 80004be:	b292      	uxth	r2, r2
 80004c0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c4:	4542      	cmp	r2, r8
 80004c6:	d229      	bcs.n	800051c <__udivmoddi4+0x2e4>
 80004c8:	18ba      	adds	r2, r7, r2
 80004ca:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80004ce:	d2c4      	bcs.n	800045a <__udivmoddi4+0x222>
 80004d0:	4542      	cmp	r2, r8
 80004d2:	d2c2      	bcs.n	800045a <__udivmoddi4+0x222>
 80004d4:	f1a9 0102 	sub.w	r1, r9, #2
 80004d8:	443a      	add	r2, r7
 80004da:	e7be      	b.n	800045a <__udivmoddi4+0x222>
 80004dc:	45f0      	cmp	r8, lr
 80004de:	d29d      	bcs.n	800041c <__udivmoddi4+0x1e4>
 80004e0:	ebbe 0302 	subs.w	r3, lr, r2
 80004e4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004e8:	3801      	subs	r0, #1
 80004ea:	46e1      	mov	r9, ip
 80004ec:	e796      	b.n	800041c <__udivmoddi4+0x1e4>
 80004ee:	eba7 0909 	sub.w	r9, r7, r9
 80004f2:	4449      	add	r1, r9
 80004f4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004f8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fc:	fb09 f804 	mul.w	r8, r9, r4
 8000500:	e7db      	b.n	80004ba <__udivmoddi4+0x282>
 8000502:	4673      	mov	r3, lr
 8000504:	e77f      	b.n	8000406 <__udivmoddi4+0x1ce>
 8000506:	4650      	mov	r0, sl
 8000508:	e766      	b.n	80003d8 <__udivmoddi4+0x1a0>
 800050a:	4608      	mov	r0, r1
 800050c:	e6fd      	b.n	800030a <__udivmoddi4+0xd2>
 800050e:	443b      	add	r3, r7
 8000510:	3a02      	subs	r2, #2
 8000512:	e733      	b.n	800037c <__udivmoddi4+0x144>
 8000514:	f1ac 0c02 	sub.w	ip, ip, #2
 8000518:	443b      	add	r3, r7
 800051a:	e71c      	b.n	8000356 <__udivmoddi4+0x11e>
 800051c:	4649      	mov	r1, r9
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x222>
 8000520:	eba1 0109 	sub.w	r1, r1, r9
 8000524:	46c4      	mov	ip, r8
 8000526:	fbb1 f9fe 	udiv	r9, r1, lr
 800052a:	fb09 f804 	mul.w	r8, r9, r4
 800052e:	e7c4      	b.n	80004ba <__udivmoddi4+0x282>

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800053a:	f000 f96c 	bl	8000816 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800053e:	f000 f867 	bl	8000610 <SystemClock_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  // Adjust if using a different CMSIS core header

    GPIO_Init();
 8000542:	f000 f81b 	bl	800057c <GPIO_Init>
            GPIOA->ODR |= (1 << 5);          // Turn on LED (set PA5)
        } else {
            GPIOA->ODR &= ~(1 << 5);         // Turn off LED (reset PA5)
        }*/
//IDR is input data register, for PI11 we read 11th bit
    	uint32_t button_state = (GPIOI->IDR & (1U << 11)); //1U AS UNSIGNED, PLACING ONLY 1 IS INT AND CAN CAUSE SOME UNDEFINED BEHAVIOUR
 8000546:	4b0b      	ldr	r3, [pc, #44]	@ (8000574 <main+0x40>)
 8000548:	691b      	ldr	r3, [r3, #16]
 800054a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800054e:	607b      	str	r3, [r7, #4]

    	        if (button_state)
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	2b00      	cmp	r3, #0
 8000554:	d006      	beq.n	8000564 <main+0x30>
    	        {//ODR is output data register, PD5 has LED
    	            // Button is high (not pressed if active-low)
    	            GPIOD->ODR &= ~(1U << 5);  // Turn off LED
 8000556:	4b08      	ldr	r3, [pc, #32]	@ (8000578 <main+0x44>)
 8000558:	695b      	ldr	r3, [r3, #20]
 800055a:	4a07      	ldr	r2, [pc, #28]	@ (8000578 <main+0x44>)
 800055c:	f023 0320 	bic.w	r3, r3, #32
 8000560:	6153      	str	r3, [r2, #20]
 8000562:	e7f0      	b.n	8000546 <main+0x12>
    	        }
    	        else
    	        {
    	            // Button is low (pressed if active-low)
    	            GPIOD->ODR |= (1U << 5);   // Turn on LED
 8000564:	4b04      	ldr	r3, [pc, #16]	@ (8000578 <main+0x44>)
 8000566:	695b      	ldr	r3, [r3, #20]
 8000568:	4a03      	ldr	r2, [pc, #12]	@ (8000578 <main+0x44>)
 800056a:	f043 0320 	orr.w	r3, r3, #32
 800056e:	6153      	str	r3, [r2, #20]
    while (1) {
 8000570:	e7e9      	b.n	8000546 <main+0x12>
 8000572:	bf00      	nop
 8000574:	40022000 	.word	0x40022000
 8000578:	40020c00 	.word	0x40020c00

0800057c <GPIO_Init>:
    	        }
    }
}
static void GPIO_Init(void) {
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
    // 3. Configure PC13 as input
    GPIOC->MODER &= ~(3 << (13 * 2)); // Input mode (00)
    GPIOC->PUPDR &= ~(3 << (13 * 2)); // No pull-up, pull-down*/

	// Enable clocks for GPIOD and GPIOI
	    RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN | RCC_AHB1ENR_GPIOIEN;
 8000580:	4b20      	ldr	r3, [pc, #128]	@ (8000604 <GPIO_Init+0x88>)
 8000582:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000584:	4a1f      	ldr	r2, [pc, #124]	@ (8000604 <GPIO_Init+0x88>)
 8000586:	f443 7384 	orr.w	r3, r3, #264	@ 0x108
 800058a:	6313      	str	r3, [r2, #48]	@ 0x30
	    // --- Configure PD5 (LED) ---
	     /*MODER5 = 00 (INPUT)
	    			01 (output)
	    			10 (ALTERNATE FUNCTION
	    			11 (ANALOG) */
	    GPIOD->MODER &= ~(3U << 10); //WE FIRST CLEAR ALL TWO BITS AND THEN SET THEM
 800058c:	4b1e      	ldr	r3, [pc, #120]	@ (8000608 <GPIO_Init+0x8c>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a1d      	ldr	r2, [pc, #116]	@ (8000608 <GPIO_Init+0x8c>)
 8000592:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000596:	6013      	str	r3, [r2, #0]
	    GPIOD->MODER |=  (1U << 10);
 8000598:	4b1b      	ldr	r3, [pc, #108]	@ (8000608 <GPIO_Init+0x8c>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a1a      	ldr	r2, [pc, #104]	@ (8000608 <GPIO_Init+0x8c>)
 800059e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80005a2:	6013      	str	r3, [r2, #0]

	    // OTYPER5 = 0 (push-pull)
	    GPIOD->OTYPER &= ~(1U << 5);
 80005a4:	4b18      	ldr	r3, [pc, #96]	@ (8000608 <GPIO_Init+0x8c>)
 80005a6:	685b      	ldr	r3, [r3, #4]
 80005a8:	4a17      	ldr	r2, [pc, #92]	@ (8000608 <GPIO_Init+0x8c>)
 80005aa:	f023 0320 	bic.w	r3, r3, #32
 80005ae:	6053      	str	r3, [r2, #4]

	    // OSPEEDR5 = 10 (medium speed) or 11 (high speed)
	    GPIOD->OSPEEDR &= ~(3U << (5 * 2));
 80005b0:	4b15      	ldr	r3, [pc, #84]	@ (8000608 <GPIO_Init+0x8c>)
 80005b2:	689b      	ldr	r3, [r3, #8]
 80005b4:	4a14      	ldr	r2, [pc, #80]	@ (8000608 <GPIO_Init+0x8c>)
 80005b6:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80005ba:	6093      	str	r3, [r2, #8]
	    GPIOD->OSPEEDR |=  (2U << (5 * 2));  // Medium speed
 80005bc:	4b12      	ldr	r3, [pc, #72]	@ (8000608 <GPIO_Init+0x8c>)
 80005be:	689b      	ldr	r3, [r3, #8]
 80005c0:	4a11      	ldr	r2, [pc, #68]	@ (8000608 <GPIO_Init+0x8c>)
 80005c2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80005c6:	6093      	str	r3, [r2, #8]

	    // PUPDR5 = 00 (no pull-up/pull-down)
	    GPIOD->PUPDR &= ~(3U << 10);
 80005c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000608 <GPIO_Init+0x8c>)
 80005ca:	68db      	ldr	r3, [r3, #12]
 80005cc:	4a0e      	ldr	r2, [pc, #56]	@ (8000608 <GPIO_Init+0x8c>)
 80005ce:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80005d2:	60d3      	str	r3, [r2, #12]

	    // --- Configure PI11 (Button) ---
	    // MODER11 = 00 (input)
	    GPIOI->MODER &= ~(3U << 22);
 80005d4:	4b0d      	ldr	r3, [pc, #52]	@ (800060c <GPIO_Init+0x90>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a0c      	ldr	r2, [pc, #48]	@ (800060c <GPIO_Init+0x90>)
 80005da:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80005de:	6013      	str	r3, [r2, #0]
	    // PUPDR11 = 01 (pull-up), assuming active-low button
	    /*  00	No Pull	Pin is floating (default)
			01	Pull-Up	Pin is pulled high, CONNECTED TO Vcc
			10	Pull-Down	Pin is pulled low, CONNECTED TO GROUND
			11	Reserved	Do not use*/
	    GPIOI->PUPDR &= ~(3U << 22);
 80005e0:	4b0a      	ldr	r3, [pc, #40]	@ (800060c <GPIO_Init+0x90>)
 80005e2:	68db      	ldr	r3, [r3, #12]
 80005e4:	4a09      	ldr	r2, [pc, #36]	@ (800060c <GPIO_Init+0x90>)
 80005e6:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80005ea:	60d3      	str	r3, [r2, #12]
	    GPIOI->PUPDR |=  (1U << 22);  // Enable pull-up
 80005ec:	4b07      	ldr	r3, [pc, #28]	@ (800060c <GPIO_Init+0x90>)
 80005ee:	68db      	ldr	r3, [r3, #12]
 80005f0:	4a06      	ldr	r2, [pc, #24]	@ (800060c <GPIO_Init+0x90>)
 80005f2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80005f6:	60d3      	str	r3, [r2, #12]

	    // OTYPER and OSPEEDR not needed for input pins
}
 80005f8:	bf00      	nop
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	40023800 	.word	0x40023800
 8000608:	40020c00 	.word	0x40020c00
 800060c:	40022000 	.word	0x40022000

08000610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b094      	sub	sp, #80	@ 0x50
 8000614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000616:	f107 0320 	add.w	r3, r7, #32
 800061a:	2230      	movs	r2, #48	@ 0x30
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f000 fee2 	bl	80013e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000624:	f107 030c 	add.w	r3, r7, #12
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]
 8000632:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000634:	4b2b      	ldr	r3, [pc, #172]	@ (80006e4 <SystemClock_Config+0xd4>)
 8000636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000638:	4a2a      	ldr	r2, [pc, #168]	@ (80006e4 <SystemClock_Config+0xd4>)
 800063a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800063e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000640:	4b28      	ldr	r3, [pc, #160]	@ (80006e4 <SystemClock_Config+0xd4>)
 8000642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000644:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000648:	60bb      	str	r3, [r7, #8]
 800064a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800064c:	4b26      	ldr	r3, [pc, #152]	@ (80006e8 <SystemClock_Config+0xd8>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a25      	ldr	r2, [pc, #148]	@ (80006e8 <SystemClock_Config+0xd8>)
 8000652:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000656:	6013      	str	r3, [r2, #0]
 8000658:	4b23      	ldr	r3, [pc, #140]	@ (80006e8 <SystemClock_Config+0xd8>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000660:	607b      	str	r3, [r7, #4]
 8000662:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000664:	2301      	movs	r3, #1
 8000666:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000668:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800066c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066e:	2302      	movs	r3, #2
 8000670:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000672:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000676:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000678:	2319      	movs	r3, #25
 800067a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 800067c:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8000680:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000682:	2302      	movs	r3, #2
 8000684:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000686:	2309      	movs	r3, #9
 8000688:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800068a:	f107 0320 	add.w	r3, r7, #32
 800068e:	4618      	mov	r0, r3
 8000690:	f000 fa54 	bl	8000b3c <HAL_RCC_OscConfig>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800069a:	f000 f827 	bl	80006ec <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800069e:	f000 f9fd 	bl	8000a9c <HAL_PWREx_EnableOverDrive>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80006a8:	f000 f820 	bl	80006ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ac:	230f      	movs	r3, #15
 80006ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b0:	2302      	movs	r3, #2
 80006b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006b8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80006c4:	f107 030c 	add.w	r3, r7, #12
 80006c8:	2106      	movs	r1, #6
 80006ca:	4618      	mov	r0, r3
 80006cc:	f000 fcda 	bl	8001084 <HAL_RCC_ClockConfig>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0xca>
  {
    Error_Handler();
 80006d6:	f000 f809 	bl	80006ec <Error_Handler>
  }
}
 80006da:	bf00      	nop
 80006dc:	3750      	adds	r7, #80	@ 0x50
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40023800 	.word	0x40023800
 80006e8:	40007000 	.word	0x40007000

080006ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006f0:	b672      	cpsid	i
}
 80006f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006f4:	bf00      	nop
 80006f6:	e7fd      	b.n	80006f4 <Error_Handler+0x8>

080006f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80006fe:	4b0f      	ldr	r3, [pc, #60]	@ (800073c <HAL_MspInit+0x44>)
 8000700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000702:	4a0e      	ldr	r2, [pc, #56]	@ (800073c <HAL_MspInit+0x44>)
 8000704:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000708:	6413      	str	r3, [r2, #64]	@ 0x40
 800070a:	4b0c      	ldr	r3, [pc, #48]	@ (800073c <HAL_MspInit+0x44>)
 800070c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800070e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000716:	4b09      	ldr	r3, [pc, #36]	@ (800073c <HAL_MspInit+0x44>)
 8000718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800071a:	4a08      	ldr	r2, [pc, #32]	@ (800073c <HAL_MspInit+0x44>)
 800071c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000720:	6453      	str	r3, [r2, #68]	@ 0x44
 8000722:	4b06      	ldr	r3, [pc, #24]	@ (800073c <HAL_MspInit+0x44>)
 8000724:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000726:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800072a:	603b      	str	r3, [r7, #0]
 800072c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800072e:	bf00      	nop
 8000730:	370c      	adds	r7, #12
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	40023800 	.word	0x40023800

08000740 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000744:	bf00      	nop
 8000746:	e7fd      	b.n	8000744 <NMI_Handler+0x4>

08000748 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800074c:	bf00      	nop
 800074e:	e7fd      	b.n	800074c <HardFault_Handler+0x4>

08000750 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000754:	bf00      	nop
 8000756:	e7fd      	b.n	8000754 <MemManage_Handler+0x4>

08000758 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800075c:	bf00      	nop
 800075e:	e7fd      	b.n	800075c <BusFault_Handler+0x4>

08000760 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000764:	bf00      	nop
 8000766:	e7fd      	b.n	8000764 <UsageFault_Handler+0x4>

08000768 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800076c:	bf00      	nop
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr

08000776 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000776:	b480      	push	{r7}
 8000778:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800077a:	bf00      	nop
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr

08000784 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000788:	bf00      	nop
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr

08000792 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000792:	b580      	push	{r7, lr}
 8000794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000796:	f000 f87b 	bl	8000890 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
	...

080007a0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007a4:	4b06      	ldr	r3, [pc, #24]	@ (80007c0 <SystemInit+0x20>)
 80007a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80007aa:	4a05      	ldr	r2, [pc, #20]	@ (80007c0 <SystemInit+0x20>)
 80007ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80007b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007b4:	bf00      	nop
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	e000ed00 	.word	0xe000ed00

080007c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80007c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80007fc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 80007c8:	f7ff ffea 	bl	80007a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80007cc:	480c      	ldr	r0, [pc, #48]	@ (8000800 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80007ce:	490d      	ldr	r1, [pc, #52]	@ (8000804 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80007d0:	4a0d      	ldr	r2, [pc, #52]	@ (8000808 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80007d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007d4:	e002      	b.n	80007dc <LoopCopyDataInit>

080007d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007da:	3304      	adds	r3, #4

080007dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007e0:	d3f9      	bcc.n	80007d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007e2:	4a0a      	ldr	r2, [pc, #40]	@ (800080c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80007e4:	4c0a      	ldr	r4, [pc, #40]	@ (8000810 <LoopFillZerobss+0x22>)
  movs r3, #0
 80007e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007e8:	e001      	b.n	80007ee <LoopFillZerobss>

080007ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007ec:	3204      	adds	r2, #4

080007ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007f0:	d3fb      	bcc.n	80007ea <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80007f2:	f000 fe01 	bl	80013f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007f6:	f7ff fe9d 	bl	8000534 <main>
  bx  lr    
 80007fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80007fc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000800:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000804:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000808:	08001478 	.word	0x08001478
  ldr r2, =_sbss
 800080c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000810:	2000002c 	.word	0x2000002c

08000814 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000814:	e7fe      	b.n	8000814 <ADC_IRQHandler>

08000816 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000816:	b580      	push	{r7, lr}
 8000818:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800081a:	2003      	movs	r0, #3
 800081c:	f000 f90a 	bl	8000a34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000820:	2000      	movs	r0, #0
 8000822:	f000 f805 	bl	8000830 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000826:	f7ff ff67 	bl	80006f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800082a:	2300      	movs	r3, #0
}
 800082c:	4618      	mov	r0, r3
 800082e:	bd80      	pop	{r7, pc}

08000830 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000838:	4b12      	ldr	r3, [pc, #72]	@ (8000884 <HAL_InitTick+0x54>)
 800083a:	681a      	ldr	r2, [r3, #0]
 800083c:	4b12      	ldr	r3, [pc, #72]	@ (8000888 <HAL_InitTick+0x58>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	4619      	mov	r1, r3
 8000842:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000846:	fbb3 f3f1 	udiv	r3, r3, r1
 800084a:	fbb2 f3f3 	udiv	r3, r2, r3
 800084e:	4618      	mov	r0, r3
 8000850:	f000 f917 	bl	8000a82 <HAL_SYSTICK_Config>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800085a:	2301      	movs	r3, #1
 800085c:	e00e      	b.n	800087c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	2b0f      	cmp	r3, #15
 8000862:	d80a      	bhi.n	800087a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000864:	2200      	movs	r2, #0
 8000866:	6879      	ldr	r1, [r7, #4]
 8000868:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800086c:	f000 f8ed 	bl	8000a4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000870:	4a06      	ldr	r2, [pc, #24]	@ (800088c <HAL_InitTick+0x5c>)
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000876:	2300      	movs	r3, #0
 8000878:	e000      	b.n	800087c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800087a:	2301      	movs	r3, #1
}
 800087c:	4618      	mov	r0, r3
 800087e:	3708      	adds	r7, #8
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	20000000 	.word	0x20000000
 8000888:	20000008 	.word	0x20000008
 800088c:	20000004 	.word	0x20000004

08000890 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000894:	4b06      	ldr	r3, [pc, #24]	@ (80008b0 <HAL_IncTick+0x20>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	461a      	mov	r2, r3
 800089a:	4b06      	ldr	r3, [pc, #24]	@ (80008b4 <HAL_IncTick+0x24>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	4413      	add	r3, r2
 80008a0:	4a04      	ldr	r2, [pc, #16]	@ (80008b4 <HAL_IncTick+0x24>)
 80008a2:	6013      	str	r3, [r2, #0]
}
 80008a4:	bf00      	nop
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	20000008 	.word	0x20000008
 80008b4:	20000028 	.word	0x20000028

080008b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  return uwTick;
 80008bc:	4b03      	ldr	r3, [pc, #12]	@ (80008cc <HAL_GetTick+0x14>)
 80008be:	681b      	ldr	r3, [r3, #0]
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	20000028 	.word	0x20000028

080008d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b085      	sub	sp, #20
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	f003 0307 	and.w	r3, r3, #7
 80008de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008e0:	4b0b      	ldr	r3, [pc, #44]	@ (8000910 <__NVIC_SetPriorityGrouping+0x40>)
 80008e2:	68db      	ldr	r3, [r3, #12]
 80008e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008e6:	68ba      	ldr	r2, [r7, #8]
 80008e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80008ec:	4013      	ands	r3, r2
 80008ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008f4:	68bb      	ldr	r3, [r7, #8]
 80008f6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80008f8:	4b06      	ldr	r3, [pc, #24]	@ (8000914 <__NVIC_SetPriorityGrouping+0x44>)
 80008fa:	4313      	orrs	r3, r2
 80008fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008fe:	4a04      	ldr	r2, [pc, #16]	@ (8000910 <__NVIC_SetPriorityGrouping+0x40>)
 8000900:	68bb      	ldr	r3, [r7, #8]
 8000902:	60d3      	str	r3, [r2, #12]
}
 8000904:	bf00      	nop
 8000906:	3714      	adds	r7, #20
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr
 8000910:	e000ed00 	.word	0xe000ed00
 8000914:	05fa0000 	.word	0x05fa0000

08000918 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800091c:	4b04      	ldr	r3, [pc, #16]	@ (8000930 <__NVIC_GetPriorityGrouping+0x18>)
 800091e:	68db      	ldr	r3, [r3, #12]
 8000920:	0a1b      	lsrs	r3, r3, #8
 8000922:	f003 0307 	and.w	r3, r3, #7
}
 8000926:	4618      	mov	r0, r3
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr
 8000930:	e000ed00 	.word	0xe000ed00

08000934 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	4603      	mov	r3, r0
 800093c:	6039      	str	r1, [r7, #0]
 800093e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000940:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000944:	2b00      	cmp	r3, #0
 8000946:	db0a      	blt.n	800095e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	b2da      	uxtb	r2, r3
 800094c:	490c      	ldr	r1, [pc, #48]	@ (8000980 <__NVIC_SetPriority+0x4c>)
 800094e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000952:	0112      	lsls	r2, r2, #4
 8000954:	b2d2      	uxtb	r2, r2
 8000956:	440b      	add	r3, r1
 8000958:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800095c:	e00a      	b.n	8000974 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	b2da      	uxtb	r2, r3
 8000962:	4908      	ldr	r1, [pc, #32]	@ (8000984 <__NVIC_SetPriority+0x50>)
 8000964:	79fb      	ldrb	r3, [r7, #7]
 8000966:	f003 030f 	and.w	r3, r3, #15
 800096a:	3b04      	subs	r3, #4
 800096c:	0112      	lsls	r2, r2, #4
 800096e:	b2d2      	uxtb	r2, r2
 8000970:	440b      	add	r3, r1
 8000972:	761a      	strb	r2, [r3, #24]
}
 8000974:	bf00      	nop
 8000976:	370c      	adds	r7, #12
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr
 8000980:	e000e100 	.word	0xe000e100
 8000984:	e000ed00 	.word	0xe000ed00

08000988 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000988:	b480      	push	{r7}
 800098a:	b089      	sub	sp, #36	@ 0x24
 800098c:	af00      	add	r7, sp, #0
 800098e:	60f8      	str	r0, [r7, #12]
 8000990:	60b9      	str	r1, [r7, #8]
 8000992:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	f003 0307 	and.w	r3, r3, #7
 800099a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800099c:	69fb      	ldr	r3, [r7, #28]
 800099e:	f1c3 0307 	rsb	r3, r3, #7
 80009a2:	2b04      	cmp	r3, #4
 80009a4:	bf28      	it	cs
 80009a6:	2304      	movcs	r3, #4
 80009a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009aa:	69fb      	ldr	r3, [r7, #28]
 80009ac:	3304      	adds	r3, #4
 80009ae:	2b06      	cmp	r3, #6
 80009b0:	d902      	bls.n	80009b8 <NVIC_EncodePriority+0x30>
 80009b2:	69fb      	ldr	r3, [r7, #28]
 80009b4:	3b03      	subs	r3, #3
 80009b6:	e000      	b.n	80009ba <NVIC_EncodePriority+0x32>
 80009b8:	2300      	movs	r3, #0
 80009ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80009c0:	69bb      	ldr	r3, [r7, #24]
 80009c2:	fa02 f303 	lsl.w	r3, r2, r3
 80009c6:	43da      	mvns	r2, r3
 80009c8:	68bb      	ldr	r3, [r7, #8]
 80009ca:	401a      	ands	r2, r3
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009d0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	fa01 f303 	lsl.w	r3, r1, r3
 80009da:	43d9      	mvns	r1, r3
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009e0:	4313      	orrs	r3, r2
         );
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	3724      	adds	r7, #36	@ 0x24
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
	...

080009f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	3b01      	subs	r3, #1
 80009fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000a00:	d301      	bcc.n	8000a06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a02:	2301      	movs	r3, #1
 8000a04:	e00f      	b.n	8000a26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a06:	4a0a      	ldr	r2, [pc, #40]	@ (8000a30 <SysTick_Config+0x40>)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	3b01      	subs	r3, #1
 8000a0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a0e:	210f      	movs	r1, #15
 8000a10:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a14:	f7ff ff8e 	bl	8000934 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a18:	4b05      	ldr	r3, [pc, #20]	@ (8000a30 <SysTick_Config+0x40>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a1e:	4b04      	ldr	r3, [pc, #16]	@ (8000a30 <SysTick_Config+0x40>)
 8000a20:	2207      	movs	r2, #7
 8000a22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a24:	2300      	movs	r3, #0
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	e000e010 	.word	0xe000e010

08000a34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a3c:	6878      	ldr	r0, [r7, #4]
 8000a3e:	f7ff ff47 	bl	80008d0 <__NVIC_SetPriorityGrouping>
}
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	b086      	sub	sp, #24
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	4603      	mov	r3, r0
 8000a52:	60b9      	str	r1, [r7, #8]
 8000a54:	607a      	str	r2, [r7, #4]
 8000a56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a5c:	f7ff ff5c 	bl	8000918 <__NVIC_GetPriorityGrouping>
 8000a60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a62:	687a      	ldr	r2, [r7, #4]
 8000a64:	68b9      	ldr	r1, [r7, #8]
 8000a66:	6978      	ldr	r0, [r7, #20]
 8000a68:	f7ff ff8e 	bl	8000988 <NVIC_EncodePriority>
 8000a6c:	4602      	mov	r2, r0
 8000a6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a72:	4611      	mov	r1, r2
 8000a74:	4618      	mov	r0, r3
 8000a76:	f7ff ff5d 	bl	8000934 <__NVIC_SetPriority>
}
 8000a7a:	bf00      	nop
 8000a7c:	3718      	adds	r7, #24
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}

08000a82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a82:	b580      	push	{r7, lr}
 8000a84:	b082      	sub	sp, #8
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a8a:	6878      	ldr	r0, [r7, #4]
 8000a8c:	f7ff ffb0 	bl	80009f0 <SysTick_Config>
 8000a90:	4603      	mov	r3, r0
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
	...

08000a9c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8000aa6:	4b23      	ldr	r3, [pc, #140]	@ (8000b34 <HAL_PWREx_EnableOverDrive+0x98>)
 8000aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aaa:	4a22      	ldr	r2, [pc, #136]	@ (8000b34 <HAL_PWREx_EnableOverDrive+0x98>)
 8000aac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ab0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ab2:	4b20      	ldr	r3, [pc, #128]	@ (8000b34 <HAL_PWREx_EnableOverDrive+0x98>)
 8000ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ab6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aba:	603b      	str	r3, [r7, #0]
 8000abc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000abe:	4b1e      	ldr	r3, [pc, #120]	@ (8000b38 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4a1d      	ldr	r2, [pc, #116]	@ (8000b38 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000ac4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ac8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000aca:	f7ff fef5 	bl	80008b8 <HAL_GetTick>
 8000ace:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000ad0:	e009      	b.n	8000ae6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000ad2:	f7ff fef1 	bl	80008b8 <HAL_GetTick>
 8000ad6:	4602      	mov	r2, r0
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	1ad3      	subs	r3, r2, r3
 8000adc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000ae0:	d901      	bls.n	8000ae6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8000ae2:	2303      	movs	r3, #3
 8000ae4:	e022      	b.n	8000b2c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000ae6:	4b14      	ldr	r3, [pc, #80]	@ (8000b38 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000ae8:	685b      	ldr	r3, [r3, #4]
 8000aea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000aee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000af2:	d1ee      	bne.n	8000ad2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000af4:	4b10      	ldr	r3, [pc, #64]	@ (8000b38 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a0f      	ldr	r2, [pc, #60]	@ (8000b38 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000afa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000afe:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000b00:	f7ff feda 	bl	80008b8 <HAL_GetTick>
 8000b04:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000b06:	e009      	b.n	8000b1c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000b08:	f7ff fed6 	bl	80008b8 <HAL_GetTick>
 8000b0c:	4602      	mov	r2, r0
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	1ad3      	subs	r3, r2, r3
 8000b12:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000b16:	d901      	bls.n	8000b1c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8000b18:	2303      	movs	r3, #3
 8000b1a:	e007      	b.n	8000b2c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000b1c:	4b06      	ldr	r3, [pc, #24]	@ (8000b38 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000b1e:	685b      	ldr	r3, [r3, #4]
 8000b20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b24:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8000b28:	d1ee      	bne.n	8000b08 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8000b2a:	2300      	movs	r3, #0
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	3708      	adds	r7, #8
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	40023800 	.word	0x40023800
 8000b38:	40007000 	.word	0x40007000

08000b3c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b086      	sub	sp, #24
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8000b44:	2300      	movs	r3, #0
 8000b46:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d101      	bne.n	8000b52 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	e291      	b.n	8001076 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	f003 0301 	and.w	r3, r3, #1
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	f000 8087 	beq.w	8000c6e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b60:	4b96      	ldr	r3, [pc, #600]	@ (8000dbc <HAL_RCC_OscConfig+0x280>)
 8000b62:	689b      	ldr	r3, [r3, #8]
 8000b64:	f003 030c 	and.w	r3, r3, #12
 8000b68:	2b04      	cmp	r3, #4
 8000b6a:	d00c      	beq.n	8000b86 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b6c:	4b93      	ldr	r3, [pc, #588]	@ (8000dbc <HAL_RCC_OscConfig+0x280>)
 8000b6e:	689b      	ldr	r3, [r3, #8]
 8000b70:	f003 030c 	and.w	r3, r3, #12
 8000b74:	2b08      	cmp	r3, #8
 8000b76:	d112      	bne.n	8000b9e <HAL_RCC_OscConfig+0x62>
 8000b78:	4b90      	ldr	r3, [pc, #576]	@ (8000dbc <HAL_RCC_OscConfig+0x280>)
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000b80:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000b84:	d10b      	bne.n	8000b9e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b86:	4b8d      	ldr	r3, [pc, #564]	@ (8000dbc <HAL_RCC_OscConfig+0x280>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d06c      	beq.n	8000c6c <HAL_RCC_OscConfig+0x130>
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	685b      	ldr	r3, [r3, #4]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d168      	bne.n	8000c6c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	e26b      	b.n	8001076 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000ba6:	d106      	bne.n	8000bb6 <HAL_RCC_OscConfig+0x7a>
 8000ba8:	4b84      	ldr	r3, [pc, #528]	@ (8000dbc <HAL_RCC_OscConfig+0x280>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a83      	ldr	r2, [pc, #524]	@ (8000dbc <HAL_RCC_OscConfig+0x280>)
 8000bae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000bb2:	6013      	str	r3, [r2, #0]
 8000bb4:	e02e      	b.n	8000c14 <HAL_RCC_OscConfig+0xd8>
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	685b      	ldr	r3, [r3, #4]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d10c      	bne.n	8000bd8 <HAL_RCC_OscConfig+0x9c>
 8000bbe:	4b7f      	ldr	r3, [pc, #508]	@ (8000dbc <HAL_RCC_OscConfig+0x280>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4a7e      	ldr	r2, [pc, #504]	@ (8000dbc <HAL_RCC_OscConfig+0x280>)
 8000bc4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000bc8:	6013      	str	r3, [r2, #0]
 8000bca:	4b7c      	ldr	r3, [pc, #496]	@ (8000dbc <HAL_RCC_OscConfig+0x280>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4a7b      	ldr	r2, [pc, #492]	@ (8000dbc <HAL_RCC_OscConfig+0x280>)
 8000bd0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000bd4:	6013      	str	r3, [r2, #0]
 8000bd6:	e01d      	b.n	8000c14 <HAL_RCC_OscConfig+0xd8>
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000be0:	d10c      	bne.n	8000bfc <HAL_RCC_OscConfig+0xc0>
 8000be2:	4b76      	ldr	r3, [pc, #472]	@ (8000dbc <HAL_RCC_OscConfig+0x280>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4a75      	ldr	r2, [pc, #468]	@ (8000dbc <HAL_RCC_OscConfig+0x280>)
 8000be8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000bec:	6013      	str	r3, [r2, #0]
 8000bee:	4b73      	ldr	r3, [pc, #460]	@ (8000dbc <HAL_RCC_OscConfig+0x280>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	4a72      	ldr	r2, [pc, #456]	@ (8000dbc <HAL_RCC_OscConfig+0x280>)
 8000bf4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000bf8:	6013      	str	r3, [r2, #0]
 8000bfa:	e00b      	b.n	8000c14 <HAL_RCC_OscConfig+0xd8>
 8000bfc:	4b6f      	ldr	r3, [pc, #444]	@ (8000dbc <HAL_RCC_OscConfig+0x280>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a6e      	ldr	r2, [pc, #440]	@ (8000dbc <HAL_RCC_OscConfig+0x280>)
 8000c02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000c06:	6013      	str	r3, [r2, #0]
 8000c08:	4b6c      	ldr	r3, [pc, #432]	@ (8000dbc <HAL_RCC_OscConfig+0x280>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a6b      	ldr	r2, [pc, #428]	@ (8000dbc <HAL_RCC_OscConfig+0x280>)
 8000c0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000c12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d013      	beq.n	8000c44 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c1c:	f7ff fe4c 	bl	80008b8 <HAL_GetTick>
 8000c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c22:	e008      	b.n	8000c36 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c24:	f7ff fe48 	bl	80008b8 <HAL_GetTick>
 8000c28:	4602      	mov	r2, r0
 8000c2a:	693b      	ldr	r3, [r7, #16]
 8000c2c:	1ad3      	subs	r3, r2, r3
 8000c2e:	2b64      	cmp	r3, #100	@ 0x64
 8000c30:	d901      	bls.n	8000c36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000c32:	2303      	movs	r3, #3
 8000c34:	e21f      	b.n	8001076 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c36:	4b61      	ldr	r3, [pc, #388]	@ (8000dbc <HAL_RCC_OscConfig+0x280>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d0f0      	beq.n	8000c24 <HAL_RCC_OscConfig+0xe8>
 8000c42:	e014      	b.n	8000c6e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c44:	f7ff fe38 	bl	80008b8 <HAL_GetTick>
 8000c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c4a:	e008      	b.n	8000c5e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c4c:	f7ff fe34 	bl	80008b8 <HAL_GetTick>
 8000c50:	4602      	mov	r2, r0
 8000c52:	693b      	ldr	r3, [r7, #16]
 8000c54:	1ad3      	subs	r3, r2, r3
 8000c56:	2b64      	cmp	r3, #100	@ 0x64
 8000c58:	d901      	bls.n	8000c5e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8000c5a:	2303      	movs	r3, #3
 8000c5c:	e20b      	b.n	8001076 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c5e:	4b57      	ldr	r3, [pc, #348]	@ (8000dbc <HAL_RCC_OscConfig+0x280>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d1f0      	bne.n	8000c4c <HAL_RCC_OscConfig+0x110>
 8000c6a:	e000      	b.n	8000c6e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f003 0302 	and.w	r3, r3, #2
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d069      	beq.n	8000d4e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000c7a:	4b50      	ldr	r3, [pc, #320]	@ (8000dbc <HAL_RCC_OscConfig+0x280>)
 8000c7c:	689b      	ldr	r3, [r3, #8]
 8000c7e:	f003 030c 	and.w	r3, r3, #12
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d00b      	beq.n	8000c9e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c86:	4b4d      	ldr	r3, [pc, #308]	@ (8000dbc <HAL_RCC_OscConfig+0x280>)
 8000c88:	689b      	ldr	r3, [r3, #8]
 8000c8a:	f003 030c 	and.w	r3, r3, #12
 8000c8e:	2b08      	cmp	r3, #8
 8000c90:	d11c      	bne.n	8000ccc <HAL_RCC_OscConfig+0x190>
 8000c92:	4b4a      	ldr	r3, [pc, #296]	@ (8000dbc <HAL_RCC_OscConfig+0x280>)
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d116      	bne.n	8000ccc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c9e:	4b47      	ldr	r3, [pc, #284]	@ (8000dbc <HAL_RCC_OscConfig+0x280>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f003 0302 	and.w	r3, r3, #2
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d005      	beq.n	8000cb6 <HAL_RCC_OscConfig+0x17a>
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	68db      	ldr	r3, [r3, #12]
 8000cae:	2b01      	cmp	r3, #1
 8000cb0:	d001      	beq.n	8000cb6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	e1df      	b.n	8001076 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cb6:	4b41      	ldr	r3, [pc, #260]	@ (8000dbc <HAL_RCC_OscConfig+0x280>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	691b      	ldr	r3, [r3, #16]
 8000cc2:	00db      	lsls	r3, r3, #3
 8000cc4:	493d      	ldr	r1, [pc, #244]	@ (8000dbc <HAL_RCC_OscConfig+0x280>)
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cca:	e040      	b.n	8000d4e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	68db      	ldr	r3, [r3, #12]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d023      	beq.n	8000d1c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000cd4:	4b39      	ldr	r3, [pc, #228]	@ (8000dbc <HAL_RCC_OscConfig+0x280>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a38      	ldr	r2, [pc, #224]	@ (8000dbc <HAL_RCC_OscConfig+0x280>)
 8000cda:	f043 0301 	orr.w	r3, r3, #1
 8000cde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ce0:	f7ff fdea 	bl	80008b8 <HAL_GetTick>
 8000ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ce6:	e008      	b.n	8000cfa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ce8:	f7ff fde6 	bl	80008b8 <HAL_GetTick>
 8000cec:	4602      	mov	r2, r0
 8000cee:	693b      	ldr	r3, [r7, #16]
 8000cf0:	1ad3      	subs	r3, r2, r3
 8000cf2:	2b02      	cmp	r3, #2
 8000cf4:	d901      	bls.n	8000cfa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8000cf6:	2303      	movs	r3, #3
 8000cf8:	e1bd      	b.n	8001076 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cfa:	4b30      	ldr	r3, [pc, #192]	@ (8000dbc <HAL_RCC_OscConfig+0x280>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f003 0302 	and.w	r3, r3, #2
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d0f0      	beq.n	8000ce8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d06:	4b2d      	ldr	r3, [pc, #180]	@ (8000dbc <HAL_RCC_OscConfig+0x280>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	691b      	ldr	r3, [r3, #16]
 8000d12:	00db      	lsls	r3, r3, #3
 8000d14:	4929      	ldr	r1, [pc, #164]	@ (8000dbc <HAL_RCC_OscConfig+0x280>)
 8000d16:	4313      	orrs	r3, r2
 8000d18:	600b      	str	r3, [r1, #0]
 8000d1a:	e018      	b.n	8000d4e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d1c:	4b27      	ldr	r3, [pc, #156]	@ (8000dbc <HAL_RCC_OscConfig+0x280>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a26      	ldr	r2, [pc, #152]	@ (8000dbc <HAL_RCC_OscConfig+0x280>)
 8000d22:	f023 0301 	bic.w	r3, r3, #1
 8000d26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d28:	f7ff fdc6 	bl	80008b8 <HAL_GetTick>
 8000d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d2e:	e008      	b.n	8000d42 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d30:	f7ff fdc2 	bl	80008b8 <HAL_GetTick>
 8000d34:	4602      	mov	r2, r0
 8000d36:	693b      	ldr	r3, [r7, #16]
 8000d38:	1ad3      	subs	r3, r2, r3
 8000d3a:	2b02      	cmp	r3, #2
 8000d3c:	d901      	bls.n	8000d42 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8000d3e:	2303      	movs	r3, #3
 8000d40:	e199      	b.n	8001076 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d42:	4b1e      	ldr	r3, [pc, #120]	@ (8000dbc <HAL_RCC_OscConfig+0x280>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f003 0302 	and.w	r3, r3, #2
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d1f0      	bne.n	8000d30 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f003 0308 	and.w	r3, r3, #8
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d038      	beq.n	8000dcc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	695b      	ldr	r3, [r3, #20]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d019      	beq.n	8000d96 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d62:	4b16      	ldr	r3, [pc, #88]	@ (8000dbc <HAL_RCC_OscConfig+0x280>)
 8000d64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000d66:	4a15      	ldr	r2, [pc, #84]	@ (8000dbc <HAL_RCC_OscConfig+0x280>)
 8000d68:	f043 0301 	orr.w	r3, r3, #1
 8000d6c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d6e:	f7ff fda3 	bl	80008b8 <HAL_GetTick>
 8000d72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d74:	e008      	b.n	8000d88 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d76:	f7ff fd9f 	bl	80008b8 <HAL_GetTick>
 8000d7a:	4602      	mov	r2, r0
 8000d7c:	693b      	ldr	r3, [r7, #16]
 8000d7e:	1ad3      	subs	r3, r2, r3
 8000d80:	2b02      	cmp	r3, #2
 8000d82:	d901      	bls.n	8000d88 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000d84:	2303      	movs	r3, #3
 8000d86:	e176      	b.n	8001076 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d88:	4b0c      	ldr	r3, [pc, #48]	@ (8000dbc <HAL_RCC_OscConfig+0x280>)
 8000d8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000d8c:	f003 0302 	and.w	r3, r3, #2
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d0f0      	beq.n	8000d76 <HAL_RCC_OscConfig+0x23a>
 8000d94:	e01a      	b.n	8000dcc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d96:	4b09      	ldr	r3, [pc, #36]	@ (8000dbc <HAL_RCC_OscConfig+0x280>)
 8000d98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000d9a:	4a08      	ldr	r2, [pc, #32]	@ (8000dbc <HAL_RCC_OscConfig+0x280>)
 8000d9c:	f023 0301 	bic.w	r3, r3, #1
 8000da0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000da2:	f7ff fd89 	bl	80008b8 <HAL_GetTick>
 8000da6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000da8:	e00a      	b.n	8000dc0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000daa:	f7ff fd85 	bl	80008b8 <HAL_GetTick>
 8000dae:	4602      	mov	r2, r0
 8000db0:	693b      	ldr	r3, [r7, #16]
 8000db2:	1ad3      	subs	r3, r2, r3
 8000db4:	2b02      	cmp	r3, #2
 8000db6:	d903      	bls.n	8000dc0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8000db8:	2303      	movs	r3, #3
 8000dba:	e15c      	b.n	8001076 <HAL_RCC_OscConfig+0x53a>
 8000dbc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dc0:	4b91      	ldr	r3, [pc, #580]	@ (8001008 <HAL_RCC_OscConfig+0x4cc>)
 8000dc2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8000dc4:	f003 0302 	and.w	r3, r3, #2
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d1ee      	bne.n	8000daa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f003 0304 	and.w	r3, r3, #4
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	f000 80a4 	beq.w	8000f22 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000dda:	4b8b      	ldr	r3, [pc, #556]	@ (8001008 <HAL_RCC_OscConfig+0x4cc>)
 8000ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d10d      	bne.n	8000e02 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8000de6:	4b88      	ldr	r3, [pc, #544]	@ (8001008 <HAL_RCC_OscConfig+0x4cc>)
 8000de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dea:	4a87      	ldr	r2, [pc, #540]	@ (8001008 <HAL_RCC_OscConfig+0x4cc>)
 8000dec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000df0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000df2:	4b85      	ldr	r3, [pc, #532]	@ (8001008 <HAL_RCC_OscConfig+0x4cc>)
 8000df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000df6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dfa:	60bb      	str	r3, [r7, #8]
 8000dfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000e02:	4b82      	ldr	r3, [pc, #520]	@ (800100c <HAL_RCC_OscConfig+0x4d0>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d118      	bne.n	8000e40 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8000e0e:	4b7f      	ldr	r3, [pc, #508]	@ (800100c <HAL_RCC_OscConfig+0x4d0>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a7e      	ldr	r2, [pc, #504]	@ (800100c <HAL_RCC_OscConfig+0x4d0>)
 8000e14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e1a:	f7ff fd4d 	bl	80008b8 <HAL_GetTick>
 8000e1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000e20:	e008      	b.n	8000e34 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e22:	f7ff fd49 	bl	80008b8 <HAL_GetTick>
 8000e26:	4602      	mov	r2, r0
 8000e28:	693b      	ldr	r3, [r7, #16]
 8000e2a:	1ad3      	subs	r3, r2, r3
 8000e2c:	2b64      	cmp	r3, #100	@ 0x64
 8000e2e:	d901      	bls.n	8000e34 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8000e30:	2303      	movs	r3, #3
 8000e32:	e120      	b.n	8001076 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000e34:	4b75      	ldr	r3, [pc, #468]	@ (800100c <HAL_RCC_OscConfig+0x4d0>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d0f0      	beq.n	8000e22 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	689b      	ldr	r3, [r3, #8]
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d106      	bne.n	8000e56 <HAL_RCC_OscConfig+0x31a>
 8000e48:	4b6f      	ldr	r3, [pc, #444]	@ (8001008 <HAL_RCC_OscConfig+0x4cc>)
 8000e4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000e4c:	4a6e      	ldr	r2, [pc, #440]	@ (8001008 <HAL_RCC_OscConfig+0x4cc>)
 8000e4e:	f043 0301 	orr.w	r3, r3, #1
 8000e52:	6713      	str	r3, [r2, #112]	@ 0x70
 8000e54:	e02d      	b.n	8000eb2 <HAL_RCC_OscConfig+0x376>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	689b      	ldr	r3, [r3, #8]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d10c      	bne.n	8000e78 <HAL_RCC_OscConfig+0x33c>
 8000e5e:	4b6a      	ldr	r3, [pc, #424]	@ (8001008 <HAL_RCC_OscConfig+0x4cc>)
 8000e60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000e62:	4a69      	ldr	r2, [pc, #420]	@ (8001008 <HAL_RCC_OscConfig+0x4cc>)
 8000e64:	f023 0301 	bic.w	r3, r3, #1
 8000e68:	6713      	str	r3, [r2, #112]	@ 0x70
 8000e6a:	4b67      	ldr	r3, [pc, #412]	@ (8001008 <HAL_RCC_OscConfig+0x4cc>)
 8000e6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000e6e:	4a66      	ldr	r2, [pc, #408]	@ (8001008 <HAL_RCC_OscConfig+0x4cc>)
 8000e70:	f023 0304 	bic.w	r3, r3, #4
 8000e74:	6713      	str	r3, [r2, #112]	@ 0x70
 8000e76:	e01c      	b.n	8000eb2 <HAL_RCC_OscConfig+0x376>
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	689b      	ldr	r3, [r3, #8]
 8000e7c:	2b05      	cmp	r3, #5
 8000e7e:	d10c      	bne.n	8000e9a <HAL_RCC_OscConfig+0x35e>
 8000e80:	4b61      	ldr	r3, [pc, #388]	@ (8001008 <HAL_RCC_OscConfig+0x4cc>)
 8000e82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000e84:	4a60      	ldr	r2, [pc, #384]	@ (8001008 <HAL_RCC_OscConfig+0x4cc>)
 8000e86:	f043 0304 	orr.w	r3, r3, #4
 8000e8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8000e8c:	4b5e      	ldr	r3, [pc, #376]	@ (8001008 <HAL_RCC_OscConfig+0x4cc>)
 8000e8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000e90:	4a5d      	ldr	r2, [pc, #372]	@ (8001008 <HAL_RCC_OscConfig+0x4cc>)
 8000e92:	f043 0301 	orr.w	r3, r3, #1
 8000e96:	6713      	str	r3, [r2, #112]	@ 0x70
 8000e98:	e00b      	b.n	8000eb2 <HAL_RCC_OscConfig+0x376>
 8000e9a:	4b5b      	ldr	r3, [pc, #364]	@ (8001008 <HAL_RCC_OscConfig+0x4cc>)
 8000e9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000e9e:	4a5a      	ldr	r2, [pc, #360]	@ (8001008 <HAL_RCC_OscConfig+0x4cc>)
 8000ea0:	f023 0301 	bic.w	r3, r3, #1
 8000ea4:	6713      	str	r3, [r2, #112]	@ 0x70
 8000ea6:	4b58      	ldr	r3, [pc, #352]	@ (8001008 <HAL_RCC_OscConfig+0x4cc>)
 8000ea8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000eaa:	4a57      	ldr	r2, [pc, #348]	@ (8001008 <HAL_RCC_OscConfig+0x4cc>)
 8000eac:	f023 0304 	bic.w	r3, r3, #4
 8000eb0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	689b      	ldr	r3, [r3, #8]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d015      	beq.n	8000ee6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000eba:	f7ff fcfd 	bl	80008b8 <HAL_GetTick>
 8000ebe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ec0:	e00a      	b.n	8000ed8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ec2:	f7ff fcf9 	bl	80008b8 <HAL_GetTick>
 8000ec6:	4602      	mov	r2, r0
 8000ec8:	693b      	ldr	r3, [r7, #16]
 8000eca:	1ad3      	subs	r3, r2, r3
 8000ecc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d901      	bls.n	8000ed8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	e0ce      	b.n	8001076 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ed8:	4b4b      	ldr	r3, [pc, #300]	@ (8001008 <HAL_RCC_OscConfig+0x4cc>)
 8000eda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000edc:	f003 0302 	and.w	r3, r3, #2
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d0ee      	beq.n	8000ec2 <HAL_RCC_OscConfig+0x386>
 8000ee4:	e014      	b.n	8000f10 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ee6:	f7ff fce7 	bl	80008b8 <HAL_GetTick>
 8000eea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000eec:	e00a      	b.n	8000f04 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000eee:	f7ff fce3 	bl	80008b8 <HAL_GetTick>
 8000ef2:	4602      	mov	r2, r0
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	1ad3      	subs	r3, r2, r3
 8000ef8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d901      	bls.n	8000f04 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8000f00:	2303      	movs	r3, #3
 8000f02:	e0b8      	b.n	8001076 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f04:	4b40      	ldr	r3, [pc, #256]	@ (8001008 <HAL_RCC_OscConfig+0x4cc>)
 8000f06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8000f08:	f003 0302 	and.w	r3, r3, #2
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d1ee      	bne.n	8000eee <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8000f10:	7dfb      	ldrb	r3, [r7, #23]
 8000f12:	2b01      	cmp	r3, #1
 8000f14:	d105      	bne.n	8000f22 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f16:	4b3c      	ldr	r3, [pc, #240]	@ (8001008 <HAL_RCC_OscConfig+0x4cc>)
 8000f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f1a:	4a3b      	ldr	r2, [pc, #236]	@ (8001008 <HAL_RCC_OscConfig+0x4cc>)
 8000f1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8000f20:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	699b      	ldr	r3, [r3, #24]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	f000 80a4 	beq.w	8001074 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f2c:	4b36      	ldr	r3, [pc, #216]	@ (8001008 <HAL_RCC_OscConfig+0x4cc>)
 8000f2e:	689b      	ldr	r3, [r3, #8]
 8000f30:	f003 030c 	and.w	r3, r3, #12
 8000f34:	2b08      	cmp	r3, #8
 8000f36:	d06b      	beq.n	8001010 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	699b      	ldr	r3, [r3, #24]
 8000f3c:	2b02      	cmp	r3, #2
 8000f3e:	d149      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f40:	4b31      	ldr	r3, [pc, #196]	@ (8001008 <HAL_RCC_OscConfig+0x4cc>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a30      	ldr	r2, [pc, #192]	@ (8001008 <HAL_RCC_OscConfig+0x4cc>)
 8000f46:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000f4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f4c:	f7ff fcb4 	bl	80008b8 <HAL_GetTick>
 8000f50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f52:	e008      	b.n	8000f66 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f54:	f7ff fcb0 	bl	80008b8 <HAL_GetTick>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	2b02      	cmp	r3, #2
 8000f60:	d901      	bls.n	8000f66 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8000f62:	2303      	movs	r3, #3
 8000f64:	e087      	b.n	8001076 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f66:	4b28      	ldr	r3, [pc, #160]	@ (8001008 <HAL_RCC_OscConfig+0x4cc>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d1f0      	bne.n	8000f54 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	69da      	ldr	r2, [r3, #28]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6a1b      	ldr	r3, [r3, #32]
 8000f7a:	431a      	orrs	r2, r3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f80:	019b      	lsls	r3, r3, #6
 8000f82:	431a      	orrs	r2, r3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f88:	085b      	lsrs	r3, r3, #1
 8000f8a:	3b01      	subs	r3, #1
 8000f8c:	041b      	lsls	r3, r3, #16
 8000f8e:	431a      	orrs	r2, r3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f94:	061b      	lsls	r3, r3, #24
 8000f96:	4313      	orrs	r3, r2
 8000f98:	4a1b      	ldr	r2, [pc, #108]	@ (8001008 <HAL_RCC_OscConfig+0x4cc>)
 8000f9a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000f9e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000fa0:	4b19      	ldr	r3, [pc, #100]	@ (8001008 <HAL_RCC_OscConfig+0x4cc>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a18      	ldr	r2, [pc, #96]	@ (8001008 <HAL_RCC_OscConfig+0x4cc>)
 8000fa6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000faa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fac:	f7ff fc84 	bl	80008b8 <HAL_GetTick>
 8000fb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fb2:	e008      	b.n	8000fc6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fb4:	f7ff fc80 	bl	80008b8 <HAL_GetTick>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	2b02      	cmp	r3, #2
 8000fc0:	d901      	bls.n	8000fc6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	e057      	b.n	8001076 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fc6:	4b10      	ldr	r3, [pc, #64]	@ (8001008 <HAL_RCC_OscConfig+0x4cc>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d0f0      	beq.n	8000fb4 <HAL_RCC_OscConfig+0x478>
 8000fd2:	e04f      	b.n	8001074 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fd4:	4b0c      	ldr	r3, [pc, #48]	@ (8001008 <HAL_RCC_OscConfig+0x4cc>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a0b      	ldr	r2, [pc, #44]	@ (8001008 <HAL_RCC_OscConfig+0x4cc>)
 8000fda:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000fde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fe0:	f7ff fc6a 	bl	80008b8 <HAL_GetTick>
 8000fe4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fe6:	e008      	b.n	8000ffa <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fe8:	f7ff fc66 	bl	80008b8 <HAL_GetTick>
 8000fec:	4602      	mov	r2, r0
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	2b02      	cmp	r3, #2
 8000ff4:	d901      	bls.n	8000ffa <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	e03d      	b.n	8001076 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ffa:	4b03      	ldr	r3, [pc, #12]	@ (8001008 <HAL_RCC_OscConfig+0x4cc>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001002:	2b00      	cmp	r3, #0
 8001004:	d1f0      	bne.n	8000fe8 <HAL_RCC_OscConfig+0x4ac>
 8001006:	e035      	b.n	8001074 <HAL_RCC_OscConfig+0x538>
 8001008:	40023800 	.word	0x40023800
 800100c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001010:	4b1b      	ldr	r3, [pc, #108]	@ (8001080 <HAL_RCC_OscConfig+0x544>)
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	699b      	ldr	r3, [r3, #24]
 800101a:	2b01      	cmp	r3, #1
 800101c:	d028      	beq.n	8001070 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001028:	429a      	cmp	r2, r3
 800102a:	d121      	bne.n	8001070 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001036:	429a      	cmp	r2, r3
 8001038:	d11a      	bne.n	8001070 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800103a:	68fa      	ldr	r2, [r7, #12]
 800103c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001040:	4013      	ands	r3, r2
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001046:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001048:	4293      	cmp	r3, r2
 800104a:	d111      	bne.n	8001070 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001056:	085b      	lsrs	r3, r3, #1
 8001058:	3b01      	subs	r3, #1
 800105a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800105c:	429a      	cmp	r2, r3
 800105e:	d107      	bne.n	8001070 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800106a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800106c:	429a      	cmp	r2, r3
 800106e:	d001      	beq.n	8001074 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001070:	2301      	movs	r3, #1
 8001072:	e000      	b.n	8001076 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001074:	2300      	movs	r3, #0
}
 8001076:	4618      	mov	r0, r3
 8001078:	3718      	adds	r7, #24
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40023800 	.word	0x40023800

08001084 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800108e:	2300      	movs	r3, #0
 8001090:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d101      	bne.n	800109c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001098:	2301      	movs	r3, #1
 800109a:	e0d0      	b.n	800123e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800109c:	4b6a      	ldr	r3, [pc, #424]	@ (8001248 <HAL_RCC_ClockConfig+0x1c4>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f003 030f 	and.w	r3, r3, #15
 80010a4:	683a      	ldr	r2, [r7, #0]
 80010a6:	429a      	cmp	r2, r3
 80010a8:	d910      	bls.n	80010cc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010aa:	4b67      	ldr	r3, [pc, #412]	@ (8001248 <HAL_RCC_ClockConfig+0x1c4>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f023 020f 	bic.w	r2, r3, #15
 80010b2:	4965      	ldr	r1, [pc, #404]	@ (8001248 <HAL_RCC_ClockConfig+0x1c4>)
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010ba:	4b63      	ldr	r3, [pc, #396]	@ (8001248 <HAL_RCC_ClockConfig+0x1c4>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f003 030f 	and.w	r3, r3, #15
 80010c2:	683a      	ldr	r2, [r7, #0]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	d001      	beq.n	80010cc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80010c8:	2301      	movs	r3, #1
 80010ca:	e0b8      	b.n	800123e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f003 0302 	and.w	r3, r3, #2
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d020      	beq.n	800111a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f003 0304 	and.w	r3, r3, #4
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d005      	beq.n	80010f0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010e4:	4b59      	ldr	r3, [pc, #356]	@ (800124c <HAL_RCC_ClockConfig+0x1c8>)
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	4a58      	ldr	r2, [pc, #352]	@ (800124c <HAL_RCC_ClockConfig+0x1c8>)
 80010ea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80010ee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f003 0308 	and.w	r3, r3, #8
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d005      	beq.n	8001108 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010fc:	4b53      	ldr	r3, [pc, #332]	@ (800124c <HAL_RCC_ClockConfig+0x1c8>)
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	4a52      	ldr	r2, [pc, #328]	@ (800124c <HAL_RCC_ClockConfig+0x1c8>)
 8001102:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001106:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001108:	4b50      	ldr	r3, [pc, #320]	@ (800124c <HAL_RCC_ClockConfig+0x1c8>)
 800110a:	689b      	ldr	r3, [r3, #8]
 800110c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	494d      	ldr	r1, [pc, #308]	@ (800124c <HAL_RCC_ClockConfig+0x1c8>)
 8001116:	4313      	orrs	r3, r2
 8001118:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f003 0301 	and.w	r3, r3, #1
 8001122:	2b00      	cmp	r3, #0
 8001124:	d040      	beq.n	80011a8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	2b01      	cmp	r3, #1
 800112c:	d107      	bne.n	800113e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800112e:	4b47      	ldr	r3, [pc, #284]	@ (800124c <HAL_RCC_ClockConfig+0x1c8>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001136:	2b00      	cmp	r3, #0
 8001138:	d115      	bne.n	8001166 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e07f      	b.n	800123e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	2b02      	cmp	r3, #2
 8001144:	d107      	bne.n	8001156 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001146:	4b41      	ldr	r3, [pc, #260]	@ (800124c <HAL_RCC_ClockConfig+0x1c8>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800114e:	2b00      	cmp	r3, #0
 8001150:	d109      	bne.n	8001166 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
 8001154:	e073      	b.n	800123e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001156:	4b3d      	ldr	r3, [pc, #244]	@ (800124c <HAL_RCC_ClockConfig+0x1c8>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f003 0302 	and.w	r3, r3, #2
 800115e:	2b00      	cmp	r3, #0
 8001160:	d101      	bne.n	8001166 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	e06b      	b.n	800123e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001166:	4b39      	ldr	r3, [pc, #228]	@ (800124c <HAL_RCC_ClockConfig+0x1c8>)
 8001168:	689b      	ldr	r3, [r3, #8]
 800116a:	f023 0203 	bic.w	r2, r3, #3
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	4936      	ldr	r1, [pc, #216]	@ (800124c <HAL_RCC_ClockConfig+0x1c8>)
 8001174:	4313      	orrs	r3, r2
 8001176:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001178:	f7ff fb9e 	bl	80008b8 <HAL_GetTick>
 800117c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800117e:	e00a      	b.n	8001196 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001180:	f7ff fb9a 	bl	80008b8 <HAL_GetTick>
 8001184:	4602      	mov	r2, r0
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800118e:	4293      	cmp	r3, r2
 8001190:	d901      	bls.n	8001196 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001192:	2303      	movs	r3, #3
 8001194:	e053      	b.n	800123e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001196:	4b2d      	ldr	r3, [pc, #180]	@ (800124c <HAL_RCC_ClockConfig+0x1c8>)
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	f003 020c 	and.w	r2, r3, #12
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d1eb      	bne.n	8001180 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80011a8:	4b27      	ldr	r3, [pc, #156]	@ (8001248 <HAL_RCC_ClockConfig+0x1c4>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f003 030f 	and.w	r3, r3, #15
 80011b0:	683a      	ldr	r2, [r7, #0]
 80011b2:	429a      	cmp	r2, r3
 80011b4:	d210      	bcs.n	80011d8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011b6:	4b24      	ldr	r3, [pc, #144]	@ (8001248 <HAL_RCC_ClockConfig+0x1c4>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f023 020f 	bic.w	r2, r3, #15
 80011be:	4922      	ldr	r1, [pc, #136]	@ (8001248 <HAL_RCC_ClockConfig+0x1c4>)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011c6:	4b20      	ldr	r3, [pc, #128]	@ (8001248 <HAL_RCC_ClockConfig+0x1c4>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f003 030f 	and.w	r3, r3, #15
 80011ce:	683a      	ldr	r2, [r7, #0]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d001      	beq.n	80011d8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80011d4:	2301      	movs	r3, #1
 80011d6:	e032      	b.n	800123e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f003 0304 	and.w	r3, r3, #4
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d008      	beq.n	80011f6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011e4:	4b19      	ldr	r3, [pc, #100]	@ (800124c <HAL_RCC_ClockConfig+0x1c8>)
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	4916      	ldr	r1, [pc, #88]	@ (800124c <HAL_RCC_ClockConfig+0x1c8>)
 80011f2:	4313      	orrs	r3, r2
 80011f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 0308 	and.w	r3, r3, #8
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d009      	beq.n	8001216 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001202:	4b12      	ldr	r3, [pc, #72]	@ (800124c <HAL_RCC_ClockConfig+0x1c8>)
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	691b      	ldr	r3, [r3, #16]
 800120e:	00db      	lsls	r3, r3, #3
 8001210:	490e      	ldr	r1, [pc, #56]	@ (800124c <HAL_RCC_ClockConfig+0x1c8>)
 8001212:	4313      	orrs	r3, r2
 8001214:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001216:	f000 f821 	bl	800125c <HAL_RCC_GetSysClockFreq>
 800121a:	4602      	mov	r2, r0
 800121c:	4b0b      	ldr	r3, [pc, #44]	@ (800124c <HAL_RCC_ClockConfig+0x1c8>)
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	091b      	lsrs	r3, r3, #4
 8001222:	f003 030f 	and.w	r3, r3, #15
 8001226:	490a      	ldr	r1, [pc, #40]	@ (8001250 <HAL_RCC_ClockConfig+0x1cc>)
 8001228:	5ccb      	ldrb	r3, [r1, r3]
 800122a:	fa22 f303 	lsr.w	r3, r2, r3
 800122e:	4a09      	ldr	r2, [pc, #36]	@ (8001254 <HAL_RCC_ClockConfig+0x1d0>)
 8001230:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001232:	4b09      	ldr	r3, [pc, #36]	@ (8001258 <HAL_RCC_ClockConfig+0x1d4>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff fafa 	bl	8000830 <HAL_InitTick>

  return HAL_OK;
 800123c:	2300      	movs	r3, #0
}
 800123e:	4618      	mov	r0, r3
 8001240:	3710      	adds	r7, #16
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40023c00 	.word	0x40023c00
 800124c:	40023800 	.word	0x40023800
 8001250:	08001458 	.word	0x08001458
 8001254:	20000000 	.word	0x20000000
 8001258:	20000004 	.word	0x20000004

0800125c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800125c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001260:	b090      	sub	sp, #64	@ 0x40
 8001262:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001264:	2300      	movs	r3, #0
 8001266:	637b      	str	r3, [r7, #52]	@ 0x34
 8001268:	2300      	movs	r3, #0
 800126a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800126c:	2300      	movs	r3, #0
 800126e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8001270:	2300      	movs	r3, #0
 8001272:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001274:	4b59      	ldr	r3, [pc, #356]	@ (80013dc <HAL_RCC_GetSysClockFreq+0x180>)
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	f003 030c 	and.w	r3, r3, #12
 800127c:	2b08      	cmp	r3, #8
 800127e:	d00d      	beq.n	800129c <HAL_RCC_GetSysClockFreq+0x40>
 8001280:	2b08      	cmp	r3, #8
 8001282:	f200 80a1 	bhi.w	80013c8 <HAL_RCC_GetSysClockFreq+0x16c>
 8001286:	2b00      	cmp	r3, #0
 8001288:	d002      	beq.n	8001290 <HAL_RCC_GetSysClockFreq+0x34>
 800128a:	2b04      	cmp	r3, #4
 800128c:	d003      	beq.n	8001296 <HAL_RCC_GetSysClockFreq+0x3a>
 800128e:	e09b      	b.n	80013c8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001290:	4b53      	ldr	r3, [pc, #332]	@ (80013e0 <HAL_RCC_GetSysClockFreq+0x184>)
 8001292:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001294:	e09b      	b.n	80013ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001296:	4b53      	ldr	r3, [pc, #332]	@ (80013e4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001298:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800129a:	e098      	b.n	80013ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800129c:	4b4f      	ldr	r3, [pc, #316]	@ (80013dc <HAL_RCC_GetSysClockFreq+0x180>)
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80012a4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80012a6:	4b4d      	ldr	r3, [pc, #308]	@ (80013dc <HAL_RCC_GetSysClockFreq+0x180>)
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d028      	beq.n	8001304 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012b2:	4b4a      	ldr	r3, [pc, #296]	@ (80013dc <HAL_RCC_GetSysClockFreq+0x180>)
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	099b      	lsrs	r3, r3, #6
 80012b8:	2200      	movs	r2, #0
 80012ba:	623b      	str	r3, [r7, #32]
 80012bc:	627a      	str	r2, [r7, #36]	@ 0x24
 80012be:	6a3b      	ldr	r3, [r7, #32]
 80012c0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80012c4:	2100      	movs	r1, #0
 80012c6:	4b47      	ldr	r3, [pc, #284]	@ (80013e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80012c8:	fb03 f201 	mul.w	r2, r3, r1
 80012cc:	2300      	movs	r3, #0
 80012ce:	fb00 f303 	mul.w	r3, r0, r3
 80012d2:	4413      	add	r3, r2
 80012d4:	4a43      	ldr	r2, [pc, #268]	@ (80013e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80012d6:	fba0 1202 	umull	r1, r2, r0, r2
 80012da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80012dc:	460a      	mov	r2, r1
 80012de:	62ba      	str	r2, [r7, #40]	@ 0x28
 80012e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80012e2:	4413      	add	r3, r2
 80012e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80012e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012e8:	2200      	movs	r2, #0
 80012ea:	61bb      	str	r3, [r7, #24]
 80012ec:	61fa      	str	r2, [r7, #28]
 80012ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80012f2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80012f6:	f7fe ff87 	bl	8000208 <__aeabi_uldivmod>
 80012fa:	4602      	mov	r2, r0
 80012fc:	460b      	mov	r3, r1
 80012fe:	4613      	mov	r3, r2
 8001300:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001302:	e053      	b.n	80013ac <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001304:	4b35      	ldr	r3, [pc, #212]	@ (80013dc <HAL_RCC_GetSysClockFreq+0x180>)
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	099b      	lsrs	r3, r3, #6
 800130a:	2200      	movs	r2, #0
 800130c:	613b      	str	r3, [r7, #16]
 800130e:	617a      	str	r2, [r7, #20]
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001316:	f04f 0b00 	mov.w	fp, #0
 800131a:	4652      	mov	r2, sl
 800131c:	465b      	mov	r3, fp
 800131e:	f04f 0000 	mov.w	r0, #0
 8001322:	f04f 0100 	mov.w	r1, #0
 8001326:	0159      	lsls	r1, r3, #5
 8001328:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800132c:	0150      	lsls	r0, r2, #5
 800132e:	4602      	mov	r2, r0
 8001330:	460b      	mov	r3, r1
 8001332:	ebb2 080a 	subs.w	r8, r2, sl
 8001336:	eb63 090b 	sbc.w	r9, r3, fp
 800133a:	f04f 0200 	mov.w	r2, #0
 800133e:	f04f 0300 	mov.w	r3, #0
 8001342:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001346:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800134a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800134e:	ebb2 0408 	subs.w	r4, r2, r8
 8001352:	eb63 0509 	sbc.w	r5, r3, r9
 8001356:	f04f 0200 	mov.w	r2, #0
 800135a:	f04f 0300 	mov.w	r3, #0
 800135e:	00eb      	lsls	r3, r5, #3
 8001360:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001364:	00e2      	lsls	r2, r4, #3
 8001366:	4614      	mov	r4, r2
 8001368:	461d      	mov	r5, r3
 800136a:	eb14 030a 	adds.w	r3, r4, sl
 800136e:	603b      	str	r3, [r7, #0]
 8001370:	eb45 030b 	adc.w	r3, r5, fp
 8001374:	607b      	str	r3, [r7, #4]
 8001376:	f04f 0200 	mov.w	r2, #0
 800137a:	f04f 0300 	mov.w	r3, #0
 800137e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001382:	4629      	mov	r1, r5
 8001384:	028b      	lsls	r3, r1, #10
 8001386:	4621      	mov	r1, r4
 8001388:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800138c:	4621      	mov	r1, r4
 800138e:	028a      	lsls	r2, r1, #10
 8001390:	4610      	mov	r0, r2
 8001392:	4619      	mov	r1, r3
 8001394:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001396:	2200      	movs	r2, #0
 8001398:	60bb      	str	r3, [r7, #8]
 800139a:	60fa      	str	r2, [r7, #12]
 800139c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80013a0:	f7fe ff32 	bl	8000208 <__aeabi_uldivmod>
 80013a4:	4602      	mov	r2, r0
 80013a6:	460b      	mov	r3, r1
 80013a8:	4613      	mov	r3, r2
 80013aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80013ac:	4b0b      	ldr	r3, [pc, #44]	@ (80013dc <HAL_RCC_GetSysClockFreq+0x180>)
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	0c1b      	lsrs	r3, r3, #16
 80013b2:	f003 0303 	and.w	r3, r3, #3
 80013b6:	3301      	adds	r3, #1
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80013bc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80013be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80013c4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80013c6:	e002      	b.n	80013ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80013c8:	4b05      	ldr	r3, [pc, #20]	@ (80013e0 <HAL_RCC_GetSysClockFreq+0x184>)
 80013ca:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80013cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80013ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3740      	adds	r7, #64	@ 0x40
 80013d4:	46bd      	mov	sp, r7
 80013d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80013da:	bf00      	nop
 80013dc:	40023800 	.word	0x40023800
 80013e0:	00f42400 	.word	0x00f42400
 80013e4:	017d7840 	.word	0x017d7840

080013e8 <memset>:
 80013e8:	4402      	add	r2, r0
 80013ea:	4603      	mov	r3, r0
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d100      	bne.n	80013f2 <memset+0xa>
 80013f0:	4770      	bx	lr
 80013f2:	f803 1b01 	strb.w	r1, [r3], #1
 80013f6:	e7f9      	b.n	80013ec <memset+0x4>

080013f8 <__libc_init_array>:
 80013f8:	b570      	push	{r4, r5, r6, lr}
 80013fa:	4d0d      	ldr	r5, [pc, #52]	@ (8001430 <__libc_init_array+0x38>)
 80013fc:	4c0d      	ldr	r4, [pc, #52]	@ (8001434 <__libc_init_array+0x3c>)
 80013fe:	1b64      	subs	r4, r4, r5
 8001400:	10a4      	asrs	r4, r4, #2
 8001402:	2600      	movs	r6, #0
 8001404:	42a6      	cmp	r6, r4
 8001406:	d109      	bne.n	800141c <__libc_init_array+0x24>
 8001408:	4d0b      	ldr	r5, [pc, #44]	@ (8001438 <__libc_init_array+0x40>)
 800140a:	4c0c      	ldr	r4, [pc, #48]	@ (800143c <__libc_init_array+0x44>)
 800140c:	f000 f818 	bl	8001440 <_init>
 8001410:	1b64      	subs	r4, r4, r5
 8001412:	10a4      	asrs	r4, r4, #2
 8001414:	2600      	movs	r6, #0
 8001416:	42a6      	cmp	r6, r4
 8001418:	d105      	bne.n	8001426 <__libc_init_array+0x2e>
 800141a:	bd70      	pop	{r4, r5, r6, pc}
 800141c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001420:	4798      	blx	r3
 8001422:	3601      	adds	r6, #1
 8001424:	e7ee      	b.n	8001404 <__libc_init_array+0xc>
 8001426:	f855 3b04 	ldr.w	r3, [r5], #4
 800142a:	4798      	blx	r3
 800142c:	3601      	adds	r6, #1
 800142e:	e7f2      	b.n	8001416 <__libc_init_array+0x1e>
 8001430:	08001470 	.word	0x08001470
 8001434:	08001470 	.word	0x08001470
 8001438:	08001470 	.word	0x08001470
 800143c:	08001474 	.word	0x08001474

08001440 <_init>:
 8001440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001442:	bf00      	nop
 8001444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001446:	bc08      	pop	{r3}
 8001448:	469e      	mov	lr, r3
 800144a:	4770      	bx	lr

0800144c <_fini>:
 800144c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800144e:	bf00      	nop
 8001450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001452:	bc08      	pop	{r3}
 8001454:	469e      	mov	lr, r3
 8001456:	4770      	bx	lr
