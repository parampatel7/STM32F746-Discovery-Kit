
timer_1ms_baremetal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000037c  080001c8  080001c8  000011c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000544  08000544  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000544  08000544  00002004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000544  08000544  00002004  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000544  08000544  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000544  08000544  00001544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000548  08000548  00001548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  0800054c  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000550  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000550  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001718  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000004d2  00000000  00000000  0000374c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001e8  00000000  00000000  00003c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000157  00000000  00000000  00003e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022eaa  00000000  00000000  00003f5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001f7c  00000000  00000000  00026e09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dbf98  00000000  00000000  00028d85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00104d1d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000005cc  00000000  00000000  00104d60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0010532c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000004 	.word	0x20000004
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800052c 	.word	0x0800052c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000008 	.word	0x20000008
 8000204:	0800052c 	.word	0x0800052c

08000208 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b082      	sub	sp, #8
 800020c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/
SystemClock_Config();
 800020e:	f000 f881 	bl	8000314 <SystemClock_Config>
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 gpio_init();
 8000212:	f000 f84f 	bl	80002b4 <gpio_init>
 TIM6_INIT();
 8000216:	f000 f823 	bl	8000260 <TIM6_INIT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  GPIOD->ODR ^= (1 <<5);
 800021a:	4b0f      	ldr	r3, [pc, #60]	@ (8000258 <main+0x50>)
 800021c:	695b      	ldr	r3, [r3, #20]
 800021e:	4a0e      	ldr	r2, [pc, #56]	@ (8000258 <main+0x50>)
 8000220:	f083 0320 	eor.w	r3, r3, #32
 8000224:	6153      	str	r3, [r2, #20]
	  	for(uint32_t i=0; i<5000U ; i++)
 8000226:	2300      	movs	r3, #0
 8000228:	607b      	str	r3, [r7, #4]
 800022a:	e00f      	b.n	800024c <main+0x44>
	  	{
	  		while((TIM6->SR & TIM_SR_UIF) == 0);
 800022c:	bf00      	nop
 800022e:	4b0b      	ldr	r3, [pc, #44]	@ (800025c <main+0x54>)
 8000230:	691b      	ldr	r3, [r3, #16]
 8000232:	f003 0301 	and.w	r3, r3, #1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d0f9      	beq.n	800022e <main+0x26>
	  		TIM6->SR &= ~TIM_SR_UIF; //CLEAR UPDATE FLAG
 800023a:	4b08      	ldr	r3, [pc, #32]	@ (800025c <main+0x54>)
 800023c:	691b      	ldr	r3, [r3, #16]
 800023e:	4a07      	ldr	r2, [pc, #28]	@ (800025c <main+0x54>)
 8000240:	f023 0301 	bic.w	r3, r3, #1
 8000244:	6113      	str	r3, [r2, #16]
	  	for(uint32_t i=0; i<5000U ; i++)
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	3301      	adds	r3, #1
 800024a:	607b      	str	r3, [r7, #4]
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000252:	4293      	cmp	r3, r2
 8000254:	d9ea      	bls.n	800022c <main+0x24>
	  GPIOD->ODR ^= (1 <<5);
 8000256:	e7e0      	b.n	800021a <main+0x12>
 8000258:	40020c00 	.word	0x40020c00
 800025c:	40001000 	.word	0x40001000

08000260 <TIM6_INIT>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void TIM6_INIT()
{
 8000260:	b480      	push	{r7}
 8000262:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_TIM6EN; //ENABLES TIMER6 CLOCK
 8000264:	4b11      	ldr	r3, [pc, #68]	@ (80002ac <TIM6_INIT+0x4c>)
 8000266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000268:	4a10      	ldr	r2, [pc, #64]	@ (80002ac <TIM6_INIT+0x4c>)
 800026a:	f043 0310 	orr.w	r3, r3, #16
 800026e:	6413      	str	r3, [r2, #64]	@ 0x40
	//SET PRESCALER AND AUTORELOAD FOR 1MS
	//ASSUMING APB1 TIMER CLOCK = 108MHZ (FROM 216MHZ SYSTEM CLOCK)
	//TO GET 1MS TICK: (PSC + 1) * (ARR + 1) = 108000
	// PSC=10799, ARR=9

	TIM6->PSC= 10799U;  //PRESCALER  108000
 8000270:	4b0f      	ldr	r3, [pc, #60]	@ (80002b0 <TIM6_INIT+0x50>)
 8000272:	f642 222f 	movw	r2, #10799	@ 0x2a2f
 8000276:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM6->ARR = 9U;     //AUTORELOAD
 8000278:	4b0d      	ldr	r3, [pc, #52]	@ (80002b0 <TIM6_INIT+0x50>)
 800027a:	2209      	movs	r2, #9
 800027c:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM6->EGR = TIM_EGR_UG; // force update to load PSC/ARR
 800027e:	4b0c      	ldr	r3, [pc, #48]	@ (80002b0 <TIM6_INIT+0x50>)
 8000280:	2201      	movs	r2, #1
 8000282:	615a      	str	r2, [r3, #20]
	TIM6->SR = 0;           // clear flags
 8000284:	4b0a      	ldr	r3, [pc, #40]	@ (80002b0 <TIM6_INIT+0x50>)
 8000286:	2200      	movs	r2, #0
 8000288:	611a      	str	r2, [r3, #16]
	TIM6->CR1 |= TIM_CR1_ARPE; // optional preload
 800028a:	4b09      	ldr	r3, [pc, #36]	@ (80002b0 <TIM6_INIT+0x50>)
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	4a08      	ldr	r2, [pc, #32]	@ (80002b0 <TIM6_INIT+0x50>)
 8000290:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000294:	6013      	str	r3, [r2, #0]
	TIM6->CR1 |= TIM_CR1_CEN;		//ENABLE COUNTER
 8000296:	4b06      	ldr	r3, [pc, #24]	@ (80002b0 <TIM6_INIT+0x50>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	4a05      	ldr	r2, [pc, #20]	@ (80002b0 <TIM6_INIT+0x50>)
 800029c:	f043 0301 	orr.w	r3, r3, #1
 80002a0:	6013      	str	r3, [r2, #0]

}
 80002a2:	bf00      	nop
 80002a4:	46bd      	mov	sp, r7
 80002a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002aa:	4770      	bx	lr
 80002ac:	40023800 	.word	0x40023800
 80002b0:	40001000 	.word	0x40001000

080002b4 <gpio_init>:
void gpio_init()
{
 80002b4:	b480      	push	{r7}
 80002b6:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 80002b8:	4b14      	ldr	r3, [pc, #80]	@ (800030c <gpio_init+0x58>)
 80002ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002bc:	4a13      	ldr	r2, [pc, #76]	@ (800030c <gpio_init+0x58>)
 80002be:	f043 0308 	orr.w	r3, r3, #8
 80002c2:	6313      	str	r3, [r2, #48]	@ 0x30
		GPIOD->MODER &= ~(3U << 10);
 80002c4:	4b12      	ldr	r3, [pc, #72]	@ (8000310 <gpio_init+0x5c>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4a11      	ldr	r2, [pc, #68]	@ (8000310 <gpio_init+0x5c>)
 80002ca:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80002ce:	6013      	str	r3, [r2, #0]
		GPIOD->MODER |= (1U << 10);
 80002d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000310 <gpio_init+0x5c>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	4a0e      	ldr	r2, [pc, #56]	@ (8000310 <gpio_init+0x5c>)
 80002d6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80002da:	6013      	str	r3, [r2, #0]

		GPIOD->OSPEEDR &= ~(3U << 10);
 80002dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000310 <gpio_init+0x5c>)
 80002de:	689b      	ldr	r3, [r3, #8]
 80002e0:	4a0b      	ldr	r2, [pc, #44]	@ (8000310 <gpio_init+0x5c>)
 80002e2:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80002e6:	6093      	str	r3, [r2, #8]
		GPIOD->OSPEEDR |= (1U << 10);
 80002e8:	4b09      	ldr	r3, [pc, #36]	@ (8000310 <gpio_init+0x5c>)
 80002ea:	689b      	ldr	r3, [r3, #8]
 80002ec:	4a08      	ldr	r2, [pc, #32]	@ (8000310 <gpio_init+0x5c>)
 80002ee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80002f2:	6093      	str	r3, [r2, #8]
		GPIOD->PUPDR |= (1U << 22);
 80002f4:	4b06      	ldr	r3, [pc, #24]	@ (8000310 <gpio_init+0x5c>)
 80002f6:	68db      	ldr	r3, [r3, #12]
 80002f8:	4a05      	ldr	r2, [pc, #20]	@ (8000310 <gpio_init+0x5c>)
 80002fa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80002fe:	60d3      	str	r3, [r2, #12]

}
 8000300:	bf00      	nop
 8000302:	46bd      	mov	sp, r7
 8000304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000308:	4770      	bx	lr
 800030a:	bf00      	nop
 800030c:	40023800 	.word	0x40023800
 8000310:	40020c00 	.word	0x40020c00

08000314 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8000314:	b480      	push	{r7}
 8000316:	af00      	add	r7, sp, #0
	RCC->CR |= RCC_CR_HSEON ;
 8000318:	4b2e      	ldr	r3, [pc, #184]	@ (80003d4 <SystemClock_Config+0xc0>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	4a2d      	ldr	r2, [pc, #180]	@ (80003d4 <SystemClock_Config+0xc0>)
 800031e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000322:	6013      	str	r3, [r2, #0]
		  while(!(RCC->CR & RCC_CR_HSERDY));
 8000324:	bf00      	nop
 8000326:	4b2b      	ldr	r3, [pc, #172]	@ (80003d4 <SystemClock_Config+0xc0>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800032e:	2b00      	cmp	r3, #0
 8000330:	d0f9      	beq.n	8000326 <SystemClock_Config+0x12>

		  RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000332:	4b28      	ldr	r3, [pc, #160]	@ (80003d4 <SystemClock_Config+0xc0>)
 8000334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000336:	4a27      	ldr	r2, [pc, #156]	@ (80003d4 <SystemClock_Config+0xc0>)
 8000338:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800033c:	6413      	str	r3, [r2, #64]	@ 0x40
		  PWR-> CR1 |= PWR_CR1_ODEN;
 800033e:	4b26      	ldr	r3, [pc, #152]	@ (80003d8 <SystemClock_Config+0xc4>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	4a25      	ldr	r2, [pc, #148]	@ (80003d8 <SystemClock_Config+0xc4>)
 8000344:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000348:	6013      	str	r3, [r2, #0]
		  while(!(PWR->CSR1 & PWR_CSR1_ODRDY));
 800034a:	bf00      	nop
 800034c:	4b22      	ldr	r3, [pc, #136]	@ (80003d8 <SystemClock_Config+0xc4>)
 800034e:	685b      	ldr	r3, [r3, #4]
 8000350:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000354:	2b00      	cmp	r3, #0
 8000356:	d0f9      	beq.n	800034c <SystemClock_Config+0x38>

		  PWR->CR1 |= PWR_CR1_ODSWEN;
 8000358:	4b1f      	ldr	r3, [pc, #124]	@ (80003d8 <SystemClock_Config+0xc4>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	4a1e      	ldr	r2, [pc, #120]	@ (80003d8 <SystemClock_Config+0xc4>)
 800035e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000362:	6013      	str	r3, [r2, #0]
		  while(!(PWR->CSR1 & PWR_CSR1_ODSWRDY));
 8000364:	bf00      	nop
 8000366:	4b1c      	ldr	r3, [pc, #112]	@ (80003d8 <SystemClock_Config+0xc4>)
 8000368:	685b      	ldr	r3, [r3, #4]
 800036a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800036e:	2b00      	cmp	r3, #0
 8000370:	d0f9      	beq.n	8000366 <SystemClock_Config+0x52>

		  FLASH->ACR = FLASH_ACR_LATENCY_7WS | FLASH_ACR_PRFTEN | FLASH_ACR_ARTEN;
 8000372:	4b1a      	ldr	r3, [pc, #104]	@ (80003dc <SystemClock_Config+0xc8>)
 8000374:	f240 3207 	movw	r2, #775	@ 0x307
 8000378:	601a      	str	r2, [r3, #0]
//HSE=25MHz SYSCLK WE NEED 216MHz
		  RCC->PLLCFGR = (25 << RCC_PLLCFGR_PLLM_Pos) |
 800037a:	4b16      	ldr	r3, [pc, #88]	@ (80003d4 <SystemClock_Config+0xc0>)
 800037c:	4a18      	ldr	r2, [pc, #96]	@ (80003e0 <SystemClock_Config+0xcc>)
 800037e:	605a      	str	r2, [r3, #4]
        PLLP = 8 → 11 (3)
 * */
				                     (RCC_PLLCFGR_PLLSRC_HSE)      |
				                     (9 << RCC_PLLCFGR_PLLQ_Pos);    // PLLQ = 9

		  RCC-> CR |= RCC_CR_PLLON;
 8000380:	4b14      	ldr	r3, [pc, #80]	@ (80003d4 <SystemClock_Config+0xc0>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	4a13      	ldr	r2, [pc, #76]	@ (80003d4 <SystemClock_Config+0xc0>)
 8000386:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800038a:	6013      	str	r3, [r2, #0]
		  while(!(RCC->CR & RCC_CR_PLLRDY));
 800038c:	bf00      	nop
 800038e:	4b11      	ldr	r3, [pc, #68]	@ (80003d4 <SystemClock_Config+0xc0>)
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000396:	2b00      	cmp	r3, #0
 8000398:	d0f9      	beq.n	800038e <SystemClock_Config+0x7a>

		  RCC->CFGR = RCC_CFGR_HPRE_DIV1 | RCC_CFGR_PPRE1_DIV4 | RCC_CFGR_PPRE2_DIV2;
 800039a:	4b0e      	ldr	r3, [pc, #56]	@ (80003d4 <SystemClock_Config+0xc0>)
 800039c:	f44f 4214 	mov.w	r2, #37888	@ 0x9400
 80003a0:	609a      	str	r2, [r3, #8]

		  RCC->CFGR &= ~RCC_CFGR_SW;
 80003a2:	4b0c      	ldr	r3, [pc, #48]	@ (80003d4 <SystemClock_Config+0xc0>)
 80003a4:	689b      	ldr	r3, [r3, #8]
 80003a6:	4a0b      	ldr	r2, [pc, #44]	@ (80003d4 <SystemClock_Config+0xc0>)
 80003a8:	f023 0303 	bic.w	r3, r3, #3
 80003ac:	6093      	str	r3, [r2, #8]
		  RCC->CFGR |= RCC_CFGR_SW_PLL;
 80003ae:	4b09      	ldr	r3, [pc, #36]	@ (80003d4 <SystemClock_Config+0xc0>)
 80003b0:	689b      	ldr	r3, [r3, #8]
 80003b2:	4a08      	ldr	r2, [pc, #32]	@ (80003d4 <SystemClock_Config+0xc0>)
 80003b4:	f043 0302 	orr.w	r3, r3, #2
 80003b8:	6093      	str	r3, [r2, #8]
		  while((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 80003ba:	bf00      	nop
 80003bc:	4b05      	ldr	r3, [pc, #20]	@ (80003d4 <SystemClock_Config+0xc0>)
 80003be:	689b      	ldr	r3, [r3, #8]
 80003c0:	f003 030c 	and.w	r3, r3, #12
 80003c4:	2b08      	cmp	r3, #8
 80003c6:	d1f9      	bne.n	80003bc <SystemClock_Config+0xa8>
}
 80003c8:	bf00      	nop
 80003ca:	bf00      	nop
 80003cc:	46bd      	mov	sp, r7
 80003ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d2:	4770      	bx	lr
 80003d4:	40023800 	.word	0x40023800
 80003d8:	40007000 	.word	0x40007000
 80003dc:	40023c00 	.word	0x40023c00
 80003e0:	09406c19 	.word	0x09406c19

080003e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80003e8:	bf00      	nop
 80003ea:	e7fd      	b.n	80003e8 <NMI_Handler+0x4>

080003ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003f0:	bf00      	nop
 80003f2:	e7fd      	b.n	80003f0 <HardFault_Handler+0x4>

080003f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003f8:	bf00      	nop
 80003fa:	e7fd      	b.n	80003f8 <MemManage_Handler+0x4>

080003fc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003fc:	b480      	push	{r7}
 80003fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000400:	bf00      	nop
 8000402:	e7fd      	b.n	8000400 <BusFault_Handler+0x4>

08000404 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000404:	b480      	push	{r7}
 8000406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000408:	bf00      	nop
 800040a:	e7fd      	b.n	8000408 <UsageFault_Handler+0x4>

0800040c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000410:	bf00      	nop
 8000412:	46bd      	mov	sp, r7
 8000414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000418:	4770      	bx	lr

0800041a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800041a:	b480      	push	{r7}
 800041c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800041e:	bf00      	nop
 8000420:	46bd      	mov	sp, r7
 8000422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000426:	4770      	bx	lr

08000428 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800042c:	bf00      	nop
 800042e:	46bd      	mov	sp, r7
 8000430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000434:	4770      	bx	lr

08000436 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000436:	b580      	push	{r7, lr}
 8000438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800043a:	f000 f83f 	bl	80004bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800043e:	bf00      	nop
 8000440:	bd80      	pop	{r7, pc}
	...

08000444 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000444:	b480      	push	{r7}
 8000446:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000448:	4b06      	ldr	r3, [pc, #24]	@ (8000464 <SystemInit+0x20>)
 800044a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800044e:	4a05      	ldr	r2, [pc, #20]	@ (8000464 <SystemInit+0x20>)
 8000450:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000454:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000458:	bf00      	nop
 800045a:	46bd      	mov	sp, r7
 800045c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000460:	4770      	bx	lr
 8000462:	bf00      	nop
 8000464:	e000ed00 	.word	0xe000ed00

08000468 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000468:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80004a0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 800046c:	f7ff ffea 	bl	8000444 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000470:	480c      	ldr	r0, [pc, #48]	@ (80004a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000472:	490d      	ldr	r1, [pc, #52]	@ (80004a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000474:	4a0d      	ldr	r2, [pc, #52]	@ (80004ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000476:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000478:	e002      	b.n	8000480 <LoopCopyDataInit>

0800047a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800047a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800047c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800047e:	3304      	adds	r3, #4

08000480 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000480:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000482:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000484:	d3f9      	bcc.n	800047a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000486:	4a0a      	ldr	r2, [pc, #40]	@ (80004b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000488:	4c0a      	ldr	r4, [pc, #40]	@ (80004b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800048a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800048c:	e001      	b.n	8000492 <LoopFillZerobss>

0800048e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800048e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000490:	3204      	adds	r2, #4

08000492 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000492:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000494:	d3fb      	bcc.n	800048e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000496:	f000 f825 	bl	80004e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800049a:	f7ff feb5 	bl	8000208 <main>
  bx  lr    
 800049e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80004a0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80004a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004a8:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80004ac:	0800054c 	.word	0x0800054c
  ldr r2, =_sbss
 80004b0:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80004b4:	20000024 	.word	0x20000024

080004b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80004b8:	e7fe      	b.n	80004b8 <ADC_IRQHandler>
	...

080004bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80004c0:	4b06      	ldr	r3, [pc, #24]	@ (80004dc <HAL_IncTick+0x20>)
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	461a      	mov	r2, r3
 80004c6:	4b06      	ldr	r3, [pc, #24]	@ (80004e0 <HAL_IncTick+0x24>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	4413      	add	r3, r2
 80004cc:	4a04      	ldr	r2, [pc, #16]	@ (80004e0 <HAL_IncTick+0x24>)
 80004ce:	6013      	str	r3, [r2, #0]
}
 80004d0:	bf00      	nop
 80004d2:	46bd      	mov	sp, r7
 80004d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop
 80004dc:	20000000 	.word	0x20000000
 80004e0:	20000020 	.word	0x20000020

080004e4 <__libc_init_array>:
 80004e4:	b570      	push	{r4, r5, r6, lr}
 80004e6:	4d0d      	ldr	r5, [pc, #52]	@ (800051c <__libc_init_array+0x38>)
 80004e8:	4c0d      	ldr	r4, [pc, #52]	@ (8000520 <__libc_init_array+0x3c>)
 80004ea:	1b64      	subs	r4, r4, r5
 80004ec:	10a4      	asrs	r4, r4, #2
 80004ee:	2600      	movs	r6, #0
 80004f0:	42a6      	cmp	r6, r4
 80004f2:	d109      	bne.n	8000508 <__libc_init_array+0x24>
 80004f4:	4d0b      	ldr	r5, [pc, #44]	@ (8000524 <__libc_init_array+0x40>)
 80004f6:	4c0c      	ldr	r4, [pc, #48]	@ (8000528 <__libc_init_array+0x44>)
 80004f8:	f000 f818 	bl	800052c <_init>
 80004fc:	1b64      	subs	r4, r4, r5
 80004fe:	10a4      	asrs	r4, r4, #2
 8000500:	2600      	movs	r6, #0
 8000502:	42a6      	cmp	r6, r4
 8000504:	d105      	bne.n	8000512 <__libc_init_array+0x2e>
 8000506:	bd70      	pop	{r4, r5, r6, pc}
 8000508:	f855 3b04 	ldr.w	r3, [r5], #4
 800050c:	4798      	blx	r3
 800050e:	3601      	adds	r6, #1
 8000510:	e7ee      	b.n	80004f0 <__libc_init_array+0xc>
 8000512:	f855 3b04 	ldr.w	r3, [r5], #4
 8000516:	4798      	blx	r3
 8000518:	3601      	adds	r6, #1
 800051a:	e7f2      	b.n	8000502 <__libc_init_array+0x1e>
 800051c:	08000544 	.word	0x08000544
 8000520:	08000544 	.word	0x08000544
 8000524:	08000544 	.word	0x08000544
 8000528:	08000548 	.word	0x08000548

0800052c <_init>:
 800052c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800052e:	bf00      	nop
 8000530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000532:	bc08      	pop	{r3}
 8000534:	469e      	mov	lr, r3
 8000536:	4770      	bx	lr

08000538 <_fini>:
 8000538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800053a:	bf00      	nop
 800053c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800053e:	bc08      	pop	{r3}
 8000540:	469e      	mov	lr, r3
 8000542:	4770      	bx	lr
