
timer_5s_HAL_Baremetal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000016ac  080001c8  080001c8  000011c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001874  08001874  00002874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001884  08001884  0000300c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08001884  08001884  00002884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800188c  0800188c  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800188c  0800188c  0000288c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001890  08001890  00002890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001894  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  080018a0  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  080018a0  0000302c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004c91  00000000  00000000  0000303c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001080  00000000  00000000  00007ccd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004a8  00000000  00000000  00008d50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000035b  00000000  00000000  000091f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023798  00000000  00000000  00009553  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000540e  00000000  00000000  0002cceb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dca3c  00000000  00000000  000320f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010eb35  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000010e8  00000000  00000000  0010eb78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0010fc60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800185c 	.word	0x0800185c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	0800185c 	.word	0x0800185c

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000218:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800021c:	f000 b988 	b.w	8000530 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	468e      	mov	lr, r1
 8000240:	4604      	mov	r4, r0
 8000242:	4688      	mov	r8, r1
 8000244:	2b00      	cmp	r3, #0
 8000246:	d14a      	bne.n	80002de <__udivmoddi4+0xa6>
 8000248:	428a      	cmp	r2, r1
 800024a:	4617      	mov	r7, r2
 800024c:	d962      	bls.n	8000314 <__udivmoddi4+0xdc>
 800024e:	fab2 f682 	clz	r6, r2
 8000252:	b14e      	cbz	r6, 8000268 <__udivmoddi4+0x30>
 8000254:	f1c6 0320 	rsb	r3, r6, #32
 8000258:	fa01 f806 	lsl.w	r8, r1, r6
 800025c:	fa20 f303 	lsr.w	r3, r0, r3
 8000260:	40b7      	lsls	r7, r6
 8000262:	ea43 0808 	orr.w	r8, r3, r8
 8000266:	40b4      	lsls	r4, r6
 8000268:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800026c:	fa1f fc87 	uxth.w	ip, r7
 8000270:	fbb8 f1fe 	udiv	r1, r8, lr
 8000274:	0c23      	lsrs	r3, r4, #16
 8000276:	fb0e 8811 	mls	r8, lr, r1, r8
 800027a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027e:	fb01 f20c 	mul.w	r2, r1, ip
 8000282:	429a      	cmp	r2, r3
 8000284:	d909      	bls.n	800029a <__udivmoddi4+0x62>
 8000286:	18fb      	adds	r3, r7, r3
 8000288:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800028c:	f080 80ea 	bcs.w	8000464 <__udivmoddi4+0x22c>
 8000290:	429a      	cmp	r2, r3
 8000292:	f240 80e7 	bls.w	8000464 <__udivmoddi4+0x22c>
 8000296:	3902      	subs	r1, #2
 8000298:	443b      	add	r3, r7
 800029a:	1a9a      	subs	r2, r3, r2
 800029c:	b2a3      	uxth	r3, r4
 800029e:	fbb2 f0fe 	udiv	r0, r2, lr
 80002a2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002aa:	fb00 fc0c 	mul.w	ip, r0, ip
 80002ae:	459c      	cmp	ip, r3
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0x8e>
 80002b2:	18fb      	adds	r3, r7, r3
 80002b4:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80002b8:	f080 80d6 	bcs.w	8000468 <__udivmoddi4+0x230>
 80002bc:	459c      	cmp	ip, r3
 80002be:	f240 80d3 	bls.w	8000468 <__udivmoddi4+0x230>
 80002c2:	443b      	add	r3, r7
 80002c4:	3802      	subs	r0, #2
 80002c6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002ca:	eba3 030c 	sub.w	r3, r3, ip
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa2>
 80002d2:	40f3      	lsrs	r3, r6
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xb6>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb0>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa2>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x14c>
 80002f6:	4573      	cmp	r3, lr
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xc8>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 8105 	bhi.w	800050a <__udivmoddi4+0x2d2>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb6e 0203 	sbc.w	r2, lr, r3
 8000306:	2001      	movs	r0, #1
 8000308:	4690      	mov	r8, r2
 800030a:	2d00      	cmp	r5, #0
 800030c:	d0e5      	beq.n	80002da <__udivmoddi4+0xa2>
 800030e:	e9c5 4800 	strd	r4, r8, [r5]
 8000312:	e7e2      	b.n	80002da <__udivmoddi4+0xa2>
 8000314:	2a00      	cmp	r2, #0
 8000316:	f000 8090 	beq.w	800043a <__udivmoddi4+0x202>
 800031a:	fab2 f682 	clz	r6, r2
 800031e:	2e00      	cmp	r6, #0
 8000320:	f040 80a4 	bne.w	800046c <__udivmoddi4+0x234>
 8000324:	1a8a      	subs	r2, r1, r2
 8000326:	0c03      	lsrs	r3, r0, #16
 8000328:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800032c:	b280      	uxth	r0, r0
 800032e:	b2bc      	uxth	r4, r7
 8000330:	2101      	movs	r1, #1
 8000332:	fbb2 fcfe 	udiv	ip, r2, lr
 8000336:	fb0e 221c 	mls	r2, lr, ip, r2
 800033a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800033e:	fb04 f20c 	mul.w	r2, r4, ip
 8000342:	429a      	cmp	r2, r3
 8000344:	d907      	bls.n	8000356 <__udivmoddi4+0x11e>
 8000346:	18fb      	adds	r3, r7, r3
 8000348:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x11c>
 800034e:	429a      	cmp	r2, r3
 8000350:	f200 80e0 	bhi.w	8000514 <__udivmoddi4+0x2dc>
 8000354:	46c4      	mov	ip, r8
 8000356:	1a9b      	subs	r3, r3, r2
 8000358:	fbb3 f2fe 	udiv	r2, r3, lr
 800035c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000360:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000364:	fb02 f404 	mul.w	r4, r2, r4
 8000368:	429c      	cmp	r4, r3
 800036a:	d907      	bls.n	800037c <__udivmoddi4+0x144>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x142>
 8000374:	429c      	cmp	r4, r3
 8000376:	f200 80ca 	bhi.w	800050e <__udivmoddi4+0x2d6>
 800037a:	4602      	mov	r2, r0
 800037c:	1b1b      	subs	r3, r3, r4
 800037e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x98>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa0e f401 	lsl.w	r4, lr, r1
 8000394:	fa20 f306 	lsr.w	r3, r0, r6
 8000398:	fa2e fe06 	lsr.w	lr, lr, r6
 800039c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003a0:	4323      	orrs	r3, r4
 80003a2:	fa00 f801 	lsl.w	r8, r0, r1
 80003a6:	fa1f fc87 	uxth.w	ip, r7
 80003aa:	fbbe f0f9 	udiv	r0, lr, r9
 80003ae:	0c1c      	lsrs	r4, r3, #16
 80003b0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003b4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003b8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003bc:	45a6      	cmp	lr, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d909      	bls.n	80003d8 <__udivmoddi4+0x1a0>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80003ca:	f080 809c 	bcs.w	8000506 <__udivmoddi4+0x2ce>
 80003ce:	45a6      	cmp	lr, r4
 80003d0:	f240 8099 	bls.w	8000506 <__udivmoddi4+0x2ce>
 80003d4:	3802      	subs	r0, #2
 80003d6:	443c      	add	r4, r7
 80003d8:	eba4 040e 	sub.w	r4, r4, lr
 80003dc:	fa1f fe83 	uxth.w	lr, r3
 80003e0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e4:	fb09 4413 	mls	r4, r9, r3, r4
 80003e8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ec:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f0:	45a4      	cmp	ip, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x1ce>
 80003f4:	193c      	adds	r4, r7, r4
 80003f6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003fa:	f080 8082 	bcs.w	8000502 <__udivmoddi4+0x2ca>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d97f      	bls.n	8000502 <__udivmoddi4+0x2ca>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800040a:	eba4 040c 	sub.w	r4, r4, ip
 800040e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000412:	4564      	cmp	r4, ip
 8000414:	4673      	mov	r3, lr
 8000416:	46e1      	mov	r9, ip
 8000418:	d362      	bcc.n	80004e0 <__udivmoddi4+0x2a8>
 800041a:	d05f      	beq.n	80004dc <__udivmoddi4+0x2a4>
 800041c:	b15d      	cbz	r5, 8000436 <__udivmoddi4+0x1fe>
 800041e:	ebb8 0203 	subs.w	r2, r8, r3
 8000422:	eb64 0409 	sbc.w	r4, r4, r9
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	fa22 f301 	lsr.w	r3, r2, r1
 800042e:	431e      	orrs	r6, r3
 8000430:	40cc      	lsrs	r4, r1
 8000432:	e9c5 6400 	strd	r6, r4, [r5]
 8000436:	2100      	movs	r1, #0
 8000438:	e74f      	b.n	80002da <__udivmoddi4+0xa2>
 800043a:	fbb1 fcf2 	udiv	ip, r1, r2
 800043e:	0c01      	lsrs	r1, r0, #16
 8000440:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000444:	b280      	uxth	r0, r0
 8000446:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800044a:	463b      	mov	r3, r7
 800044c:	4638      	mov	r0, r7
 800044e:	463c      	mov	r4, r7
 8000450:	46b8      	mov	r8, r7
 8000452:	46be      	mov	lr, r7
 8000454:	2620      	movs	r6, #32
 8000456:	fbb1 f1f7 	udiv	r1, r1, r7
 800045a:	eba2 0208 	sub.w	r2, r2, r8
 800045e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000462:	e766      	b.n	8000332 <__udivmoddi4+0xfa>
 8000464:	4601      	mov	r1, r0
 8000466:	e718      	b.n	800029a <__udivmoddi4+0x62>
 8000468:	4610      	mov	r0, r2
 800046a:	e72c      	b.n	80002c6 <__udivmoddi4+0x8e>
 800046c:	f1c6 0220 	rsb	r2, r6, #32
 8000470:	fa2e f302 	lsr.w	r3, lr, r2
 8000474:	40b7      	lsls	r7, r6
 8000476:	40b1      	lsls	r1, r6
 8000478:	fa20 f202 	lsr.w	r2, r0, r2
 800047c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000480:	430a      	orrs	r2, r1
 8000482:	fbb3 f8fe 	udiv	r8, r3, lr
 8000486:	b2bc      	uxth	r4, r7
 8000488:	fb0e 3318 	mls	r3, lr, r8, r3
 800048c:	0c11      	lsrs	r1, r2, #16
 800048e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000492:	fb08 f904 	mul.w	r9, r8, r4
 8000496:	40b0      	lsls	r0, r6
 8000498:	4589      	cmp	r9, r1
 800049a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800049e:	b280      	uxth	r0, r0
 80004a0:	d93e      	bls.n	8000520 <__udivmoddi4+0x2e8>
 80004a2:	1879      	adds	r1, r7, r1
 80004a4:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 80004a8:	d201      	bcs.n	80004ae <__udivmoddi4+0x276>
 80004aa:	4589      	cmp	r9, r1
 80004ac:	d81f      	bhi.n	80004ee <__udivmoddi4+0x2b6>
 80004ae:	eba1 0109 	sub.w	r1, r1, r9
 80004b2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b6:	fb09 f804 	mul.w	r8, r9, r4
 80004ba:	fb0e 1119 	mls	r1, lr, r9, r1
 80004be:	b292      	uxth	r2, r2
 80004c0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c4:	4542      	cmp	r2, r8
 80004c6:	d229      	bcs.n	800051c <__udivmoddi4+0x2e4>
 80004c8:	18ba      	adds	r2, r7, r2
 80004ca:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80004ce:	d2c4      	bcs.n	800045a <__udivmoddi4+0x222>
 80004d0:	4542      	cmp	r2, r8
 80004d2:	d2c2      	bcs.n	800045a <__udivmoddi4+0x222>
 80004d4:	f1a9 0102 	sub.w	r1, r9, #2
 80004d8:	443a      	add	r2, r7
 80004da:	e7be      	b.n	800045a <__udivmoddi4+0x222>
 80004dc:	45f0      	cmp	r8, lr
 80004de:	d29d      	bcs.n	800041c <__udivmoddi4+0x1e4>
 80004e0:	ebbe 0302 	subs.w	r3, lr, r2
 80004e4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004e8:	3801      	subs	r0, #1
 80004ea:	46e1      	mov	r9, ip
 80004ec:	e796      	b.n	800041c <__udivmoddi4+0x1e4>
 80004ee:	eba7 0909 	sub.w	r9, r7, r9
 80004f2:	4449      	add	r1, r9
 80004f4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004f8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fc:	fb09 f804 	mul.w	r8, r9, r4
 8000500:	e7db      	b.n	80004ba <__udivmoddi4+0x282>
 8000502:	4673      	mov	r3, lr
 8000504:	e77f      	b.n	8000406 <__udivmoddi4+0x1ce>
 8000506:	4650      	mov	r0, sl
 8000508:	e766      	b.n	80003d8 <__udivmoddi4+0x1a0>
 800050a:	4608      	mov	r0, r1
 800050c:	e6fd      	b.n	800030a <__udivmoddi4+0xd2>
 800050e:	443b      	add	r3, r7
 8000510:	3a02      	subs	r2, #2
 8000512:	e733      	b.n	800037c <__udivmoddi4+0x144>
 8000514:	f1ac 0c02 	sub.w	ip, ip, #2
 8000518:	443b      	add	r3, r7
 800051a:	e71c      	b.n	8000356 <__udivmoddi4+0x11e>
 800051c:	4649      	mov	r1, r9
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x222>
 8000520:	eba1 0109 	sub.w	r1, r1, r9
 8000524:	46c4      	mov	ip, r8
 8000526:	fbb1 f9fe 	udiv	r9, r1, lr
 800052a:	fb09 f804 	mul.w	r8, r9, r4
 800052e:	e7c4      	b.n	80004ba <__udivmoddi4+0x282>

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000534:	b480      	push	{r7}
 8000536:	b083      	sub	sp, #12
 8000538:	af00      	add	r7, sp, #0
 800053a:	4603      	mov	r3, r0
 800053c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800053e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000542:	2b00      	cmp	r3, #0
 8000544:	db0b      	blt.n	800055e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000546:	79fb      	ldrb	r3, [r7, #7]
 8000548:	f003 021f 	and.w	r2, r3, #31
 800054c:	4907      	ldr	r1, [pc, #28]	@ (800056c <__NVIC_EnableIRQ+0x38>)
 800054e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000552:	095b      	lsrs	r3, r3, #5
 8000554:	2001      	movs	r0, #1
 8000556:	fa00 f202 	lsl.w	r2, r0, r2
 800055a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800055e:	bf00      	nop
 8000560:	370c      	adds	r7, #12
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop
 800056c:	e000e100 	.word	0xe000e100

08000570 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	6039      	str	r1, [r7, #0]
 800057a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800057c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000580:	2b00      	cmp	r3, #0
 8000582:	db0a      	blt.n	800059a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000584:	683b      	ldr	r3, [r7, #0]
 8000586:	b2da      	uxtb	r2, r3
 8000588:	490c      	ldr	r1, [pc, #48]	@ (80005bc <__NVIC_SetPriority+0x4c>)
 800058a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800058e:	0112      	lsls	r2, r2, #4
 8000590:	b2d2      	uxtb	r2, r2
 8000592:	440b      	add	r3, r1
 8000594:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000598:	e00a      	b.n	80005b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800059a:	683b      	ldr	r3, [r7, #0]
 800059c:	b2da      	uxtb	r2, r3
 800059e:	4908      	ldr	r1, [pc, #32]	@ (80005c0 <__NVIC_SetPriority+0x50>)
 80005a0:	79fb      	ldrb	r3, [r7, #7]
 80005a2:	f003 030f 	and.w	r3, r3, #15
 80005a6:	3b04      	subs	r3, #4
 80005a8:	0112      	lsls	r2, r2, #4
 80005aa:	b2d2      	uxtb	r2, r2
 80005ac:	440b      	add	r3, r1
 80005ae:	761a      	strb	r2, [r3, #24]
}
 80005b0:	bf00      	nop
 80005b2:	370c      	adds	r7, #12
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr
 80005bc:	e000e100 	.word	0xe000e100
 80005c0:	e000ed00 	.word	0xe000ed00

080005c4 <main>:
static void MX_GPIO_Init(void);
void TIM6_Init_BareMetal(void);

// Entry point
int main(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  HAL_Init();                  // Optional if other HAL components needed
 80005c8:	f000 f96d 	bl	80008a6 <HAL_Init>
  SystemClock_Config();        // Clock setup
 80005cc:	f000 f806 	bl	80005dc <SystemClock_Config>
  MX_GPIO_Init();              // GPIO setup for PD5
 80005d0:	f000 f88c 	bl	80006ec <MX_GPIO_Init>
  TIM6_Init_BareMetal();       // Timer setup (bare-metal)
 80005d4:	f000 f860 	bl	8000698 <TIM6_Init_BareMetal>

  while (1)
 80005d8:	bf00      	nop
 80005da:	e7fd      	b.n	80005d8 <main+0x14>

080005dc <SystemClock_Config>:
  }
}

// System Clock Configuration — unchanged
void SystemClock_Config(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b094      	sub	sp, #80	@ 0x50
 80005e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e2:	f107 0320 	add.w	r3, r7, #32
 80005e6:	2230      	movs	r2, #48	@ 0x30
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f001 f90a 	bl	8001804 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f0:	f107 030c 	add.w	r3, r7, #12
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	609a      	str	r2, [r3, #8]
 80005fc:	60da      	str	r2, [r3, #12]
 80005fe:	611a      	str	r2, [r3, #16]

  __HAL_RCC_PWR_CLK_ENABLE();
 8000600:	4b23      	ldr	r3, [pc, #140]	@ (8000690 <SystemClock_Config+0xb4>)
 8000602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000604:	4a22      	ldr	r2, [pc, #136]	@ (8000690 <SystemClock_Config+0xb4>)
 8000606:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800060a:	6413      	str	r3, [r2, #64]	@ 0x40
 800060c:	4b20      	ldr	r3, [pc, #128]	@ (8000690 <SystemClock_Config+0xb4>)
 800060e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000610:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000614:	60bb      	str	r3, [r7, #8]
 8000616:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000618:	4b1e      	ldr	r3, [pc, #120]	@ (8000694 <SystemClock_Config+0xb8>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a1d      	ldr	r2, [pc, #116]	@ (8000694 <SystemClock_Config+0xb8>)
 800061e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000622:	6013      	str	r3, [r2, #0]
 8000624:	4b1b      	ldr	r3, [pc, #108]	@ (8000694 <SystemClock_Config+0xb8>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800062c:	607b      	str	r3, [r7, #4]
 800062e:	687b      	ldr	r3, [r7, #4]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000630:	2301      	movs	r3, #1
 8000632:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000634:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000638:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800063a:	2302      	movs	r3, #2
 800063c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800063e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000642:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000644:	2319      	movs	r3, #25
 8000646:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000648:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 800064c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800064e:	2302      	movs	r3, #2
 8000650:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000652:	2309      	movs	r3, #9
 8000654:	64fb      	str	r3, [r7, #76]	@ 0x4c

  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000656:	f107 0320 	add.w	r3, r7, #32
 800065a:	4618      	mov	r0, r3
 800065c:	f000 fc7c 	bl	8000f58 <HAL_RCC_OscConfig>
  HAL_PWREx_EnableOverDrive();
 8000660:	f000 fc2a 	bl	8000eb8 <HAL_PWREx_EnableOverDrive>

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 8000664:	230f      	movs	r3, #15
 8000666:	60fb      	str	r3, [r7, #12]
                                RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000668:	2302      	movs	r3, #2
 800066a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066c:	2300      	movs	r3, #0
 800066e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000670:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000674:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000676:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800067a:	61fb      	str	r3, [r7, #28]

  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6);
 800067c:	f107 030c 	add.w	r3, r7, #12
 8000680:	2106      	movs	r1, #6
 8000682:	4618      	mov	r0, r3
 8000684:	f000 ff0c 	bl	80014a0 <HAL_RCC_ClockConfig>
}
 8000688:	bf00      	nop
 800068a:	3750      	adds	r7, #80	@ 0x50
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	40023800 	.word	0x40023800
 8000694:	40007000 	.word	0x40007000

08000698 <TIM6_Init_BareMetal>:

// Bare-metal Timer 6 Initialization
void TIM6_Init_BareMetal(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
  RCC->APB1ENR |= RCC_APB1ENR_TIM6EN; // Enable TIM6 clock
 800069c:	4b11      	ldr	r3, [pc, #68]	@ (80006e4 <TIM6_Init_BareMetal+0x4c>)
 800069e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006a0:	4a10      	ldr	r2, [pc, #64]	@ (80006e4 <TIM6_Init_BareMetal+0x4c>)
 80006a2:	f043 0310 	orr.w	r3, r3, #16
 80006a6:	6413      	str	r3, [r2, #64]	@ 0x40

  TIM6->PSC = 53999;     // Prescaler
 80006a8:	4b0f      	ldr	r3, [pc, #60]	@ (80006e8 <TIM6_Init_BareMetal+0x50>)
 80006aa:	f24d 22ef 	movw	r2, #53999	@ 0xd2ef
 80006ae:	629a      	str	r2, [r3, #40]	@ 0x28
  TIM6->ARR = 9999;      // Auto-reload (Overflow every ~5s)
 80006b0:	4b0d      	ldr	r3, [pc, #52]	@ (80006e8 <TIM6_Init_BareMetal+0x50>)
 80006b2:	f242 720f 	movw	r2, #9999	@ 0x270f
 80006b6:	62da      	str	r2, [r3, #44]	@ 0x2c

  TIM6->DIER |= TIM_DIER_UIE;   // Enable Update Interrupt
 80006b8:	4b0b      	ldr	r3, [pc, #44]	@ (80006e8 <TIM6_Init_BareMetal+0x50>)
 80006ba:	68db      	ldr	r3, [r3, #12]
 80006bc:	4a0a      	ldr	r2, [pc, #40]	@ (80006e8 <TIM6_Init_BareMetal+0x50>)
 80006be:	f043 0301 	orr.w	r3, r3, #1
 80006c2:	60d3      	str	r3, [r2, #12]
  TIM6->CR1 |= TIM_CR1_CEN;     // Start Timer
 80006c4:	4b08      	ldr	r3, [pc, #32]	@ (80006e8 <TIM6_Init_BareMetal+0x50>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a07      	ldr	r2, [pc, #28]	@ (80006e8 <TIM6_Init_BareMetal+0x50>)
 80006ca:	f043 0301 	orr.w	r3, r3, #1
 80006ce:	6013      	str	r3, [r2, #0]

  NVIC_SetPriority(TIM6_DAC_IRQn, 0);    // IRQ priority
 80006d0:	2100      	movs	r1, #0
 80006d2:	2036      	movs	r0, #54	@ 0x36
 80006d4:	f7ff ff4c 	bl	8000570 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM6_DAC_IRQn);        // Enable TIM6 interrupt
 80006d8:	2036      	movs	r0, #54	@ 0x36
 80006da:	f7ff ff2b 	bl	8000534 <__NVIC_EnableIRQ>
}
 80006de:	bf00      	nop
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40023800 	.word	0x40023800
 80006e8:	40001000 	.word	0x40001000

080006ec <MX_GPIO_Init>:

// GPIO initialization — unchanged
static void MX_GPIO_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b086      	sub	sp, #24
 80006f0:	af00      	add	r7, sp, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006f2:	4b14      	ldr	r3, [pc, #80]	@ (8000744 <MX_GPIO_Init+0x58>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f6:	4a13      	ldr	r2, [pc, #76]	@ (8000744 <MX_GPIO_Init+0x58>)
 80006f8:	f043 0308 	orr.w	r3, r3, #8
 80006fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80006fe:	4b11      	ldr	r3, [pc, #68]	@ (8000744 <MX_GPIO_Init+0x58>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000702:	f003 0308 	and.w	r3, r3, #8
 8000706:	603b      	str	r3, [r7, #0]
 8000708:	683b      	ldr	r3, [r7, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070a:	1d3b      	adds	r3, r7, #4
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]
 8000712:	609a      	str	r2, [r3, #8]
 8000714:	60da      	str	r2, [r3, #12]
 8000716:	611a      	str	r2, [r3, #16]

  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_5, GPIO_PIN_RESET);
 8000718:	2200      	movs	r2, #0
 800071a:	2120      	movs	r1, #32
 800071c:	480a      	ldr	r0, [pc, #40]	@ (8000748 <MX_GPIO_Init+0x5c>)
 800071e:	f000 fbb1 	bl	8000e84 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000722:	2320      	movs	r3, #32
 8000724:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000726:	2301      	movs	r3, #1
 8000728:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072a:	2300      	movs	r3, #0
 800072c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800072e:	2300      	movs	r3, #0
 8000730:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000732:	1d3b      	adds	r3, r7, #4
 8000734:	4619      	mov	r1, r3
 8000736:	4804      	ldr	r0, [pc, #16]	@ (8000748 <MX_GPIO_Init+0x5c>)
 8000738:	f000 f9f8 	bl	8000b2c <HAL_GPIO_Init>
}
 800073c:	bf00      	nop
 800073e:	3718      	adds	r7, #24
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	40023800 	.word	0x40023800
 8000748:	40020c00 	.word	0x40020c00

0800074c <TIM6_DAC_IRQHandler>:

// TIM6 interrupt handler (bare-metal)
void TIM6_DAC_IRQHandler(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  if (TIM6->SR & TIM_SR_UIF)  // Check Update Interrupt Flag
 8000750:	4b0b      	ldr	r3, [pc, #44]	@ (8000780 <TIM6_DAC_IRQHandler+0x34>)
 8000752:	691b      	ldr	r3, [r3, #16]
 8000754:	f003 0301 	and.w	r3, r3, #1
 8000758:	2b00      	cmp	r3, #0
 800075a:	d00b      	beq.n	8000774 <TIM6_DAC_IRQHandler+0x28>
  {
    TIM6->SR &= ~TIM_SR_UIF;  // Clear flag
 800075c:	4b08      	ldr	r3, [pc, #32]	@ (8000780 <TIM6_DAC_IRQHandler+0x34>)
 800075e:	691b      	ldr	r3, [r3, #16]
 8000760:	4a07      	ldr	r2, [pc, #28]	@ (8000780 <TIM6_DAC_IRQHandler+0x34>)
 8000762:	f023 0301 	bic.w	r3, r3, #1
 8000766:	6113      	str	r3, [r2, #16]
    GPIOD->ODR ^= GPIO_ODR_OD5; // Toggle PD5
 8000768:	4b06      	ldr	r3, [pc, #24]	@ (8000784 <TIM6_DAC_IRQHandler+0x38>)
 800076a:	695b      	ldr	r3, [r3, #20]
 800076c:	4a05      	ldr	r2, [pc, #20]	@ (8000784 <TIM6_DAC_IRQHandler+0x38>)
 800076e:	f083 0320 	eor.w	r3, r3, #32
 8000772:	6153      	str	r3, [r2, #20]
  }
}
 8000774:	bf00      	nop
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop
 8000780:	40001000 	.word	0x40001000
 8000784:	40020c00 	.word	0x40020c00

08000788 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000788:	b480      	push	{r7}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800078e:	4b0f      	ldr	r3, [pc, #60]	@ (80007cc <HAL_MspInit+0x44>)
 8000790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000792:	4a0e      	ldr	r2, [pc, #56]	@ (80007cc <HAL_MspInit+0x44>)
 8000794:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000798:	6413      	str	r3, [r2, #64]	@ 0x40
 800079a:	4b0c      	ldr	r3, [pc, #48]	@ (80007cc <HAL_MspInit+0x44>)
 800079c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800079e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007a6:	4b09      	ldr	r3, [pc, #36]	@ (80007cc <HAL_MspInit+0x44>)
 80007a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007aa:	4a08      	ldr	r2, [pc, #32]	@ (80007cc <HAL_MspInit+0x44>)
 80007ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80007b2:	4b06      	ldr	r3, [pc, #24]	@ (80007cc <HAL_MspInit+0x44>)
 80007b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007ba:	603b      	str	r3, [r7, #0]
 80007bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007be:	bf00      	nop
 80007c0:	370c      	adds	r7, #12
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	40023800 	.word	0x40023800

080007d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007d4:	bf00      	nop
 80007d6:	e7fd      	b.n	80007d4 <NMI_Handler+0x4>

080007d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007dc:	bf00      	nop
 80007de:	e7fd      	b.n	80007dc <HardFault_Handler+0x4>

080007e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007e4:	bf00      	nop
 80007e6:	e7fd      	b.n	80007e4 <MemManage_Handler+0x4>

080007e8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007ec:	bf00      	nop
 80007ee:	e7fd      	b.n	80007ec <BusFault_Handler+0x4>

080007f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007f4:	bf00      	nop
 80007f6:	e7fd      	b.n	80007f4 <UsageFault_Handler+0x4>

080007f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007fc:	bf00      	nop
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr

08000806 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000806:	b480      	push	{r7}
 8000808:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800080a:	bf00      	nop
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr

08000814 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000818:	bf00      	nop
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr

08000822 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000822:	b580      	push	{r7, lr}
 8000824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000826:	f000 f87b 	bl	8000920 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
	...

08000830 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000834:	4b06      	ldr	r3, [pc, #24]	@ (8000850 <SystemInit+0x20>)
 8000836:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800083a:	4a05      	ldr	r2, [pc, #20]	@ (8000850 <SystemInit+0x20>)
 800083c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000840:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000844:	bf00      	nop
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	e000ed00 	.word	0xe000ed00

08000854 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000854:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800088c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000858:	f7ff ffea 	bl	8000830 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800085c:	480c      	ldr	r0, [pc, #48]	@ (8000890 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800085e:	490d      	ldr	r1, [pc, #52]	@ (8000894 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000860:	4a0d      	ldr	r2, [pc, #52]	@ (8000898 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000862:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000864:	e002      	b.n	800086c <LoopCopyDataInit>

08000866 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000866:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000868:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800086a:	3304      	adds	r3, #4

0800086c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800086c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800086e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000870:	d3f9      	bcc.n	8000866 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000872:	4a0a      	ldr	r2, [pc, #40]	@ (800089c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000874:	4c0a      	ldr	r4, [pc, #40]	@ (80008a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000876:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000878:	e001      	b.n	800087e <LoopFillZerobss>

0800087a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800087a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800087c:	3204      	adds	r2, #4

0800087e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800087e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000880:	d3fb      	bcc.n	800087a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000882:	f000 ffc7 	bl	8001814 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000886:	f7ff fe9d 	bl	80005c4 <main>
  bx  lr    
 800088a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800088c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000890:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000894:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000898:	08001894 	.word	0x08001894
  ldr r2, =_sbss
 800089c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008a0:	2000002c 	.word	0x2000002c

080008a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008a4:	e7fe      	b.n	80008a4 <ADC_IRQHandler>

080008a6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008a6:	b580      	push	{r7, lr}
 80008a8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008aa:	2003      	movs	r0, #3
 80008ac:	f000 f90a 	bl	8000ac4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008b0:	200f      	movs	r0, #15
 80008b2:	f000 f805 	bl	80008c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008b6:	f7ff ff67 	bl	8000788 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008ba:	2300      	movs	r3, #0
}
 80008bc:	4618      	mov	r0, r3
 80008be:	bd80      	pop	{r7, pc}

080008c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008c8:	4b12      	ldr	r3, [pc, #72]	@ (8000914 <HAL_InitTick+0x54>)
 80008ca:	681a      	ldr	r2, [r3, #0]
 80008cc:	4b12      	ldr	r3, [pc, #72]	@ (8000918 <HAL_InitTick+0x58>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	4619      	mov	r1, r3
 80008d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80008da:	fbb2 f3f3 	udiv	r3, r2, r3
 80008de:	4618      	mov	r0, r3
 80008e0:	f000 f917 	bl	8000b12 <HAL_SYSTICK_Config>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008ea:	2301      	movs	r3, #1
 80008ec:	e00e      	b.n	800090c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	2b0f      	cmp	r3, #15
 80008f2:	d80a      	bhi.n	800090a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008f4:	2200      	movs	r2, #0
 80008f6:	6879      	ldr	r1, [r7, #4]
 80008f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80008fc:	f000 f8ed 	bl	8000ada <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000900:	4a06      	ldr	r2, [pc, #24]	@ (800091c <HAL_InitTick+0x5c>)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000906:	2300      	movs	r3, #0
 8000908:	e000      	b.n	800090c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800090a:	2301      	movs	r3, #1
}
 800090c:	4618      	mov	r0, r3
 800090e:	3708      	adds	r7, #8
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	20000000 	.word	0x20000000
 8000918:	20000008 	.word	0x20000008
 800091c:	20000004 	.word	0x20000004

08000920 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000924:	4b06      	ldr	r3, [pc, #24]	@ (8000940 <HAL_IncTick+0x20>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	461a      	mov	r2, r3
 800092a:	4b06      	ldr	r3, [pc, #24]	@ (8000944 <HAL_IncTick+0x24>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	4413      	add	r3, r2
 8000930:	4a04      	ldr	r2, [pc, #16]	@ (8000944 <HAL_IncTick+0x24>)
 8000932:	6013      	str	r3, [r2, #0]
}
 8000934:	bf00      	nop
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	20000008 	.word	0x20000008
 8000944:	20000028 	.word	0x20000028

08000948 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  return uwTick;
 800094c:	4b03      	ldr	r3, [pc, #12]	@ (800095c <HAL_GetTick+0x14>)
 800094e:	681b      	ldr	r3, [r3, #0]
}
 8000950:	4618      	mov	r0, r3
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	20000028 	.word	0x20000028

08000960 <__NVIC_SetPriorityGrouping>:
{
 8000960:	b480      	push	{r7}
 8000962:	b085      	sub	sp, #20
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	f003 0307 	and.w	r3, r3, #7
 800096e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000970:	4b0b      	ldr	r3, [pc, #44]	@ (80009a0 <__NVIC_SetPriorityGrouping+0x40>)
 8000972:	68db      	ldr	r3, [r3, #12]
 8000974:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000976:	68ba      	ldr	r2, [r7, #8]
 8000978:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800097c:	4013      	ands	r3, r2
 800097e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000984:	68bb      	ldr	r3, [r7, #8]
 8000986:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000988:	4b06      	ldr	r3, [pc, #24]	@ (80009a4 <__NVIC_SetPriorityGrouping+0x44>)
 800098a:	4313      	orrs	r3, r2
 800098c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800098e:	4a04      	ldr	r2, [pc, #16]	@ (80009a0 <__NVIC_SetPriorityGrouping+0x40>)
 8000990:	68bb      	ldr	r3, [r7, #8]
 8000992:	60d3      	str	r3, [r2, #12]
}
 8000994:	bf00      	nop
 8000996:	3714      	adds	r7, #20
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr
 80009a0:	e000ed00 	.word	0xe000ed00
 80009a4:	05fa0000 	.word	0x05fa0000

080009a8 <__NVIC_GetPriorityGrouping>:
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009ac:	4b04      	ldr	r3, [pc, #16]	@ (80009c0 <__NVIC_GetPriorityGrouping+0x18>)
 80009ae:	68db      	ldr	r3, [r3, #12]
 80009b0:	0a1b      	lsrs	r3, r3, #8
 80009b2:	f003 0307 	and.w	r3, r3, #7
}
 80009b6:	4618      	mov	r0, r3
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr
 80009c0:	e000ed00 	.word	0xe000ed00

080009c4 <__NVIC_SetPriority>:
{
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	4603      	mov	r3, r0
 80009cc:	6039      	str	r1, [r7, #0]
 80009ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	db0a      	blt.n	80009ee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	b2da      	uxtb	r2, r3
 80009dc:	490c      	ldr	r1, [pc, #48]	@ (8000a10 <__NVIC_SetPriority+0x4c>)
 80009de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e2:	0112      	lsls	r2, r2, #4
 80009e4:	b2d2      	uxtb	r2, r2
 80009e6:	440b      	add	r3, r1
 80009e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80009ec:	e00a      	b.n	8000a04 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	b2da      	uxtb	r2, r3
 80009f2:	4908      	ldr	r1, [pc, #32]	@ (8000a14 <__NVIC_SetPriority+0x50>)
 80009f4:	79fb      	ldrb	r3, [r7, #7]
 80009f6:	f003 030f 	and.w	r3, r3, #15
 80009fa:	3b04      	subs	r3, #4
 80009fc:	0112      	lsls	r2, r2, #4
 80009fe:	b2d2      	uxtb	r2, r2
 8000a00:	440b      	add	r3, r1
 8000a02:	761a      	strb	r2, [r3, #24]
}
 8000a04:	bf00      	nop
 8000a06:	370c      	adds	r7, #12
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr
 8000a10:	e000e100 	.word	0xe000e100
 8000a14:	e000ed00 	.word	0xe000ed00

08000a18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b089      	sub	sp, #36	@ 0x24
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	60f8      	str	r0, [r7, #12]
 8000a20:	60b9      	str	r1, [r7, #8]
 8000a22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	f003 0307 	and.w	r3, r3, #7
 8000a2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a2c:	69fb      	ldr	r3, [r7, #28]
 8000a2e:	f1c3 0307 	rsb	r3, r3, #7
 8000a32:	2b04      	cmp	r3, #4
 8000a34:	bf28      	it	cs
 8000a36:	2304      	movcs	r3, #4
 8000a38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a3a:	69fb      	ldr	r3, [r7, #28]
 8000a3c:	3304      	adds	r3, #4
 8000a3e:	2b06      	cmp	r3, #6
 8000a40:	d902      	bls.n	8000a48 <NVIC_EncodePriority+0x30>
 8000a42:	69fb      	ldr	r3, [r7, #28]
 8000a44:	3b03      	subs	r3, #3
 8000a46:	e000      	b.n	8000a4a <NVIC_EncodePriority+0x32>
 8000a48:	2300      	movs	r3, #0
 8000a4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a4c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000a50:	69bb      	ldr	r3, [r7, #24]
 8000a52:	fa02 f303 	lsl.w	r3, r2, r3
 8000a56:	43da      	mvns	r2, r3
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	401a      	ands	r2, r3
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a60:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	fa01 f303 	lsl.w	r3, r1, r3
 8000a6a:	43d9      	mvns	r1, r3
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a70:	4313      	orrs	r3, r2
         );
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	3724      	adds	r7, #36	@ 0x24
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
	...

08000a80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	3b01      	subs	r3, #1
 8000a8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000a90:	d301      	bcc.n	8000a96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a92:	2301      	movs	r3, #1
 8000a94:	e00f      	b.n	8000ab6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a96:	4a0a      	ldr	r2, [pc, #40]	@ (8000ac0 <SysTick_Config+0x40>)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	3b01      	subs	r3, #1
 8000a9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a9e:	210f      	movs	r1, #15
 8000aa0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000aa4:	f7ff ff8e 	bl	80009c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000aa8:	4b05      	ldr	r3, [pc, #20]	@ (8000ac0 <SysTick_Config+0x40>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aae:	4b04      	ldr	r3, [pc, #16]	@ (8000ac0 <SysTick_Config+0x40>)
 8000ab0:	2207      	movs	r2, #7
 8000ab2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ab4:	2300      	movs	r3, #0
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	e000e010 	.word	0xe000e010

08000ac4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000acc:	6878      	ldr	r0, [r7, #4]
 8000ace:	f7ff ff47 	bl	8000960 <__NVIC_SetPriorityGrouping>
}
 8000ad2:	bf00      	nop
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}

08000ada <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ada:	b580      	push	{r7, lr}
 8000adc:	b086      	sub	sp, #24
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	60b9      	str	r1, [r7, #8]
 8000ae4:	607a      	str	r2, [r7, #4]
 8000ae6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000aec:	f7ff ff5c 	bl	80009a8 <__NVIC_GetPriorityGrouping>
 8000af0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000af2:	687a      	ldr	r2, [r7, #4]
 8000af4:	68b9      	ldr	r1, [r7, #8]
 8000af6:	6978      	ldr	r0, [r7, #20]
 8000af8:	f7ff ff8e 	bl	8000a18 <NVIC_EncodePriority>
 8000afc:	4602      	mov	r2, r0
 8000afe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b02:	4611      	mov	r1, r2
 8000b04:	4618      	mov	r0, r3
 8000b06:	f7ff ff5d 	bl	80009c4 <__NVIC_SetPriority>
}
 8000b0a:	bf00      	nop
 8000b0c:	3718      	adds	r7, #24
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}

08000b12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b12:	b580      	push	{r7, lr}
 8000b14:	b082      	sub	sp, #8
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b1a:	6878      	ldr	r0, [r7, #4]
 8000b1c:	f7ff ffb0 	bl	8000a80 <SysTick_Config>
 8000b20:	4603      	mov	r3, r0
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
	...

08000b2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b089      	sub	sp, #36	@ 0x24
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
 8000b34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000b36:	2300      	movs	r3, #0
 8000b38:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000b42:	2300      	movs	r3, #0
 8000b44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8000b46:	2300      	movs	r3, #0
 8000b48:	61fb      	str	r3, [r7, #28]
 8000b4a:	e175      	b.n	8000e38 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	69fb      	ldr	r3, [r7, #28]
 8000b50:	fa02 f303 	lsl.w	r3, r2, r3
 8000b54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	697a      	ldr	r2, [r7, #20]
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8000b60:	693a      	ldr	r2, [r7, #16]
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	429a      	cmp	r2, r3
 8000b66:	f040 8164 	bne.w	8000e32 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	f003 0303 	and.w	r3, r3, #3
 8000b72:	2b01      	cmp	r3, #1
 8000b74:	d005      	beq.n	8000b82 <HAL_GPIO_Init+0x56>
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	685b      	ldr	r3, [r3, #4]
 8000b7a:	f003 0303 	and.w	r3, r3, #3
 8000b7e:	2b02      	cmp	r3, #2
 8000b80:	d130      	bne.n	8000be4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	689b      	ldr	r3, [r3, #8]
 8000b86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000b88:	69fb      	ldr	r3, [r7, #28]
 8000b8a:	005b      	lsls	r3, r3, #1
 8000b8c:	2203      	movs	r2, #3
 8000b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b92:	43db      	mvns	r3, r3
 8000b94:	69ba      	ldr	r2, [r7, #24]
 8000b96:	4013      	ands	r3, r2
 8000b98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	68da      	ldr	r2, [r3, #12]
 8000b9e:	69fb      	ldr	r3, [r7, #28]
 8000ba0:	005b      	lsls	r3, r3, #1
 8000ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba6:	69ba      	ldr	r2, [r7, #24]
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	69ba      	ldr	r2, [r7, #24]
 8000bb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	685b      	ldr	r3, [r3, #4]
 8000bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bb8:	2201      	movs	r2, #1
 8000bba:	69fb      	ldr	r3, [r7, #28]
 8000bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc0:	43db      	mvns	r3, r3
 8000bc2:	69ba      	ldr	r2, [r7, #24]
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	091b      	lsrs	r3, r3, #4
 8000bce:	f003 0201 	and.w	r2, r3, #1
 8000bd2:	69fb      	ldr	r3, [r7, #28]
 8000bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bd8:	69ba      	ldr	r2, [r7, #24]
 8000bda:	4313      	orrs	r3, r2
 8000bdc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	69ba      	ldr	r2, [r7, #24]
 8000be2:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	f003 0303 	and.w	r3, r3, #3
 8000bec:	2b03      	cmp	r3, #3
 8000bee:	d017      	beq.n	8000c20 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	68db      	ldr	r3, [r3, #12]
 8000bf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000bf6:	69fb      	ldr	r3, [r7, #28]
 8000bf8:	005b      	lsls	r3, r3, #1
 8000bfa:	2203      	movs	r2, #3
 8000bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000c00:	43db      	mvns	r3, r3
 8000c02:	69ba      	ldr	r2, [r7, #24]
 8000c04:	4013      	ands	r3, r2
 8000c06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	689a      	ldr	r2, [r3, #8]
 8000c0c:	69fb      	ldr	r3, [r7, #28]
 8000c0e:	005b      	lsls	r3, r3, #1
 8000c10:	fa02 f303 	lsl.w	r3, r2, r3
 8000c14:	69ba      	ldr	r2, [r7, #24]
 8000c16:	4313      	orrs	r3, r2
 8000c18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	69ba      	ldr	r2, [r7, #24]
 8000c1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	f003 0303 	and.w	r3, r3, #3
 8000c28:	2b02      	cmp	r3, #2
 8000c2a:	d123      	bne.n	8000c74 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000c2c:	69fb      	ldr	r3, [r7, #28]
 8000c2e:	08da      	lsrs	r2, r3, #3
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	3208      	adds	r2, #8
 8000c34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000c3a:	69fb      	ldr	r3, [r7, #28]
 8000c3c:	f003 0307 	and.w	r3, r3, #7
 8000c40:	009b      	lsls	r3, r3, #2
 8000c42:	220f      	movs	r2, #15
 8000c44:	fa02 f303 	lsl.w	r3, r2, r3
 8000c48:	43db      	mvns	r3, r3
 8000c4a:	69ba      	ldr	r2, [r7, #24]
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	691a      	ldr	r2, [r3, #16]
 8000c54:	69fb      	ldr	r3, [r7, #28]
 8000c56:	f003 0307 	and.w	r3, r3, #7
 8000c5a:	009b      	lsls	r3, r3, #2
 8000c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c60:	69ba      	ldr	r2, [r7, #24]
 8000c62:	4313      	orrs	r3, r2
 8000c64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000c66:	69fb      	ldr	r3, [r7, #28]
 8000c68:	08da      	lsrs	r2, r3, #3
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	3208      	adds	r2, #8
 8000c6e:	69b9      	ldr	r1, [r7, #24]
 8000c70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	005b      	lsls	r3, r3, #1
 8000c7e:	2203      	movs	r2, #3
 8000c80:	fa02 f303 	lsl.w	r3, r2, r3
 8000c84:	43db      	mvns	r3, r3
 8000c86:	69ba      	ldr	r2, [r7, #24]
 8000c88:	4013      	ands	r3, r2
 8000c8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	f003 0203 	and.w	r2, r3, #3
 8000c94:	69fb      	ldr	r3, [r7, #28]
 8000c96:	005b      	lsls	r3, r3, #1
 8000c98:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9c:	69ba      	ldr	r2, [r7, #24]
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	69ba      	ldr	r2, [r7, #24]
 8000ca6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	f000 80be 	beq.w	8000e32 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cb6:	4b66      	ldr	r3, [pc, #408]	@ (8000e50 <HAL_GPIO_Init+0x324>)
 8000cb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cba:	4a65      	ldr	r2, [pc, #404]	@ (8000e50 <HAL_GPIO_Init+0x324>)
 8000cbc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cc0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cc2:	4b63      	ldr	r3, [pc, #396]	@ (8000e50 <HAL_GPIO_Init+0x324>)
 8000cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cc6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cca:	60fb      	str	r3, [r7, #12]
 8000ccc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000cce:	4a61      	ldr	r2, [pc, #388]	@ (8000e54 <HAL_GPIO_Init+0x328>)
 8000cd0:	69fb      	ldr	r3, [r7, #28]
 8000cd2:	089b      	lsrs	r3, r3, #2
 8000cd4:	3302      	adds	r3, #2
 8000cd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cda:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000cdc:	69fb      	ldr	r3, [r7, #28]
 8000cde:	f003 0303 	and.w	r3, r3, #3
 8000ce2:	009b      	lsls	r3, r3, #2
 8000ce4:	220f      	movs	r2, #15
 8000ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cea:	43db      	mvns	r3, r3
 8000cec:	69ba      	ldr	r2, [r7, #24]
 8000cee:	4013      	ands	r3, r2
 8000cf0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4a58      	ldr	r2, [pc, #352]	@ (8000e58 <HAL_GPIO_Init+0x32c>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d037      	beq.n	8000d6a <HAL_GPIO_Init+0x23e>
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4a57      	ldr	r2, [pc, #348]	@ (8000e5c <HAL_GPIO_Init+0x330>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d031      	beq.n	8000d66 <HAL_GPIO_Init+0x23a>
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4a56      	ldr	r2, [pc, #344]	@ (8000e60 <HAL_GPIO_Init+0x334>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d02b      	beq.n	8000d62 <HAL_GPIO_Init+0x236>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	4a55      	ldr	r2, [pc, #340]	@ (8000e64 <HAL_GPIO_Init+0x338>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d025      	beq.n	8000d5e <HAL_GPIO_Init+0x232>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4a54      	ldr	r2, [pc, #336]	@ (8000e68 <HAL_GPIO_Init+0x33c>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d01f      	beq.n	8000d5a <HAL_GPIO_Init+0x22e>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4a53      	ldr	r2, [pc, #332]	@ (8000e6c <HAL_GPIO_Init+0x340>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d019      	beq.n	8000d56 <HAL_GPIO_Init+0x22a>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4a52      	ldr	r2, [pc, #328]	@ (8000e70 <HAL_GPIO_Init+0x344>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d013      	beq.n	8000d52 <HAL_GPIO_Init+0x226>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4a51      	ldr	r2, [pc, #324]	@ (8000e74 <HAL_GPIO_Init+0x348>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d00d      	beq.n	8000d4e <HAL_GPIO_Init+0x222>
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4a50      	ldr	r2, [pc, #320]	@ (8000e78 <HAL_GPIO_Init+0x34c>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d007      	beq.n	8000d4a <HAL_GPIO_Init+0x21e>
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4a4f      	ldr	r2, [pc, #316]	@ (8000e7c <HAL_GPIO_Init+0x350>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d101      	bne.n	8000d46 <HAL_GPIO_Init+0x21a>
 8000d42:	2309      	movs	r3, #9
 8000d44:	e012      	b.n	8000d6c <HAL_GPIO_Init+0x240>
 8000d46:	230a      	movs	r3, #10
 8000d48:	e010      	b.n	8000d6c <HAL_GPIO_Init+0x240>
 8000d4a:	2308      	movs	r3, #8
 8000d4c:	e00e      	b.n	8000d6c <HAL_GPIO_Init+0x240>
 8000d4e:	2307      	movs	r3, #7
 8000d50:	e00c      	b.n	8000d6c <HAL_GPIO_Init+0x240>
 8000d52:	2306      	movs	r3, #6
 8000d54:	e00a      	b.n	8000d6c <HAL_GPIO_Init+0x240>
 8000d56:	2305      	movs	r3, #5
 8000d58:	e008      	b.n	8000d6c <HAL_GPIO_Init+0x240>
 8000d5a:	2304      	movs	r3, #4
 8000d5c:	e006      	b.n	8000d6c <HAL_GPIO_Init+0x240>
 8000d5e:	2303      	movs	r3, #3
 8000d60:	e004      	b.n	8000d6c <HAL_GPIO_Init+0x240>
 8000d62:	2302      	movs	r3, #2
 8000d64:	e002      	b.n	8000d6c <HAL_GPIO_Init+0x240>
 8000d66:	2301      	movs	r3, #1
 8000d68:	e000      	b.n	8000d6c <HAL_GPIO_Init+0x240>
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	69fa      	ldr	r2, [r7, #28]
 8000d6e:	f002 0203 	and.w	r2, r2, #3
 8000d72:	0092      	lsls	r2, r2, #2
 8000d74:	4093      	lsls	r3, r2
 8000d76:	69ba      	ldr	r2, [r7, #24]
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000d7c:	4935      	ldr	r1, [pc, #212]	@ (8000e54 <HAL_GPIO_Init+0x328>)
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	089b      	lsrs	r3, r3, #2
 8000d82:	3302      	adds	r3, #2
 8000d84:	69ba      	ldr	r2, [r7, #24]
 8000d86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d8a:	4b3d      	ldr	r3, [pc, #244]	@ (8000e80 <HAL_GPIO_Init+0x354>)
 8000d8c:	689b      	ldr	r3, [r3, #8]
 8000d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d90:	693b      	ldr	r3, [r7, #16]
 8000d92:	43db      	mvns	r3, r3
 8000d94:	69ba      	ldr	r2, [r7, #24]
 8000d96:	4013      	ands	r3, r2
 8000d98:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d003      	beq.n	8000dae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000da6:	69ba      	ldr	r2, [r7, #24]
 8000da8:	693b      	ldr	r3, [r7, #16]
 8000daa:	4313      	orrs	r3, r2
 8000dac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000dae:	4a34      	ldr	r2, [pc, #208]	@ (8000e80 <HAL_GPIO_Init+0x354>)
 8000db0:	69bb      	ldr	r3, [r7, #24]
 8000db2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000db4:	4b32      	ldr	r3, [pc, #200]	@ (8000e80 <HAL_GPIO_Init+0x354>)
 8000db6:	68db      	ldr	r3, [r3, #12]
 8000db8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dba:	693b      	ldr	r3, [r7, #16]
 8000dbc:	43db      	mvns	r3, r3
 8000dbe:	69ba      	ldr	r2, [r7, #24]
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d003      	beq.n	8000dd8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000dd0:	69ba      	ldr	r2, [r7, #24]
 8000dd2:	693b      	ldr	r3, [r7, #16]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000dd8:	4a29      	ldr	r2, [pc, #164]	@ (8000e80 <HAL_GPIO_Init+0x354>)
 8000dda:	69bb      	ldr	r3, [r7, #24]
 8000ddc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000dde:	4b28      	ldr	r3, [pc, #160]	@ (8000e80 <HAL_GPIO_Init+0x354>)
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000de4:	693b      	ldr	r3, [r7, #16]
 8000de6:	43db      	mvns	r3, r3
 8000de8:	69ba      	ldr	r2, [r7, #24]
 8000dea:	4013      	ands	r3, r2
 8000dec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d003      	beq.n	8000e02 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000dfa:	69ba      	ldr	r2, [r7, #24]
 8000dfc:	693b      	ldr	r3, [r7, #16]
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e02:	4a1f      	ldr	r2, [pc, #124]	@ (8000e80 <HAL_GPIO_Init+0x354>)
 8000e04:	69bb      	ldr	r3, [r7, #24]
 8000e06:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e08:	4b1d      	ldr	r3, [pc, #116]	@ (8000e80 <HAL_GPIO_Init+0x354>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e0e:	693b      	ldr	r3, [r7, #16]
 8000e10:	43db      	mvns	r3, r3
 8000e12:	69ba      	ldr	r2, [r7, #24]
 8000e14:	4013      	ands	r3, r2
 8000e16:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d003      	beq.n	8000e2c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000e24:	69ba      	ldr	r2, [r7, #24]
 8000e26:	693b      	ldr	r3, [r7, #16]
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e2c:	4a14      	ldr	r2, [pc, #80]	@ (8000e80 <HAL_GPIO_Init+0x354>)
 8000e2e:	69bb      	ldr	r3, [r7, #24]
 8000e30:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	3301      	adds	r3, #1
 8000e36:	61fb      	str	r3, [r7, #28]
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	2b0f      	cmp	r3, #15
 8000e3c:	f67f ae86 	bls.w	8000b4c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000e40:	bf00      	nop
 8000e42:	bf00      	nop
 8000e44:	3724      	adds	r7, #36	@ 0x24
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	40023800 	.word	0x40023800
 8000e54:	40013800 	.word	0x40013800
 8000e58:	40020000 	.word	0x40020000
 8000e5c:	40020400 	.word	0x40020400
 8000e60:	40020800 	.word	0x40020800
 8000e64:	40020c00 	.word	0x40020c00
 8000e68:	40021000 	.word	0x40021000
 8000e6c:	40021400 	.word	0x40021400
 8000e70:	40021800 	.word	0x40021800
 8000e74:	40021c00 	.word	0x40021c00
 8000e78:	40022000 	.word	0x40022000
 8000e7c:	40022400 	.word	0x40022400
 8000e80:	40013c00 	.word	0x40013c00

08000e84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	460b      	mov	r3, r1
 8000e8e:	807b      	strh	r3, [r7, #2]
 8000e90:	4613      	mov	r3, r2
 8000e92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e94:	787b      	ldrb	r3, [r7, #1]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d003      	beq.n	8000ea2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e9a:	887a      	ldrh	r2, [r7, #2]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8000ea0:	e003      	b.n	8000eaa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000ea2:	887b      	ldrh	r3, [r7, #2]
 8000ea4:	041a      	lsls	r2, r3, #16
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	619a      	str	r2, [r3, #24]
}
 8000eaa:	bf00      	nop
 8000eac:	370c      	adds	r7, #12
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
	...

08000eb8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ec2:	4b23      	ldr	r3, [pc, #140]	@ (8000f50 <HAL_PWREx_EnableOverDrive+0x98>)
 8000ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ec6:	4a22      	ldr	r2, [pc, #136]	@ (8000f50 <HAL_PWREx_EnableOverDrive+0x98>)
 8000ec8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ecc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ece:	4b20      	ldr	r3, [pc, #128]	@ (8000f50 <HAL_PWREx_EnableOverDrive+0x98>)
 8000ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ed2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ed6:	603b      	str	r3, [r7, #0]
 8000ed8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000eda:	4b1e      	ldr	r3, [pc, #120]	@ (8000f54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a1d      	ldr	r2, [pc, #116]	@ (8000f54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000ee0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ee4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ee6:	f7ff fd2f 	bl	8000948 <HAL_GetTick>
 8000eea:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000eec:	e009      	b.n	8000f02 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000eee:	f7ff fd2b 	bl	8000948 <HAL_GetTick>
 8000ef2:	4602      	mov	r2, r0
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	1ad3      	subs	r3, r2, r3
 8000ef8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000efc:	d901      	bls.n	8000f02 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8000efe:	2303      	movs	r3, #3
 8000f00:	e022      	b.n	8000f48 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000f02:	4b14      	ldr	r3, [pc, #80]	@ (8000f54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f0e:	d1ee      	bne.n	8000eee <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000f10:	4b10      	ldr	r3, [pc, #64]	@ (8000f54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a0f      	ldr	r2, [pc, #60]	@ (8000f54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000f16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f1a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f1c:	f7ff fd14 	bl	8000948 <HAL_GetTick>
 8000f20:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000f22:	e009      	b.n	8000f38 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000f24:	f7ff fd10 	bl	8000948 <HAL_GetTick>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	1ad3      	subs	r3, r2, r3
 8000f2e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000f32:	d901      	bls.n	8000f38 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8000f34:	2303      	movs	r3, #3
 8000f36:	e007      	b.n	8000f48 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000f38:	4b06      	ldr	r3, [pc, #24]	@ (8000f54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f40:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8000f44:	d1ee      	bne.n	8000f24 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8000f46:	2300      	movs	r3, #0
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3708      	adds	r7, #8
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	40023800 	.word	0x40023800
 8000f54:	40007000 	.word	0x40007000

08000f58 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b086      	sub	sp, #24
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8000f60:	2300      	movs	r3, #0
 8000f62:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d101      	bne.n	8000f6e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e291      	b.n	8001492 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f003 0301 	and.w	r3, r3, #1
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	f000 8087 	beq.w	800108a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f7c:	4b96      	ldr	r3, [pc, #600]	@ (80011d8 <HAL_RCC_OscConfig+0x280>)
 8000f7e:	689b      	ldr	r3, [r3, #8]
 8000f80:	f003 030c 	and.w	r3, r3, #12
 8000f84:	2b04      	cmp	r3, #4
 8000f86:	d00c      	beq.n	8000fa2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f88:	4b93      	ldr	r3, [pc, #588]	@ (80011d8 <HAL_RCC_OscConfig+0x280>)
 8000f8a:	689b      	ldr	r3, [r3, #8]
 8000f8c:	f003 030c 	and.w	r3, r3, #12
 8000f90:	2b08      	cmp	r3, #8
 8000f92:	d112      	bne.n	8000fba <HAL_RCC_OscConfig+0x62>
 8000f94:	4b90      	ldr	r3, [pc, #576]	@ (80011d8 <HAL_RCC_OscConfig+0x280>)
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f9c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8000fa0:	d10b      	bne.n	8000fba <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fa2:	4b8d      	ldr	r3, [pc, #564]	@ (80011d8 <HAL_RCC_OscConfig+0x280>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d06c      	beq.n	8001088 <HAL_RCC_OscConfig+0x130>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d168      	bne.n	8001088 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e26b      	b.n	8001492 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000fc2:	d106      	bne.n	8000fd2 <HAL_RCC_OscConfig+0x7a>
 8000fc4:	4b84      	ldr	r3, [pc, #528]	@ (80011d8 <HAL_RCC_OscConfig+0x280>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a83      	ldr	r2, [pc, #524]	@ (80011d8 <HAL_RCC_OscConfig+0x280>)
 8000fca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fce:	6013      	str	r3, [r2, #0]
 8000fd0:	e02e      	b.n	8001030 <HAL_RCC_OscConfig+0xd8>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d10c      	bne.n	8000ff4 <HAL_RCC_OscConfig+0x9c>
 8000fda:	4b7f      	ldr	r3, [pc, #508]	@ (80011d8 <HAL_RCC_OscConfig+0x280>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a7e      	ldr	r2, [pc, #504]	@ (80011d8 <HAL_RCC_OscConfig+0x280>)
 8000fe0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000fe4:	6013      	str	r3, [r2, #0]
 8000fe6:	4b7c      	ldr	r3, [pc, #496]	@ (80011d8 <HAL_RCC_OscConfig+0x280>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4a7b      	ldr	r2, [pc, #492]	@ (80011d8 <HAL_RCC_OscConfig+0x280>)
 8000fec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ff0:	6013      	str	r3, [r2, #0]
 8000ff2:	e01d      	b.n	8001030 <HAL_RCC_OscConfig+0xd8>
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000ffc:	d10c      	bne.n	8001018 <HAL_RCC_OscConfig+0xc0>
 8000ffe:	4b76      	ldr	r3, [pc, #472]	@ (80011d8 <HAL_RCC_OscConfig+0x280>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a75      	ldr	r2, [pc, #468]	@ (80011d8 <HAL_RCC_OscConfig+0x280>)
 8001004:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001008:	6013      	str	r3, [r2, #0]
 800100a:	4b73      	ldr	r3, [pc, #460]	@ (80011d8 <HAL_RCC_OscConfig+0x280>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a72      	ldr	r2, [pc, #456]	@ (80011d8 <HAL_RCC_OscConfig+0x280>)
 8001010:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001014:	6013      	str	r3, [r2, #0]
 8001016:	e00b      	b.n	8001030 <HAL_RCC_OscConfig+0xd8>
 8001018:	4b6f      	ldr	r3, [pc, #444]	@ (80011d8 <HAL_RCC_OscConfig+0x280>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a6e      	ldr	r2, [pc, #440]	@ (80011d8 <HAL_RCC_OscConfig+0x280>)
 800101e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001022:	6013      	str	r3, [r2, #0]
 8001024:	4b6c      	ldr	r3, [pc, #432]	@ (80011d8 <HAL_RCC_OscConfig+0x280>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a6b      	ldr	r2, [pc, #428]	@ (80011d8 <HAL_RCC_OscConfig+0x280>)
 800102a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800102e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d013      	beq.n	8001060 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001038:	f7ff fc86 	bl	8000948 <HAL_GetTick>
 800103c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800103e:	e008      	b.n	8001052 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001040:	f7ff fc82 	bl	8000948 <HAL_GetTick>
 8001044:	4602      	mov	r2, r0
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	2b64      	cmp	r3, #100	@ 0x64
 800104c:	d901      	bls.n	8001052 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800104e:	2303      	movs	r3, #3
 8001050:	e21f      	b.n	8001492 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001052:	4b61      	ldr	r3, [pc, #388]	@ (80011d8 <HAL_RCC_OscConfig+0x280>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800105a:	2b00      	cmp	r3, #0
 800105c:	d0f0      	beq.n	8001040 <HAL_RCC_OscConfig+0xe8>
 800105e:	e014      	b.n	800108a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001060:	f7ff fc72 	bl	8000948 <HAL_GetTick>
 8001064:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001066:	e008      	b.n	800107a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001068:	f7ff fc6e 	bl	8000948 <HAL_GetTick>
 800106c:	4602      	mov	r2, r0
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	2b64      	cmp	r3, #100	@ 0x64
 8001074:	d901      	bls.n	800107a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001076:	2303      	movs	r3, #3
 8001078:	e20b      	b.n	8001492 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800107a:	4b57      	ldr	r3, [pc, #348]	@ (80011d8 <HAL_RCC_OscConfig+0x280>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001082:	2b00      	cmp	r3, #0
 8001084:	d1f0      	bne.n	8001068 <HAL_RCC_OscConfig+0x110>
 8001086:	e000      	b.n	800108a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001088:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f003 0302 	and.w	r3, r3, #2
 8001092:	2b00      	cmp	r3, #0
 8001094:	d069      	beq.n	800116a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001096:	4b50      	ldr	r3, [pc, #320]	@ (80011d8 <HAL_RCC_OscConfig+0x280>)
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	f003 030c 	and.w	r3, r3, #12
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d00b      	beq.n	80010ba <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010a2:	4b4d      	ldr	r3, [pc, #308]	@ (80011d8 <HAL_RCC_OscConfig+0x280>)
 80010a4:	689b      	ldr	r3, [r3, #8]
 80010a6:	f003 030c 	and.w	r3, r3, #12
 80010aa:	2b08      	cmp	r3, #8
 80010ac:	d11c      	bne.n	80010e8 <HAL_RCC_OscConfig+0x190>
 80010ae:	4b4a      	ldr	r3, [pc, #296]	@ (80011d8 <HAL_RCC_OscConfig+0x280>)
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d116      	bne.n	80010e8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010ba:	4b47      	ldr	r3, [pc, #284]	@ (80011d8 <HAL_RCC_OscConfig+0x280>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f003 0302 	and.w	r3, r3, #2
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d005      	beq.n	80010d2 <HAL_RCC_OscConfig+0x17a>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	68db      	ldr	r3, [r3, #12]
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d001      	beq.n	80010d2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e1df      	b.n	8001492 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010d2:	4b41      	ldr	r3, [pc, #260]	@ (80011d8 <HAL_RCC_OscConfig+0x280>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	691b      	ldr	r3, [r3, #16]
 80010de:	00db      	lsls	r3, r3, #3
 80010e0:	493d      	ldr	r1, [pc, #244]	@ (80011d8 <HAL_RCC_OscConfig+0x280>)
 80010e2:	4313      	orrs	r3, r2
 80010e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010e6:	e040      	b.n	800116a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d023      	beq.n	8001138 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010f0:	4b39      	ldr	r3, [pc, #228]	@ (80011d8 <HAL_RCC_OscConfig+0x280>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a38      	ldr	r2, [pc, #224]	@ (80011d8 <HAL_RCC_OscConfig+0x280>)
 80010f6:	f043 0301 	orr.w	r3, r3, #1
 80010fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010fc:	f7ff fc24 	bl	8000948 <HAL_GetTick>
 8001100:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001102:	e008      	b.n	8001116 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001104:	f7ff fc20 	bl	8000948 <HAL_GetTick>
 8001108:	4602      	mov	r2, r0
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	2b02      	cmp	r3, #2
 8001110:	d901      	bls.n	8001116 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001112:	2303      	movs	r3, #3
 8001114:	e1bd      	b.n	8001492 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001116:	4b30      	ldr	r3, [pc, #192]	@ (80011d8 <HAL_RCC_OscConfig+0x280>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f003 0302 	and.w	r3, r3, #2
 800111e:	2b00      	cmp	r3, #0
 8001120:	d0f0      	beq.n	8001104 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001122:	4b2d      	ldr	r3, [pc, #180]	@ (80011d8 <HAL_RCC_OscConfig+0x280>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	691b      	ldr	r3, [r3, #16]
 800112e:	00db      	lsls	r3, r3, #3
 8001130:	4929      	ldr	r1, [pc, #164]	@ (80011d8 <HAL_RCC_OscConfig+0x280>)
 8001132:	4313      	orrs	r3, r2
 8001134:	600b      	str	r3, [r1, #0]
 8001136:	e018      	b.n	800116a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001138:	4b27      	ldr	r3, [pc, #156]	@ (80011d8 <HAL_RCC_OscConfig+0x280>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a26      	ldr	r2, [pc, #152]	@ (80011d8 <HAL_RCC_OscConfig+0x280>)
 800113e:	f023 0301 	bic.w	r3, r3, #1
 8001142:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001144:	f7ff fc00 	bl	8000948 <HAL_GetTick>
 8001148:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800114a:	e008      	b.n	800115e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800114c:	f7ff fbfc 	bl	8000948 <HAL_GetTick>
 8001150:	4602      	mov	r2, r0
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	2b02      	cmp	r3, #2
 8001158:	d901      	bls.n	800115e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800115a:	2303      	movs	r3, #3
 800115c:	e199      	b.n	8001492 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800115e:	4b1e      	ldr	r3, [pc, #120]	@ (80011d8 <HAL_RCC_OscConfig+0x280>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f003 0302 	and.w	r3, r3, #2
 8001166:	2b00      	cmp	r3, #0
 8001168:	d1f0      	bne.n	800114c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 0308 	and.w	r3, r3, #8
 8001172:	2b00      	cmp	r3, #0
 8001174:	d038      	beq.n	80011e8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	695b      	ldr	r3, [r3, #20]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d019      	beq.n	80011b2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800117e:	4b16      	ldr	r3, [pc, #88]	@ (80011d8 <HAL_RCC_OscConfig+0x280>)
 8001180:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001182:	4a15      	ldr	r2, [pc, #84]	@ (80011d8 <HAL_RCC_OscConfig+0x280>)
 8001184:	f043 0301 	orr.w	r3, r3, #1
 8001188:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800118a:	f7ff fbdd 	bl	8000948 <HAL_GetTick>
 800118e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001190:	e008      	b.n	80011a4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001192:	f7ff fbd9 	bl	8000948 <HAL_GetTick>
 8001196:	4602      	mov	r2, r0
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	1ad3      	subs	r3, r2, r3
 800119c:	2b02      	cmp	r3, #2
 800119e:	d901      	bls.n	80011a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80011a0:	2303      	movs	r3, #3
 80011a2:	e176      	b.n	8001492 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011a4:	4b0c      	ldr	r3, [pc, #48]	@ (80011d8 <HAL_RCC_OscConfig+0x280>)
 80011a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80011a8:	f003 0302 	and.w	r3, r3, #2
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d0f0      	beq.n	8001192 <HAL_RCC_OscConfig+0x23a>
 80011b0:	e01a      	b.n	80011e8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011b2:	4b09      	ldr	r3, [pc, #36]	@ (80011d8 <HAL_RCC_OscConfig+0x280>)
 80011b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80011b6:	4a08      	ldr	r2, [pc, #32]	@ (80011d8 <HAL_RCC_OscConfig+0x280>)
 80011b8:	f023 0301 	bic.w	r3, r3, #1
 80011bc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011be:	f7ff fbc3 	bl	8000948 <HAL_GetTick>
 80011c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011c4:	e00a      	b.n	80011dc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011c6:	f7ff fbbf 	bl	8000948 <HAL_GetTick>
 80011ca:	4602      	mov	r2, r0
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	1ad3      	subs	r3, r2, r3
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	d903      	bls.n	80011dc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80011d4:	2303      	movs	r3, #3
 80011d6:	e15c      	b.n	8001492 <HAL_RCC_OscConfig+0x53a>
 80011d8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011dc:	4b91      	ldr	r3, [pc, #580]	@ (8001424 <HAL_RCC_OscConfig+0x4cc>)
 80011de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80011e0:	f003 0302 	and.w	r3, r3, #2
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d1ee      	bne.n	80011c6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f003 0304 	and.w	r3, r3, #4
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	f000 80a4 	beq.w	800133e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011f6:	4b8b      	ldr	r3, [pc, #556]	@ (8001424 <HAL_RCC_OscConfig+0x4cc>)
 80011f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d10d      	bne.n	800121e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001202:	4b88      	ldr	r3, [pc, #544]	@ (8001424 <HAL_RCC_OscConfig+0x4cc>)
 8001204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001206:	4a87      	ldr	r2, [pc, #540]	@ (8001424 <HAL_RCC_OscConfig+0x4cc>)
 8001208:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800120c:	6413      	str	r3, [r2, #64]	@ 0x40
 800120e:	4b85      	ldr	r3, [pc, #532]	@ (8001424 <HAL_RCC_OscConfig+0x4cc>)
 8001210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001212:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001216:	60bb      	str	r3, [r7, #8]
 8001218:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800121a:	2301      	movs	r3, #1
 800121c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800121e:	4b82      	ldr	r3, [pc, #520]	@ (8001428 <HAL_RCC_OscConfig+0x4d0>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001226:	2b00      	cmp	r3, #0
 8001228:	d118      	bne.n	800125c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800122a:	4b7f      	ldr	r3, [pc, #508]	@ (8001428 <HAL_RCC_OscConfig+0x4d0>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a7e      	ldr	r2, [pc, #504]	@ (8001428 <HAL_RCC_OscConfig+0x4d0>)
 8001230:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001234:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001236:	f7ff fb87 	bl	8000948 <HAL_GetTick>
 800123a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800123c:	e008      	b.n	8001250 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800123e:	f7ff fb83 	bl	8000948 <HAL_GetTick>
 8001242:	4602      	mov	r2, r0
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	1ad3      	subs	r3, r2, r3
 8001248:	2b64      	cmp	r3, #100	@ 0x64
 800124a:	d901      	bls.n	8001250 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800124c:	2303      	movs	r3, #3
 800124e:	e120      	b.n	8001492 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001250:	4b75      	ldr	r3, [pc, #468]	@ (8001428 <HAL_RCC_OscConfig+0x4d0>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001258:	2b00      	cmp	r3, #0
 800125a:	d0f0      	beq.n	800123e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	2b01      	cmp	r3, #1
 8001262:	d106      	bne.n	8001272 <HAL_RCC_OscConfig+0x31a>
 8001264:	4b6f      	ldr	r3, [pc, #444]	@ (8001424 <HAL_RCC_OscConfig+0x4cc>)
 8001266:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001268:	4a6e      	ldr	r2, [pc, #440]	@ (8001424 <HAL_RCC_OscConfig+0x4cc>)
 800126a:	f043 0301 	orr.w	r3, r3, #1
 800126e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001270:	e02d      	b.n	80012ce <HAL_RCC_OscConfig+0x376>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d10c      	bne.n	8001294 <HAL_RCC_OscConfig+0x33c>
 800127a:	4b6a      	ldr	r3, [pc, #424]	@ (8001424 <HAL_RCC_OscConfig+0x4cc>)
 800127c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800127e:	4a69      	ldr	r2, [pc, #420]	@ (8001424 <HAL_RCC_OscConfig+0x4cc>)
 8001280:	f023 0301 	bic.w	r3, r3, #1
 8001284:	6713      	str	r3, [r2, #112]	@ 0x70
 8001286:	4b67      	ldr	r3, [pc, #412]	@ (8001424 <HAL_RCC_OscConfig+0x4cc>)
 8001288:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800128a:	4a66      	ldr	r2, [pc, #408]	@ (8001424 <HAL_RCC_OscConfig+0x4cc>)
 800128c:	f023 0304 	bic.w	r3, r3, #4
 8001290:	6713      	str	r3, [r2, #112]	@ 0x70
 8001292:	e01c      	b.n	80012ce <HAL_RCC_OscConfig+0x376>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	2b05      	cmp	r3, #5
 800129a:	d10c      	bne.n	80012b6 <HAL_RCC_OscConfig+0x35e>
 800129c:	4b61      	ldr	r3, [pc, #388]	@ (8001424 <HAL_RCC_OscConfig+0x4cc>)
 800129e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012a0:	4a60      	ldr	r2, [pc, #384]	@ (8001424 <HAL_RCC_OscConfig+0x4cc>)
 80012a2:	f043 0304 	orr.w	r3, r3, #4
 80012a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80012a8:	4b5e      	ldr	r3, [pc, #376]	@ (8001424 <HAL_RCC_OscConfig+0x4cc>)
 80012aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012ac:	4a5d      	ldr	r2, [pc, #372]	@ (8001424 <HAL_RCC_OscConfig+0x4cc>)
 80012ae:	f043 0301 	orr.w	r3, r3, #1
 80012b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80012b4:	e00b      	b.n	80012ce <HAL_RCC_OscConfig+0x376>
 80012b6:	4b5b      	ldr	r3, [pc, #364]	@ (8001424 <HAL_RCC_OscConfig+0x4cc>)
 80012b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012ba:	4a5a      	ldr	r2, [pc, #360]	@ (8001424 <HAL_RCC_OscConfig+0x4cc>)
 80012bc:	f023 0301 	bic.w	r3, r3, #1
 80012c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80012c2:	4b58      	ldr	r3, [pc, #352]	@ (8001424 <HAL_RCC_OscConfig+0x4cc>)
 80012c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012c6:	4a57      	ldr	r2, [pc, #348]	@ (8001424 <HAL_RCC_OscConfig+0x4cc>)
 80012c8:	f023 0304 	bic.w	r3, r3, #4
 80012cc:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d015      	beq.n	8001302 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012d6:	f7ff fb37 	bl	8000948 <HAL_GetTick>
 80012da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012dc:	e00a      	b.n	80012f4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012de:	f7ff fb33 	bl	8000948 <HAL_GetTick>
 80012e2:	4602      	mov	r2, r0
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	1ad3      	subs	r3, r2, r3
 80012e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d901      	bls.n	80012f4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80012f0:	2303      	movs	r3, #3
 80012f2:	e0ce      	b.n	8001492 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012f4:	4b4b      	ldr	r3, [pc, #300]	@ (8001424 <HAL_RCC_OscConfig+0x4cc>)
 80012f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80012f8:	f003 0302 	and.w	r3, r3, #2
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d0ee      	beq.n	80012de <HAL_RCC_OscConfig+0x386>
 8001300:	e014      	b.n	800132c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001302:	f7ff fb21 	bl	8000948 <HAL_GetTick>
 8001306:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001308:	e00a      	b.n	8001320 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800130a:	f7ff fb1d 	bl	8000948 <HAL_GetTick>
 800130e:	4602      	mov	r2, r0
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	1ad3      	subs	r3, r2, r3
 8001314:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001318:	4293      	cmp	r3, r2
 800131a:	d901      	bls.n	8001320 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800131c:	2303      	movs	r3, #3
 800131e:	e0b8      	b.n	8001492 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001320:	4b40      	ldr	r3, [pc, #256]	@ (8001424 <HAL_RCC_OscConfig+0x4cc>)
 8001322:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001324:	f003 0302 	and.w	r3, r3, #2
 8001328:	2b00      	cmp	r3, #0
 800132a:	d1ee      	bne.n	800130a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800132c:	7dfb      	ldrb	r3, [r7, #23]
 800132e:	2b01      	cmp	r3, #1
 8001330:	d105      	bne.n	800133e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001332:	4b3c      	ldr	r3, [pc, #240]	@ (8001424 <HAL_RCC_OscConfig+0x4cc>)
 8001334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001336:	4a3b      	ldr	r2, [pc, #236]	@ (8001424 <HAL_RCC_OscConfig+0x4cc>)
 8001338:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800133c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	699b      	ldr	r3, [r3, #24]
 8001342:	2b00      	cmp	r3, #0
 8001344:	f000 80a4 	beq.w	8001490 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001348:	4b36      	ldr	r3, [pc, #216]	@ (8001424 <HAL_RCC_OscConfig+0x4cc>)
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	f003 030c 	and.w	r3, r3, #12
 8001350:	2b08      	cmp	r3, #8
 8001352:	d06b      	beq.n	800142c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	699b      	ldr	r3, [r3, #24]
 8001358:	2b02      	cmp	r3, #2
 800135a:	d149      	bne.n	80013f0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800135c:	4b31      	ldr	r3, [pc, #196]	@ (8001424 <HAL_RCC_OscConfig+0x4cc>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a30      	ldr	r2, [pc, #192]	@ (8001424 <HAL_RCC_OscConfig+0x4cc>)
 8001362:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001366:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001368:	f7ff faee 	bl	8000948 <HAL_GetTick>
 800136c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800136e:	e008      	b.n	8001382 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001370:	f7ff faea 	bl	8000948 <HAL_GetTick>
 8001374:	4602      	mov	r2, r0
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	2b02      	cmp	r3, #2
 800137c:	d901      	bls.n	8001382 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	e087      	b.n	8001492 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001382:	4b28      	ldr	r3, [pc, #160]	@ (8001424 <HAL_RCC_OscConfig+0x4cc>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d1f0      	bne.n	8001370 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	69da      	ldr	r2, [r3, #28]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6a1b      	ldr	r3, [r3, #32]
 8001396:	431a      	orrs	r2, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800139c:	019b      	lsls	r3, r3, #6
 800139e:	431a      	orrs	r2, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013a4:	085b      	lsrs	r3, r3, #1
 80013a6:	3b01      	subs	r3, #1
 80013a8:	041b      	lsls	r3, r3, #16
 80013aa:	431a      	orrs	r2, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013b0:	061b      	lsls	r3, r3, #24
 80013b2:	4313      	orrs	r3, r2
 80013b4:	4a1b      	ldr	r2, [pc, #108]	@ (8001424 <HAL_RCC_OscConfig+0x4cc>)
 80013b6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80013ba:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013bc:	4b19      	ldr	r3, [pc, #100]	@ (8001424 <HAL_RCC_OscConfig+0x4cc>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a18      	ldr	r2, [pc, #96]	@ (8001424 <HAL_RCC_OscConfig+0x4cc>)
 80013c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80013c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013c8:	f7ff fabe 	bl	8000948 <HAL_GetTick>
 80013cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013ce:	e008      	b.n	80013e2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013d0:	f7ff faba 	bl	8000948 <HAL_GetTick>
 80013d4:	4602      	mov	r2, r0
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d901      	bls.n	80013e2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	e057      	b.n	8001492 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013e2:	4b10      	ldr	r3, [pc, #64]	@ (8001424 <HAL_RCC_OscConfig+0x4cc>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d0f0      	beq.n	80013d0 <HAL_RCC_OscConfig+0x478>
 80013ee:	e04f      	b.n	8001490 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001424 <HAL_RCC_OscConfig+0x4cc>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a0b      	ldr	r2, [pc, #44]	@ (8001424 <HAL_RCC_OscConfig+0x4cc>)
 80013f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80013fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013fc:	f7ff faa4 	bl	8000948 <HAL_GetTick>
 8001400:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001402:	e008      	b.n	8001416 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001404:	f7ff faa0 	bl	8000948 <HAL_GetTick>
 8001408:	4602      	mov	r2, r0
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	2b02      	cmp	r3, #2
 8001410:	d901      	bls.n	8001416 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001412:	2303      	movs	r3, #3
 8001414:	e03d      	b.n	8001492 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001416:	4b03      	ldr	r3, [pc, #12]	@ (8001424 <HAL_RCC_OscConfig+0x4cc>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d1f0      	bne.n	8001404 <HAL_RCC_OscConfig+0x4ac>
 8001422:	e035      	b.n	8001490 <HAL_RCC_OscConfig+0x538>
 8001424:	40023800 	.word	0x40023800
 8001428:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800142c:	4b1b      	ldr	r3, [pc, #108]	@ (800149c <HAL_RCC_OscConfig+0x544>)
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	699b      	ldr	r3, [r3, #24]
 8001436:	2b01      	cmp	r3, #1
 8001438:	d028      	beq.n	800148c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001444:	429a      	cmp	r2, r3
 8001446:	d121      	bne.n	800148c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001452:	429a      	cmp	r2, r3
 8001454:	d11a      	bne.n	800148c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001456:	68fa      	ldr	r2, [r7, #12]
 8001458:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800145c:	4013      	ands	r3, r2
 800145e:	687a      	ldr	r2, [r7, #4]
 8001460:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001462:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001464:	4293      	cmp	r3, r2
 8001466:	d111      	bne.n	800148c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001472:	085b      	lsrs	r3, r3, #1
 8001474:	3b01      	subs	r3, #1
 8001476:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001478:	429a      	cmp	r2, r3
 800147a:	d107      	bne.n	800148c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001486:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001488:	429a      	cmp	r2, r3
 800148a:	d001      	beq.n	8001490 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	e000      	b.n	8001492 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001490:	2300      	movs	r3, #0
}
 8001492:	4618      	mov	r0, r3
 8001494:	3718      	adds	r7, #24
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	40023800 	.word	0x40023800

080014a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80014aa:	2300      	movs	r3, #0
 80014ac:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d101      	bne.n	80014b8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	e0d0      	b.n	800165a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80014b8:	4b6a      	ldr	r3, [pc, #424]	@ (8001664 <HAL_RCC_ClockConfig+0x1c4>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f003 030f 	and.w	r3, r3, #15
 80014c0:	683a      	ldr	r2, [r7, #0]
 80014c2:	429a      	cmp	r2, r3
 80014c4:	d910      	bls.n	80014e8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014c6:	4b67      	ldr	r3, [pc, #412]	@ (8001664 <HAL_RCC_ClockConfig+0x1c4>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f023 020f 	bic.w	r2, r3, #15
 80014ce:	4965      	ldr	r1, [pc, #404]	@ (8001664 <HAL_RCC_ClockConfig+0x1c4>)
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014d6:	4b63      	ldr	r3, [pc, #396]	@ (8001664 <HAL_RCC_ClockConfig+0x1c4>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 030f 	and.w	r3, r3, #15
 80014de:	683a      	ldr	r2, [r7, #0]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d001      	beq.n	80014e8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	e0b8      	b.n	800165a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 0302 	and.w	r3, r3, #2
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d020      	beq.n	8001536 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 0304 	and.w	r3, r3, #4
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d005      	beq.n	800150c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001500:	4b59      	ldr	r3, [pc, #356]	@ (8001668 <HAL_RCC_ClockConfig+0x1c8>)
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	4a58      	ldr	r2, [pc, #352]	@ (8001668 <HAL_RCC_ClockConfig+0x1c8>)
 8001506:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800150a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f003 0308 	and.w	r3, r3, #8
 8001514:	2b00      	cmp	r3, #0
 8001516:	d005      	beq.n	8001524 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001518:	4b53      	ldr	r3, [pc, #332]	@ (8001668 <HAL_RCC_ClockConfig+0x1c8>)
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	4a52      	ldr	r2, [pc, #328]	@ (8001668 <HAL_RCC_ClockConfig+0x1c8>)
 800151e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001522:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001524:	4b50      	ldr	r3, [pc, #320]	@ (8001668 <HAL_RCC_ClockConfig+0x1c8>)
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	494d      	ldr	r1, [pc, #308]	@ (8001668 <HAL_RCC_ClockConfig+0x1c8>)
 8001532:	4313      	orrs	r3, r2
 8001534:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0301 	and.w	r3, r3, #1
 800153e:	2b00      	cmp	r3, #0
 8001540:	d040      	beq.n	80015c4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	2b01      	cmp	r3, #1
 8001548:	d107      	bne.n	800155a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800154a:	4b47      	ldr	r3, [pc, #284]	@ (8001668 <HAL_RCC_ClockConfig+0x1c8>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d115      	bne.n	8001582 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e07f      	b.n	800165a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	2b02      	cmp	r3, #2
 8001560:	d107      	bne.n	8001572 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001562:	4b41      	ldr	r3, [pc, #260]	@ (8001668 <HAL_RCC_ClockConfig+0x1c8>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d109      	bne.n	8001582 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e073      	b.n	800165a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001572:	4b3d      	ldr	r3, [pc, #244]	@ (8001668 <HAL_RCC_ClockConfig+0x1c8>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 0302 	and.w	r3, r3, #2
 800157a:	2b00      	cmp	r3, #0
 800157c:	d101      	bne.n	8001582 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e06b      	b.n	800165a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001582:	4b39      	ldr	r3, [pc, #228]	@ (8001668 <HAL_RCC_ClockConfig+0x1c8>)
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	f023 0203 	bic.w	r2, r3, #3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	4936      	ldr	r1, [pc, #216]	@ (8001668 <HAL_RCC_ClockConfig+0x1c8>)
 8001590:	4313      	orrs	r3, r2
 8001592:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001594:	f7ff f9d8 	bl	8000948 <HAL_GetTick>
 8001598:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800159a:	e00a      	b.n	80015b2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800159c:	f7ff f9d4 	bl	8000948 <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d901      	bls.n	80015b2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e053      	b.n	800165a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015b2:	4b2d      	ldr	r3, [pc, #180]	@ (8001668 <HAL_RCC_ClockConfig+0x1c8>)
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	f003 020c 	and.w	r2, r3, #12
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d1eb      	bne.n	800159c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80015c4:	4b27      	ldr	r3, [pc, #156]	@ (8001664 <HAL_RCC_ClockConfig+0x1c4>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 030f 	and.w	r3, r3, #15
 80015cc:	683a      	ldr	r2, [r7, #0]
 80015ce:	429a      	cmp	r2, r3
 80015d0:	d210      	bcs.n	80015f4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015d2:	4b24      	ldr	r3, [pc, #144]	@ (8001664 <HAL_RCC_ClockConfig+0x1c4>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f023 020f 	bic.w	r2, r3, #15
 80015da:	4922      	ldr	r1, [pc, #136]	@ (8001664 <HAL_RCC_ClockConfig+0x1c4>)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	4313      	orrs	r3, r2
 80015e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015e2:	4b20      	ldr	r3, [pc, #128]	@ (8001664 <HAL_RCC_ClockConfig+0x1c4>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 030f 	and.w	r3, r3, #15
 80015ea:	683a      	ldr	r2, [r7, #0]
 80015ec:	429a      	cmp	r2, r3
 80015ee:	d001      	beq.n	80015f4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e032      	b.n	800165a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0304 	and.w	r3, r3, #4
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d008      	beq.n	8001612 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001600:	4b19      	ldr	r3, [pc, #100]	@ (8001668 <HAL_RCC_ClockConfig+0x1c8>)
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	4916      	ldr	r1, [pc, #88]	@ (8001668 <HAL_RCC_ClockConfig+0x1c8>)
 800160e:	4313      	orrs	r3, r2
 8001610:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0308 	and.w	r3, r3, #8
 800161a:	2b00      	cmp	r3, #0
 800161c:	d009      	beq.n	8001632 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800161e:	4b12      	ldr	r3, [pc, #72]	@ (8001668 <HAL_RCC_ClockConfig+0x1c8>)
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	691b      	ldr	r3, [r3, #16]
 800162a:	00db      	lsls	r3, r3, #3
 800162c:	490e      	ldr	r1, [pc, #56]	@ (8001668 <HAL_RCC_ClockConfig+0x1c8>)
 800162e:	4313      	orrs	r3, r2
 8001630:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001632:	f000 f821 	bl	8001678 <HAL_RCC_GetSysClockFreq>
 8001636:	4602      	mov	r2, r0
 8001638:	4b0b      	ldr	r3, [pc, #44]	@ (8001668 <HAL_RCC_ClockConfig+0x1c8>)
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	091b      	lsrs	r3, r3, #4
 800163e:	f003 030f 	and.w	r3, r3, #15
 8001642:	490a      	ldr	r1, [pc, #40]	@ (800166c <HAL_RCC_ClockConfig+0x1cc>)
 8001644:	5ccb      	ldrb	r3, [r1, r3]
 8001646:	fa22 f303 	lsr.w	r3, r2, r3
 800164a:	4a09      	ldr	r2, [pc, #36]	@ (8001670 <HAL_RCC_ClockConfig+0x1d0>)
 800164c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800164e:	4b09      	ldr	r3, [pc, #36]	@ (8001674 <HAL_RCC_ClockConfig+0x1d4>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4618      	mov	r0, r3
 8001654:	f7ff f934 	bl	80008c0 <HAL_InitTick>

  return HAL_OK;
 8001658:	2300      	movs	r3, #0
}
 800165a:	4618      	mov	r0, r3
 800165c:	3710      	adds	r7, #16
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	40023c00 	.word	0x40023c00
 8001668:	40023800 	.word	0x40023800
 800166c:	08001874 	.word	0x08001874
 8001670:	20000000 	.word	0x20000000
 8001674:	20000004 	.word	0x20000004

08001678 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001678:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800167c:	b090      	sub	sp, #64	@ 0x40
 800167e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001680:	2300      	movs	r3, #0
 8001682:	637b      	str	r3, [r7, #52]	@ 0x34
 8001684:	2300      	movs	r3, #0
 8001686:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001688:	2300      	movs	r3, #0
 800168a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 800168c:	2300      	movs	r3, #0
 800168e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001690:	4b59      	ldr	r3, [pc, #356]	@ (80017f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	f003 030c 	and.w	r3, r3, #12
 8001698:	2b08      	cmp	r3, #8
 800169a:	d00d      	beq.n	80016b8 <HAL_RCC_GetSysClockFreq+0x40>
 800169c:	2b08      	cmp	r3, #8
 800169e:	f200 80a1 	bhi.w	80017e4 <HAL_RCC_GetSysClockFreq+0x16c>
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d002      	beq.n	80016ac <HAL_RCC_GetSysClockFreq+0x34>
 80016a6:	2b04      	cmp	r3, #4
 80016a8:	d003      	beq.n	80016b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80016aa:	e09b      	b.n	80017e4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80016ac:	4b53      	ldr	r3, [pc, #332]	@ (80017fc <HAL_RCC_GetSysClockFreq+0x184>)
 80016ae:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80016b0:	e09b      	b.n	80017ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80016b2:	4b53      	ldr	r3, [pc, #332]	@ (8001800 <HAL_RCC_GetSysClockFreq+0x188>)
 80016b4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80016b6:	e098      	b.n	80017ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016b8:	4b4f      	ldr	r3, [pc, #316]	@ (80017f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80016c0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80016c2:	4b4d      	ldr	r3, [pc, #308]	@ (80017f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d028      	beq.n	8001720 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016ce:	4b4a      	ldr	r3, [pc, #296]	@ (80017f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	099b      	lsrs	r3, r3, #6
 80016d4:	2200      	movs	r2, #0
 80016d6:	623b      	str	r3, [r7, #32]
 80016d8:	627a      	str	r2, [r7, #36]	@ 0x24
 80016da:	6a3b      	ldr	r3, [r7, #32]
 80016dc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80016e0:	2100      	movs	r1, #0
 80016e2:	4b47      	ldr	r3, [pc, #284]	@ (8001800 <HAL_RCC_GetSysClockFreq+0x188>)
 80016e4:	fb03 f201 	mul.w	r2, r3, r1
 80016e8:	2300      	movs	r3, #0
 80016ea:	fb00 f303 	mul.w	r3, r0, r3
 80016ee:	4413      	add	r3, r2
 80016f0:	4a43      	ldr	r2, [pc, #268]	@ (8001800 <HAL_RCC_GetSysClockFreq+0x188>)
 80016f2:	fba0 1202 	umull	r1, r2, r0, r2
 80016f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80016f8:	460a      	mov	r2, r1
 80016fa:	62ba      	str	r2, [r7, #40]	@ 0x28
 80016fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80016fe:	4413      	add	r3, r2
 8001700:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001702:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001704:	2200      	movs	r2, #0
 8001706:	61bb      	str	r3, [r7, #24]
 8001708:	61fa      	str	r2, [r7, #28]
 800170a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800170e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001712:	f7fe fd79 	bl	8000208 <__aeabi_uldivmod>
 8001716:	4602      	mov	r2, r0
 8001718:	460b      	mov	r3, r1
 800171a:	4613      	mov	r3, r2
 800171c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800171e:	e053      	b.n	80017c8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001720:	4b35      	ldr	r3, [pc, #212]	@ (80017f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	099b      	lsrs	r3, r3, #6
 8001726:	2200      	movs	r2, #0
 8001728:	613b      	str	r3, [r7, #16]
 800172a:	617a      	str	r2, [r7, #20]
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001732:	f04f 0b00 	mov.w	fp, #0
 8001736:	4652      	mov	r2, sl
 8001738:	465b      	mov	r3, fp
 800173a:	f04f 0000 	mov.w	r0, #0
 800173e:	f04f 0100 	mov.w	r1, #0
 8001742:	0159      	lsls	r1, r3, #5
 8001744:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001748:	0150      	lsls	r0, r2, #5
 800174a:	4602      	mov	r2, r0
 800174c:	460b      	mov	r3, r1
 800174e:	ebb2 080a 	subs.w	r8, r2, sl
 8001752:	eb63 090b 	sbc.w	r9, r3, fp
 8001756:	f04f 0200 	mov.w	r2, #0
 800175a:	f04f 0300 	mov.w	r3, #0
 800175e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001762:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001766:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800176a:	ebb2 0408 	subs.w	r4, r2, r8
 800176e:	eb63 0509 	sbc.w	r5, r3, r9
 8001772:	f04f 0200 	mov.w	r2, #0
 8001776:	f04f 0300 	mov.w	r3, #0
 800177a:	00eb      	lsls	r3, r5, #3
 800177c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001780:	00e2      	lsls	r2, r4, #3
 8001782:	4614      	mov	r4, r2
 8001784:	461d      	mov	r5, r3
 8001786:	eb14 030a 	adds.w	r3, r4, sl
 800178a:	603b      	str	r3, [r7, #0]
 800178c:	eb45 030b 	adc.w	r3, r5, fp
 8001790:	607b      	str	r3, [r7, #4]
 8001792:	f04f 0200 	mov.w	r2, #0
 8001796:	f04f 0300 	mov.w	r3, #0
 800179a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800179e:	4629      	mov	r1, r5
 80017a0:	028b      	lsls	r3, r1, #10
 80017a2:	4621      	mov	r1, r4
 80017a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80017a8:	4621      	mov	r1, r4
 80017aa:	028a      	lsls	r2, r1, #10
 80017ac:	4610      	mov	r0, r2
 80017ae:	4619      	mov	r1, r3
 80017b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017b2:	2200      	movs	r2, #0
 80017b4:	60bb      	str	r3, [r7, #8]
 80017b6:	60fa      	str	r2, [r7, #12]
 80017b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80017bc:	f7fe fd24 	bl	8000208 <__aeabi_uldivmod>
 80017c0:	4602      	mov	r2, r0
 80017c2:	460b      	mov	r3, r1
 80017c4:	4613      	mov	r3, r2
 80017c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80017c8:	4b0b      	ldr	r3, [pc, #44]	@ (80017f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	0c1b      	lsrs	r3, r3, #16
 80017ce:	f003 0303 	and.w	r3, r3, #3
 80017d2:	3301      	adds	r3, #1
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80017d8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80017da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80017dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80017e0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80017e2:	e002      	b.n	80017ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80017e4:	4b05      	ldr	r3, [pc, #20]	@ (80017fc <HAL_RCC_GetSysClockFreq+0x184>)
 80017e6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80017e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3740      	adds	r7, #64	@ 0x40
 80017f0:	46bd      	mov	sp, r7
 80017f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017f6:	bf00      	nop
 80017f8:	40023800 	.word	0x40023800
 80017fc:	00f42400 	.word	0x00f42400
 8001800:	017d7840 	.word	0x017d7840

08001804 <memset>:
 8001804:	4402      	add	r2, r0
 8001806:	4603      	mov	r3, r0
 8001808:	4293      	cmp	r3, r2
 800180a:	d100      	bne.n	800180e <memset+0xa>
 800180c:	4770      	bx	lr
 800180e:	f803 1b01 	strb.w	r1, [r3], #1
 8001812:	e7f9      	b.n	8001808 <memset+0x4>

08001814 <__libc_init_array>:
 8001814:	b570      	push	{r4, r5, r6, lr}
 8001816:	4d0d      	ldr	r5, [pc, #52]	@ (800184c <__libc_init_array+0x38>)
 8001818:	4c0d      	ldr	r4, [pc, #52]	@ (8001850 <__libc_init_array+0x3c>)
 800181a:	1b64      	subs	r4, r4, r5
 800181c:	10a4      	asrs	r4, r4, #2
 800181e:	2600      	movs	r6, #0
 8001820:	42a6      	cmp	r6, r4
 8001822:	d109      	bne.n	8001838 <__libc_init_array+0x24>
 8001824:	4d0b      	ldr	r5, [pc, #44]	@ (8001854 <__libc_init_array+0x40>)
 8001826:	4c0c      	ldr	r4, [pc, #48]	@ (8001858 <__libc_init_array+0x44>)
 8001828:	f000 f818 	bl	800185c <_init>
 800182c:	1b64      	subs	r4, r4, r5
 800182e:	10a4      	asrs	r4, r4, #2
 8001830:	2600      	movs	r6, #0
 8001832:	42a6      	cmp	r6, r4
 8001834:	d105      	bne.n	8001842 <__libc_init_array+0x2e>
 8001836:	bd70      	pop	{r4, r5, r6, pc}
 8001838:	f855 3b04 	ldr.w	r3, [r5], #4
 800183c:	4798      	blx	r3
 800183e:	3601      	adds	r6, #1
 8001840:	e7ee      	b.n	8001820 <__libc_init_array+0xc>
 8001842:	f855 3b04 	ldr.w	r3, [r5], #4
 8001846:	4798      	blx	r3
 8001848:	3601      	adds	r6, #1
 800184a:	e7f2      	b.n	8001832 <__libc_init_array+0x1e>
 800184c:	0800188c 	.word	0x0800188c
 8001850:	0800188c 	.word	0x0800188c
 8001854:	0800188c 	.word	0x0800188c
 8001858:	08001890 	.word	0x08001890

0800185c <_init>:
 800185c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800185e:	bf00      	nop
 8001860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001862:	bc08      	pop	{r3}
 8001864:	469e      	mov	lr, r3
 8001866:	4770      	bx	lr

08001868 <_fini>:
 8001868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800186a:	bf00      	nop
 800186c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800186e:	bc08      	pop	{r3}
 8001870:	469e      	mov	lr, r3
 8001872:	4770      	bx	lr
