
pushbutton_interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000006d0  080001c8  080001c8  000011c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000898  08000898  0000200c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000898  08000898  0000200c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000898  08000898  0000200c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000898  08000898  0000200c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000898  08000898  00001898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800089c  0800089c  0000189c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080008a0  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  2000000c  080008ac  0000200c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  080008ac  00002030  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000200c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003148  00000000  00000000  0000203c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000009bc  00000000  00000000  00005184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000348  00000000  00000000  00005b40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000257  00000000  00000000  00005e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023228  00000000  00000000  000060df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003259  00000000  00000000  00029307  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc39d  00000000  00000000  0002c560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001088fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000b4c  00000000  00000000  00108940  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0010948c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08000880 	.word	0x08000880

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08000880 	.word	0x08000880

08000208 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000208:	b480      	push	{r7}
 800020a:	b083      	sub	sp, #12
 800020c:	af00      	add	r7, sp, #0
 800020e:	4603      	mov	r3, r0
 8000210:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000216:	2b00      	cmp	r3, #0
 8000218:	db0b      	blt.n	8000232 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800021a:	79fb      	ldrb	r3, [r7, #7]
 800021c:	f003 021f 	and.w	r2, r3, #31
 8000220:	4907      	ldr	r1, [pc, #28]	@ (8000240 <__NVIC_EnableIRQ+0x38>)
 8000222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000226:	095b      	lsrs	r3, r3, #5
 8000228:	2001      	movs	r0, #1
 800022a:	fa00 f202 	lsl.w	r2, r0, r2
 800022e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000232:	bf00      	nop
 8000234:	370c      	adds	r7, #12
 8000236:	46bd      	mov	sp, r7
 8000238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop
 8000240:	e000e100 	.word	0xe000e100

08000244 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000244:	b480      	push	{r7}
 8000246:	b083      	sub	sp, #12
 8000248:	af00      	add	r7, sp, #0
 800024a:	4603      	mov	r3, r0
 800024c:	6039      	str	r1, [r7, #0]
 800024e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000250:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000254:	2b00      	cmp	r3, #0
 8000256:	db0a      	blt.n	800026e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000258:	683b      	ldr	r3, [r7, #0]
 800025a:	b2da      	uxtb	r2, r3
 800025c:	490c      	ldr	r1, [pc, #48]	@ (8000290 <__NVIC_SetPriority+0x4c>)
 800025e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000262:	0112      	lsls	r2, r2, #4
 8000264:	b2d2      	uxtb	r2, r2
 8000266:	440b      	add	r3, r1
 8000268:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800026c:	e00a      	b.n	8000284 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800026e:	683b      	ldr	r3, [r7, #0]
 8000270:	b2da      	uxtb	r2, r3
 8000272:	4908      	ldr	r1, [pc, #32]	@ (8000294 <__NVIC_SetPriority+0x50>)
 8000274:	79fb      	ldrb	r3, [r7, #7]
 8000276:	f003 030f 	and.w	r3, r3, #15
 800027a:	3b04      	subs	r3, #4
 800027c:	0112      	lsls	r2, r2, #4
 800027e:	b2d2      	uxtb	r2, r2
 8000280:	440b      	add	r3, r1
 8000282:	761a      	strb	r2, [r3, #24]
}
 8000284:	bf00      	nop
 8000286:	370c      	adds	r7, #12
 8000288:	46bd      	mov	sp, r7
 800028a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028e:	4770      	bx	lr
 8000290:	e000e100 	.word	0xe000e100
 8000294:	e000ed00 	.word	0xe000ed00

08000298 <EXTI15_10_IRQHandler>:
/* USER CODE BEGIN PFP */
static void MX_GPIO_Init(void);

volatile uint8_t buttonstate = 0;
void EXTI15_10_IRQHandler(void)
{
 8000298:	b480      	push	{r7}
 800029a:	af00      	add	r7, sp, #0
	if(EXTI->PR & EXTI_PR_PR11){ //CHECKS WHETHER INTERRUPT TRIGGERED, PR REGISTER HAS PENDING INTERRUPT FLAGS FOR ALL EXTI LINES
 800029c:	4b0b      	ldr	r3, [pc, #44]	@ (80002cc <EXTI15_10_IRQHandler+0x34>)
 800029e:	695b      	ldr	r3, [r3, #20]
 80002a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d00b      	beq.n	80002c0 <EXTI15_10_IRQHandler+0x28>
	EXTI->PR = EXTI_PR_PR11; //CLEAR INTERRUPT FLAG
 80002a8:	4b08      	ldr	r3, [pc, #32]	@ (80002cc <EXTI15_10_IRQHandler+0x34>)
 80002aa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80002ae:	615a      	str	r2, [r3, #20]
	buttonstate ^= 1;}
 80002b0:	4b07      	ldr	r3, [pc, #28]	@ (80002d0 <EXTI15_10_IRQHandler+0x38>)
 80002b2:	781b      	ldrb	r3, [r3, #0]
 80002b4:	b2db      	uxtb	r3, r3
 80002b6:	f083 0301 	eor.w	r3, r3, #1
 80002ba:	b2da      	uxtb	r2, r3
 80002bc:	4b04      	ldr	r3, [pc, #16]	@ (80002d0 <EXTI15_10_IRQHandler+0x38>)
 80002be:	701a      	strb	r2, [r3, #0]
}
 80002c0:	bf00      	nop
 80002c2:	46bd      	mov	sp, r7
 80002c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c8:	4770      	bx	lr
 80002ca:	bf00      	nop
 80002cc:	40013c00 	.word	0x40013c00
 80002d0:	20000028 	.word	0x20000028

080002d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002d8:	f000 f977 	bl	80005ca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002dc:	f000 f87e 	bl	80003dc <SystemClock_Config>

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
MX_GPIO_Init();
 80002e0:	f000 f818 	bl	8000314 <MX_GPIO_Init>


  while (1)
  {
    /* USER CODE END WHILE */
	  if(buttonstate)
 80002e4:	4b09      	ldr	r3, [pc, #36]	@ (800030c <main+0x38>)
 80002e6:	781b      	ldrb	r3, [r3, #0]
 80002e8:	b2db      	uxtb	r3, r3
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d006      	beq.n	80002fc <main+0x28>
	  {
		  GPIOD->ODR &= ~(1<<5);
 80002ee:	4b08      	ldr	r3, [pc, #32]	@ (8000310 <main+0x3c>)
 80002f0:	695b      	ldr	r3, [r3, #20]
 80002f2:	4a07      	ldr	r2, [pc, #28]	@ (8000310 <main+0x3c>)
 80002f4:	f023 0320 	bic.w	r3, r3, #32
 80002f8:	6153      	str	r3, [r2, #20]
 80002fa:	e7f3      	b.n	80002e4 <main+0x10>
	  }
	  else
	  {
		  GPIOD->ODR |= (1<<5);
 80002fc:	4b04      	ldr	r3, [pc, #16]	@ (8000310 <main+0x3c>)
 80002fe:	695b      	ldr	r3, [r3, #20]
 8000300:	4a03      	ldr	r2, [pc, #12]	@ (8000310 <main+0x3c>)
 8000302:	f043 0320 	orr.w	r3, r3, #32
 8000306:	6153      	str	r3, [r2, #20]
	  if(buttonstate)
 8000308:	e7ec      	b.n	80002e4 <main+0x10>
 800030a:	bf00      	nop
 800030c:	20000028 	.word	0x20000028
 8000310:	40020c00 	.word	0x40020c00

08000314 <MX_GPIO_Init>:
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

static void MX_GPIO_Init(void){ //AHB CONNECT CPU TO MEMORY AND PERIPHERALS
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN | RCC_AHB1ENR_GPIOIEN;
 8000318:	4b2b      	ldr	r3, [pc, #172]	@ (80003c8 <MX_GPIO_Init+0xb4>)
 800031a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800031c:	4a2a      	ldr	r2, [pc, #168]	@ (80003c8 <MX_GPIO_Init+0xb4>)
 800031e:	f443 7384 	orr.w	r3, r3, #264	@ 0x108
 8000322:	6313      	str	r3, [r2, #48]	@ 0x30

	GPIOD->MODER &= ~(3U << 10); //10 BECAUSE WE CONFIGURE THE PD5 PIN, HENCE MODE5
 8000324:	4b29      	ldr	r3, [pc, #164]	@ (80003cc <MX_GPIO_Init+0xb8>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	4a28      	ldr	r2, [pc, #160]	@ (80003cc <MX_GPIO_Init+0xb8>)
 800032a:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800032e:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= (1U << 10);
 8000330:	4b26      	ldr	r3, [pc, #152]	@ (80003cc <MX_GPIO_Init+0xb8>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	4a25      	ldr	r2, [pc, #148]	@ (80003cc <MX_GPIO_Init+0xb8>)
 8000336:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800033a:	6013      	str	r3, [r2, #0]

	GPIOD->OSPEEDR&= ~(3U << 10);//OUTPUT SPEED REGISTER
 800033c:	4b23      	ldr	r3, [pc, #140]	@ (80003cc <MX_GPIO_Init+0xb8>)
 800033e:	689b      	ldr	r3, [r3, #8]
 8000340:	4a22      	ldr	r2, [pc, #136]	@ (80003cc <MX_GPIO_Init+0xb8>)
 8000342:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000346:	6093      	str	r3, [r2, #8]
	GPIOD->OSPEEDR |= (1U <<10);
 8000348:	4b20      	ldr	r3, [pc, #128]	@ (80003cc <MX_GPIO_Init+0xb8>)
 800034a:	689b      	ldr	r3, [r3, #8]
 800034c:	4a1f      	ldr	r2, [pc, #124]	@ (80003cc <MX_GPIO_Init+0xb8>)
 800034e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000352:	6093      	str	r3, [r2, #8]

	GPIOD-> PUPDR &= ~(3U << 10);
 8000354:	4b1d      	ldr	r3, [pc, #116]	@ (80003cc <MX_GPIO_Init+0xb8>)
 8000356:	68db      	ldr	r3, [r3, #12]
 8000358:	4a1c      	ldr	r2, [pc, #112]	@ (80003cc <MX_GPIO_Init+0xb8>)
 800035a:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800035e:	60d3      	str	r3, [r2, #12]

	GPIOI->MODER &= ~(3U << 22); //22 BECAUSE WE CONFIGURE THE PI11 PIN, HENCE MODE5
 8000360:	4b1b      	ldr	r3, [pc, #108]	@ (80003d0 <MX_GPIO_Init+0xbc>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	4a1a      	ldr	r2, [pc, #104]	@ (80003d0 <MX_GPIO_Init+0xbc>)
 8000366:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800036a:	6013      	str	r3, [r2, #0]
	GPIOI->PUPDR &= ~(3U <<22);
 800036c:	4b18      	ldr	r3, [pc, #96]	@ (80003d0 <MX_GPIO_Init+0xbc>)
 800036e:	68db      	ldr	r3, [r3, #12]
 8000370:	4a17      	ldr	r2, [pc, #92]	@ (80003d0 <MX_GPIO_Init+0xbc>)
 8000372:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8000376:	60d3      	str	r3, [r2, #12]
	GPIOI->PUPDR |= (1U <<22);
 8000378:	4b15      	ldr	r3, [pc, #84]	@ (80003d0 <MX_GPIO_Init+0xbc>)
 800037a:	68db      	ldr	r3, [r3, #12]
 800037c:	4a14      	ldr	r2, [pc, #80]	@ (80003d0 <MX_GPIO_Init+0xbc>)
 800037e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000382:	60d3      	str	r3, [r2, #12]

/*EXTICR[0]	0 to 3
EXTICR[1]	4 to 7
EXTICR[2]	8 to 11 <---- Line 11 here
EXTICR[3]	12 to 15*/
	SYSCFG->EXTICR[2] &= ~(0xF << 12);   // Clear EXTI11 bits, OXF IS GOOD PRACTISE TO CLEAR BITS
 8000384:	4b13      	ldr	r3, [pc, #76]	@ (80003d4 <MX_GPIO_Init+0xc0>)
 8000386:	691b      	ldr	r3, [r3, #16]
 8000388:	4a12      	ldr	r2, [pc, #72]	@ (80003d4 <MX_GPIO_Init+0xc0>)
 800038a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800038e:	6113      	str	r3, [r2, #16]
    SYSCFG->EXTICR[2] |=  (0x8 << 12);   // Set EXTI11 to Port I, 0X8 IS GOOD PRACTISE TO SET BITS AS ALL BITS NEED TO BE OPERATED TO PREVENT MALFUNCITON
 8000390:	4b10      	ldr	r3, [pc, #64]	@ (80003d4 <MX_GPIO_Init+0xc0>)
 8000392:	691b      	ldr	r3, [r3, #16]
 8000394:	4a0f      	ldr	r2, [pc, #60]	@ (80003d4 <MX_GPIO_Init+0xc0>)
 8000396:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800039a:	6113      	str	r3, [r2, #16]

    EXTI->IMR  |= (1 << 11);             // Interrupt request from line 11 is not masked, ALLOWING IT TO GENERATE INTERRUPT, IF NOT DONE NOTHING TRIGGERS
 800039c:	4b0e      	ldr	r3, [pc, #56]	@ (80003d8 <MX_GPIO_Init+0xc4>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	4a0d      	ldr	r2, [pc, #52]	@ (80003d8 <MX_GPIO_Init+0xc4>)
 80003a2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80003a6:	6013      	str	r3, [r2, #0]
    EXTI->RTSR |= (1 << 11);             // Rising trigger enabled (for Event and Interrupt) for input line
 80003a8:	4b0b      	ldr	r3, [pc, #44]	@ (80003d8 <MX_GPIO_Init+0xc4>)
 80003aa:	689b      	ldr	r3, [r3, #8]
 80003ac:	4a0a      	ldr	r2, [pc, #40]	@ (80003d8 <MX_GPIO_Init+0xc4>)
 80003ae:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80003b2:	6093      	str	r3, [r2, #8]

    // Enable NVIC for EXTI15_10
    NVIC_EnableIRQ(EXTI15_10_IRQn);  //Activates the interrupt handler for lines 10–15
 80003b4:	2028      	movs	r0, #40	@ 0x28
 80003b6:	f7ff ff27 	bl	8000208 <__NVIC_EnableIRQ>
    NVIC_SetPriority(EXTI15_10_IRQn, 1); //Sets the priority level. Lower values mean higher priority (0 is the highest).
 80003ba:	2101      	movs	r1, #1
 80003bc:	2028      	movs	r0, #40	@ 0x28
 80003be:	f7ff ff41 	bl	8000244 <__NVIC_SetPriority>
/*PRIORITY CAN ASLO BE ASSIGNED 0, BUT ITS TYPICALLY RESERVED FOR SYSTEM CRITICAL FUNCTIONS LIKE HARD FAULTS/ TIMER OVERFLOWS THAT MUST PREEMPT EVERYTHING
 * ALSO CAN BLOCK OTHER LESS PRIORITY TASKS LIKE SysTick OR OS SCHEDULING*/
}
 80003c2:	bf00      	nop
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	40023800 	.word	0x40023800
 80003cc:	40020c00 	.word	0x40020c00
 80003d0:	40022000 	.word	0x40022000
 80003d4:	40013800 	.word	0x40013800
 80003d8:	40013c00 	.word	0x40013c00

080003dc <SystemClock_Config>:
  * @retval None
  */



void SystemClock_Config(void) {
 80003dc:	b480      	push	{r7}
 80003de:	af00      	add	r7, sp, #0
    // 1. Enable HSI
    RCC->CR |= RCC_CR_HSION;
 80003e0:	4b2e      	ldr	r3, [pc, #184]	@ (800049c <SystemClock_Config+0xc0>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	4a2d      	ldr	r2, [pc, #180]	@ (800049c <SystemClock_Config+0xc0>)
 80003e6:	f043 0301 	orr.w	r3, r3, #1
 80003ea:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & RCC_CR_HSIRDY));  // Wait until HSI is ready
 80003ec:	bf00      	nop
 80003ee:	4b2b      	ldr	r3, [pc, #172]	@ (800049c <SystemClock_Config+0xc0>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	f003 0302 	and.w	r3, r3, #2
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d0f9      	beq.n	80003ee <SystemClock_Config+0x12>

    // 2. Enable Power interface clock and configure OverDrive
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80003fa:	4b28      	ldr	r3, [pc, #160]	@ (800049c <SystemClock_Config+0xc0>)
 80003fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80003fe:	4a27      	ldr	r2, [pc, #156]	@ (800049c <SystemClock_Config+0xc0>)
 8000400:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000404:	6413      	str	r3, [r2, #64]	@ 0x40

    PWR->CR1 |= PWR_CR1_ODEN;  // Enable OverDrive
 8000406:	4b26      	ldr	r3, [pc, #152]	@ (80004a0 <SystemClock_Config+0xc4>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	4a25      	ldr	r2, [pc, #148]	@ (80004a0 <SystemClock_Config+0xc4>)
 800040c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000410:	6013      	str	r3, [r2, #0]
    while (!(PWR->CSR1 & PWR_CSR1_ODRDY)); // Wait until OverDrive is ready
 8000412:	bf00      	nop
 8000414:	4b22      	ldr	r3, [pc, #136]	@ (80004a0 <SystemClock_Config+0xc4>)
 8000416:	685b      	ldr	r3, [r3, #4]
 8000418:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800041c:	2b00      	cmp	r3, #0
 800041e:	d0f9      	beq.n	8000414 <SystemClock_Config+0x38>

    PWR->CR1 |= PWR_CR1_ODSWEN;  // Start OverDrive switch
 8000420:	4b1f      	ldr	r3, [pc, #124]	@ (80004a0 <SystemClock_Config+0xc4>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	4a1e      	ldr	r2, [pc, #120]	@ (80004a0 <SystemClock_Config+0xc4>)
 8000426:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800042a:	6013      	str	r3, [r2, #0]
    while (!(PWR->CSR1 & PWR_CSR1_ODSWRDY)); // Wait until switch is ready
 800042c:	bf00      	nop
 800042e:	4b1c      	ldr	r3, [pc, #112]	@ (80004a0 <SystemClock_Config+0xc4>)
 8000430:	685b      	ldr	r3, [r3, #4]
 8000432:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000436:	2b00      	cmp	r3, #0
 8000438:	d0f9      	beq.n	800042e <SystemClock_Config+0x52>

    // 3. Configure Flash latency and cache settings
    FLASH->ACR = FLASH_ACR_LATENCY_7WS |
 800043a:	4b1a      	ldr	r3, [pc, #104]	@ (80004a4 <SystemClock_Config+0xc8>)
 800043c:	f240 3207 	movw	r2, #775	@ 0x307
 8000440:	601a      	str	r2, [r3, #0]
                 FLASH_ACR_PRFTEN |
                 FLASH_ACR_ARTEN;

    // 4. Configure PLL to use HSI (16 MHz)
    RCC->PLLCFGR = (16 << RCC_PLLCFGR_PLLM_Pos)  | // PLLM = 16
 8000442:	4b16      	ldr	r3, [pc, #88]	@ (800049c <SystemClock_Config+0xc0>)
 8000444:	4a18      	ldr	r2, [pc, #96]	@ (80004a8 <SystemClock_Config+0xcc>)
 8000446:	605a      	str	r2, [r3, #4]
                   (0 << RCC_PLLCFGR_PLLP_Pos)   | // PLLP = 2
                   (RCC_PLLCFGR_PLLSRC_HSI)      | // PLL source = HSI
                   (9 << RCC_PLLCFGR_PLLQ_Pos);    // PLLQ = 9

    // 5. Enable PLL
    RCC->CR |= RCC_CR_PLLON;
 8000448:	4b14      	ldr	r3, [pc, #80]	@ (800049c <SystemClock_Config+0xc0>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	4a13      	ldr	r2, [pc, #76]	@ (800049c <SystemClock_Config+0xc0>)
 800044e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000452:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & RCC_CR_PLLRDY));  // Wait for PLL to lock
 8000454:	bf00      	nop
 8000456:	4b11      	ldr	r3, [pc, #68]	@ (800049c <SystemClock_Config+0xc0>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800045e:	2b00      	cmp	r3, #0
 8000460:	d0f9      	beq.n	8000456 <SystemClock_Config+0x7a>

    // 6. Set clock prescalers
    RCC->CFGR = RCC_CFGR_HPRE_DIV1 |    // AHB = SYSCLK / 1
 8000462:	4b0e      	ldr	r3, [pc, #56]	@ (800049c <SystemClock_Config+0xc0>)
 8000464:	f44f 4214 	mov.w	r2, #37888	@ 0x9400
 8000468:	609a      	str	r2, [r3, #8]
                RCC_CFGR_PPRE1_DIV4 |   // APB1 = AHB / 4
                RCC_CFGR_PPRE2_DIV2;    // APB2 = AHB / 2

    // 7. Switch system clock to PLL
    RCC->CFGR &= ~RCC_CFGR_SW;
 800046a:	4b0c      	ldr	r3, [pc, #48]	@ (800049c <SystemClock_Config+0xc0>)
 800046c:	689b      	ldr	r3, [r3, #8]
 800046e:	4a0b      	ldr	r2, [pc, #44]	@ (800049c <SystemClock_Config+0xc0>)
 8000470:	f023 0303 	bic.w	r3, r3, #3
 8000474:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000476:	4b09      	ldr	r3, [pc, #36]	@ (800049c <SystemClock_Config+0xc0>)
 8000478:	689b      	ldr	r3, [r3, #8]
 800047a:	4a08      	ldr	r2, [pc, #32]	@ (800049c <SystemClock_Config+0xc0>)
 800047c:	f043 0302 	orr.w	r3, r3, #2
 8000480:	6093      	str	r3, [r2, #8]
    while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);  // Wait until PLL is system clock
 8000482:	bf00      	nop
 8000484:	4b05      	ldr	r3, [pc, #20]	@ (800049c <SystemClock_Config+0xc0>)
 8000486:	689b      	ldr	r3, [r3, #8]
 8000488:	f003 030c 	and.w	r3, r3, #12
 800048c:	2b08      	cmp	r3, #8
 800048e:	d1f9      	bne.n	8000484 <SystemClock_Config+0xa8>
}
 8000490:	bf00      	nop
 8000492:	bf00      	nop
 8000494:	46bd      	mov	sp, r7
 8000496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049a:	4770      	bx	lr
 800049c:	40023800 	.word	0x40023800
 80004a0:	40007000 	.word	0x40007000
 80004a4:	40023c00 	.word	0x40023c00
 80004a8:	09006c10 	.word	0x09006c10

080004ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004ac:	b480      	push	{r7}
 80004ae:	b083      	sub	sp, #12
 80004b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80004b2:	4b0f      	ldr	r3, [pc, #60]	@ (80004f0 <HAL_MspInit+0x44>)
 80004b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80004b6:	4a0e      	ldr	r2, [pc, #56]	@ (80004f0 <HAL_MspInit+0x44>)
 80004b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80004be:	4b0c      	ldr	r3, [pc, #48]	@ (80004f0 <HAL_MspInit+0x44>)
 80004c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80004c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004c6:	607b      	str	r3, [r7, #4]
 80004c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004ca:	4b09      	ldr	r3, [pc, #36]	@ (80004f0 <HAL_MspInit+0x44>)
 80004cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80004ce:	4a08      	ldr	r2, [pc, #32]	@ (80004f0 <HAL_MspInit+0x44>)
 80004d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80004d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80004d6:	4b06      	ldr	r3, [pc, #24]	@ (80004f0 <HAL_MspInit+0x44>)
 80004d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80004da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80004de:	603b      	str	r3, [r7, #0]
 80004e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004e2:	bf00      	nop
 80004e4:	370c      	adds	r7, #12
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop
 80004f0:	40023800 	.word	0x40023800

080004f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004f8:	bf00      	nop
 80004fa:	e7fd      	b.n	80004f8 <NMI_Handler+0x4>

080004fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000500:	bf00      	nop
 8000502:	e7fd      	b.n	8000500 <HardFault_Handler+0x4>

08000504 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000508:	bf00      	nop
 800050a:	e7fd      	b.n	8000508 <MemManage_Handler+0x4>

0800050c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000510:	bf00      	nop
 8000512:	e7fd      	b.n	8000510 <BusFault_Handler+0x4>

08000514 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000518:	bf00      	nop
 800051a:	e7fd      	b.n	8000518 <UsageFault_Handler+0x4>

0800051c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000520:	bf00      	nop
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr

0800052a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800052a:	b480      	push	{r7}
 800052c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800052e:	bf00      	nop
 8000530:	46bd      	mov	sp, r7
 8000532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000536:	4770      	bx	lr

08000538 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800053c:	bf00      	nop
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr

08000546 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000546:	b580      	push	{r7, lr}
 8000548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800054a:	f000 f87b 	bl	8000644 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800054e:	bf00      	nop
 8000550:	bd80      	pop	{r7, pc}
	...

08000554 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000558:	4b06      	ldr	r3, [pc, #24]	@ (8000574 <SystemInit+0x20>)
 800055a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800055e:	4a05      	ldr	r2, [pc, #20]	@ (8000574 <SystemInit+0x20>)
 8000560:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000564:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000568:	bf00      	nop
 800056a:	46bd      	mov	sp, r7
 800056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop
 8000574:	e000ed00 	.word	0xe000ed00

08000578 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000578:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80005b0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 800057c:	f7ff ffea 	bl	8000554 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000580:	480c      	ldr	r0, [pc, #48]	@ (80005b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000582:	490d      	ldr	r1, [pc, #52]	@ (80005b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000584:	4a0d      	ldr	r2, [pc, #52]	@ (80005bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000586:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000588:	e002      	b.n	8000590 <LoopCopyDataInit>

0800058a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800058a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800058c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800058e:	3304      	adds	r3, #4

08000590 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000590:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000592:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000594:	d3f9      	bcc.n	800058a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000596:	4a0a      	ldr	r2, [pc, #40]	@ (80005c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000598:	4c0a      	ldr	r4, [pc, #40]	@ (80005c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800059a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800059c:	e001      	b.n	80005a2 <LoopFillZerobss>

0800059e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800059e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005a0:	3204      	adds	r2, #4

080005a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005a4:	d3fb      	bcc.n	800059e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80005a6:	f000 f947 	bl	8000838 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80005aa:	f7ff fe93 	bl	80002d4 <main>
  bx  lr    
 80005ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80005b0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80005b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005b8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80005bc:	080008a0 	.word	0x080008a0
  ldr r2, =_sbss
 80005c0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80005c4:	20000030 	.word	0x20000030

080005c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80005c8:	e7fe      	b.n	80005c8 <ADC_IRQHandler>

080005ca <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005ca:	b580      	push	{r7, lr}
 80005cc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005ce:	2003      	movs	r0, #3
 80005d0:	f000 f8fe 	bl	80007d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005d4:	200f      	movs	r0, #15
 80005d6:	f000 f805 	bl	80005e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005da:	f7ff ff67 	bl	80004ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005de:	2300      	movs	r3, #0
}
 80005e0:	4618      	mov	r0, r3
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005ec:	4b12      	ldr	r3, [pc, #72]	@ (8000638 <HAL_InitTick+0x54>)
 80005ee:	681a      	ldr	r2, [r3, #0]
 80005f0:	4b12      	ldr	r3, [pc, #72]	@ (800063c <HAL_InitTick+0x58>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	4619      	mov	r1, r3
 80005f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80005fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000602:	4618      	mov	r0, r3
 8000604:	f000 f90b 	bl	800081e <HAL_SYSTICK_Config>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800060e:	2301      	movs	r3, #1
 8000610:	e00e      	b.n	8000630 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	2b0f      	cmp	r3, #15
 8000616:	d80a      	bhi.n	800062e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000618:	2200      	movs	r2, #0
 800061a:	6879      	ldr	r1, [r7, #4]
 800061c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000620:	f000 f8e1 	bl	80007e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000624:	4a06      	ldr	r2, [pc, #24]	@ (8000640 <HAL_InitTick+0x5c>)
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800062a:	2300      	movs	r3, #0
 800062c:	e000      	b.n	8000630 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800062e:	2301      	movs	r3, #1
}
 8000630:	4618      	mov	r0, r3
 8000632:	3708      	adds	r7, #8
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	20000000 	.word	0x20000000
 800063c:	20000008 	.word	0x20000008
 8000640:	20000004 	.word	0x20000004

08000644 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000648:	4b06      	ldr	r3, [pc, #24]	@ (8000664 <HAL_IncTick+0x20>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	461a      	mov	r2, r3
 800064e:	4b06      	ldr	r3, [pc, #24]	@ (8000668 <HAL_IncTick+0x24>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4413      	add	r3, r2
 8000654:	4a04      	ldr	r2, [pc, #16]	@ (8000668 <HAL_IncTick+0x24>)
 8000656:	6013      	str	r3, [r2, #0]
}
 8000658:	bf00      	nop
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	20000008 	.word	0x20000008
 8000668:	2000002c 	.word	0x2000002c

0800066c <__NVIC_SetPriorityGrouping>:
{
 800066c:	b480      	push	{r7}
 800066e:	b085      	sub	sp, #20
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	f003 0307 	and.w	r3, r3, #7
 800067a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800067c:	4b0b      	ldr	r3, [pc, #44]	@ (80006ac <__NVIC_SetPriorityGrouping+0x40>)
 800067e:	68db      	ldr	r3, [r3, #12]
 8000680:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000682:	68ba      	ldr	r2, [r7, #8]
 8000684:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000688:	4013      	ands	r3, r2
 800068a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000690:	68bb      	ldr	r3, [r7, #8]
 8000692:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000694:	4b06      	ldr	r3, [pc, #24]	@ (80006b0 <__NVIC_SetPriorityGrouping+0x44>)
 8000696:	4313      	orrs	r3, r2
 8000698:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800069a:	4a04      	ldr	r2, [pc, #16]	@ (80006ac <__NVIC_SetPriorityGrouping+0x40>)
 800069c:	68bb      	ldr	r3, [r7, #8]
 800069e:	60d3      	str	r3, [r2, #12]
}
 80006a0:	bf00      	nop
 80006a2:	3714      	adds	r7, #20
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr
 80006ac:	e000ed00 	.word	0xe000ed00
 80006b0:	05fa0000 	.word	0x05fa0000

080006b4 <__NVIC_GetPriorityGrouping>:
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006b8:	4b04      	ldr	r3, [pc, #16]	@ (80006cc <__NVIC_GetPriorityGrouping+0x18>)
 80006ba:	68db      	ldr	r3, [r3, #12]
 80006bc:	0a1b      	lsrs	r3, r3, #8
 80006be:	f003 0307 	and.w	r3, r3, #7
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr
 80006cc:	e000ed00 	.word	0xe000ed00

080006d0 <__NVIC_SetPriority>:
{
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	4603      	mov	r3, r0
 80006d8:	6039      	str	r1, [r7, #0]
 80006da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	db0a      	blt.n	80006fa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e4:	683b      	ldr	r3, [r7, #0]
 80006e6:	b2da      	uxtb	r2, r3
 80006e8:	490c      	ldr	r1, [pc, #48]	@ (800071c <__NVIC_SetPriority+0x4c>)
 80006ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ee:	0112      	lsls	r2, r2, #4
 80006f0:	b2d2      	uxtb	r2, r2
 80006f2:	440b      	add	r3, r1
 80006f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80006f8:	e00a      	b.n	8000710 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	b2da      	uxtb	r2, r3
 80006fe:	4908      	ldr	r1, [pc, #32]	@ (8000720 <__NVIC_SetPriority+0x50>)
 8000700:	79fb      	ldrb	r3, [r7, #7]
 8000702:	f003 030f 	and.w	r3, r3, #15
 8000706:	3b04      	subs	r3, #4
 8000708:	0112      	lsls	r2, r2, #4
 800070a:	b2d2      	uxtb	r2, r2
 800070c:	440b      	add	r3, r1
 800070e:	761a      	strb	r2, [r3, #24]
}
 8000710:	bf00      	nop
 8000712:	370c      	adds	r7, #12
 8000714:	46bd      	mov	sp, r7
 8000716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071a:	4770      	bx	lr
 800071c:	e000e100 	.word	0xe000e100
 8000720:	e000ed00 	.word	0xe000ed00

08000724 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000724:	b480      	push	{r7}
 8000726:	b089      	sub	sp, #36	@ 0x24
 8000728:	af00      	add	r7, sp, #0
 800072a:	60f8      	str	r0, [r7, #12]
 800072c:	60b9      	str	r1, [r7, #8]
 800072e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	f003 0307 	and.w	r3, r3, #7
 8000736:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000738:	69fb      	ldr	r3, [r7, #28]
 800073a:	f1c3 0307 	rsb	r3, r3, #7
 800073e:	2b04      	cmp	r3, #4
 8000740:	bf28      	it	cs
 8000742:	2304      	movcs	r3, #4
 8000744:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000746:	69fb      	ldr	r3, [r7, #28]
 8000748:	3304      	adds	r3, #4
 800074a:	2b06      	cmp	r3, #6
 800074c:	d902      	bls.n	8000754 <NVIC_EncodePriority+0x30>
 800074e:	69fb      	ldr	r3, [r7, #28]
 8000750:	3b03      	subs	r3, #3
 8000752:	e000      	b.n	8000756 <NVIC_EncodePriority+0x32>
 8000754:	2300      	movs	r3, #0
 8000756:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000758:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800075c:	69bb      	ldr	r3, [r7, #24]
 800075e:	fa02 f303 	lsl.w	r3, r2, r3
 8000762:	43da      	mvns	r2, r3
 8000764:	68bb      	ldr	r3, [r7, #8]
 8000766:	401a      	ands	r2, r3
 8000768:	697b      	ldr	r3, [r7, #20]
 800076a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800076c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000770:	697b      	ldr	r3, [r7, #20]
 8000772:	fa01 f303 	lsl.w	r3, r1, r3
 8000776:	43d9      	mvns	r1, r3
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800077c:	4313      	orrs	r3, r2
         );
}
 800077e:	4618      	mov	r0, r3
 8000780:	3724      	adds	r7, #36	@ 0x24
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
	...

0800078c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	3b01      	subs	r3, #1
 8000798:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800079c:	d301      	bcc.n	80007a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800079e:	2301      	movs	r3, #1
 80007a0:	e00f      	b.n	80007c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007a2:	4a0a      	ldr	r2, [pc, #40]	@ (80007cc <SysTick_Config+0x40>)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	3b01      	subs	r3, #1
 80007a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007aa:	210f      	movs	r1, #15
 80007ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80007b0:	f7ff ff8e 	bl	80006d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007b4:	4b05      	ldr	r3, [pc, #20]	@ (80007cc <SysTick_Config+0x40>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007ba:	4b04      	ldr	r3, [pc, #16]	@ (80007cc <SysTick_Config+0x40>)
 80007bc:	2207      	movs	r2, #7
 80007be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007c0:	2300      	movs	r3, #0
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	e000e010 	.word	0xe000e010

080007d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007d8:	6878      	ldr	r0, [r7, #4]
 80007da:	f7ff ff47 	bl	800066c <__NVIC_SetPriorityGrouping>
}
 80007de:	bf00      	nop
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}

080007e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007e6:	b580      	push	{r7, lr}
 80007e8:	b086      	sub	sp, #24
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	4603      	mov	r3, r0
 80007ee:	60b9      	str	r1, [r7, #8]
 80007f0:	607a      	str	r2, [r7, #4]
 80007f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80007f4:	2300      	movs	r3, #0
 80007f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007f8:	f7ff ff5c 	bl	80006b4 <__NVIC_GetPriorityGrouping>
 80007fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007fe:	687a      	ldr	r2, [r7, #4]
 8000800:	68b9      	ldr	r1, [r7, #8]
 8000802:	6978      	ldr	r0, [r7, #20]
 8000804:	f7ff ff8e 	bl	8000724 <NVIC_EncodePriority>
 8000808:	4602      	mov	r2, r0
 800080a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800080e:	4611      	mov	r1, r2
 8000810:	4618      	mov	r0, r3
 8000812:	f7ff ff5d 	bl	80006d0 <__NVIC_SetPriority>
}
 8000816:	bf00      	nop
 8000818:	3718      	adds	r7, #24
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}

0800081e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800081e:	b580      	push	{r7, lr}
 8000820:	b082      	sub	sp, #8
 8000822:	af00      	add	r7, sp, #0
 8000824:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000826:	6878      	ldr	r0, [r7, #4]
 8000828:	f7ff ffb0 	bl	800078c <SysTick_Config>
 800082c:	4603      	mov	r3, r0
}
 800082e:	4618      	mov	r0, r3
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
	...

08000838 <__libc_init_array>:
 8000838:	b570      	push	{r4, r5, r6, lr}
 800083a:	4d0d      	ldr	r5, [pc, #52]	@ (8000870 <__libc_init_array+0x38>)
 800083c:	4c0d      	ldr	r4, [pc, #52]	@ (8000874 <__libc_init_array+0x3c>)
 800083e:	1b64      	subs	r4, r4, r5
 8000840:	10a4      	asrs	r4, r4, #2
 8000842:	2600      	movs	r6, #0
 8000844:	42a6      	cmp	r6, r4
 8000846:	d109      	bne.n	800085c <__libc_init_array+0x24>
 8000848:	4d0b      	ldr	r5, [pc, #44]	@ (8000878 <__libc_init_array+0x40>)
 800084a:	4c0c      	ldr	r4, [pc, #48]	@ (800087c <__libc_init_array+0x44>)
 800084c:	f000 f818 	bl	8000880 <_init>
 8000850:	1b64      	subs	r4, r4, r5
 8000852:	10a4      	asrs	r4, r4, #2
 8000854:	2600      	movs	r6, #0
 8000856:	42a6      	cmp	r6, r4
 8000858:	d105      	bne.n	8000866 <__libc_init_array+0x2e>
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000860:	4798      	blx	r3
 8000862:	3601      	adds	r6, #1
 8000864:	e7ee      	b.n	8000844 <__libc_init_array+0xc>
 8000866:	f855 3b04 	ldr.w	r3, [r5], #4
 800086a:	4798      	blx	r3
 800086c:	3601      	adds	r6, #1
 800086e:	e7f2      	b.n	8000856 <__libc_init_array+0x1e>
 8000870:	08000898 	.word	0x08000898
 8000874:	08000898 	.word	0x08000898
 8000878:	08000898 	.word	0x08000898
 800087c:	0800089c 	.word	0x0800089c

08000880 <_init>:
 8000880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000882:	bf00      	nop
 8000884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000886:	bc08      	pop	{r3}
 8000888:	469e      	mov	lr, r3
 800088a:	4770      	bx	lr

0800088c <_fini>:
 800088c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800088e:	bf00      	nop
 8000890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000892:	bc08      	pop	{r3}
 8000894:	469e      	mov	lr, r3
 8000896:	4770      	bx	lr
