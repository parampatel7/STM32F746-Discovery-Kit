
timer_generalpurpose.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004d0  080001c8  080001c8  000011c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000698  08000698  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000698  08000698  00002004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000698  08000698  00002004  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000698  08000698  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000698  08000698  00001698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800069c  0800069c  0000169c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  080006a0  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080006a4  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080006a4  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001f78  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000578  00000000  00000000  00003fac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000210  00000000  00000000  00004528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000175  00000000  00000000  00004738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022ea0  00000000  00000000  000048ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002037  00000000  00000000  0002774d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc002  00000000  00000000  00029784  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00105786  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000670  00000000  00000000  001057cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00105e3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000004 	.word	0x20000004
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08000680 	.word	0x08000680

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000008 	.word	0x20000008
 8000204:	08000680 	.word	0x08000680

08000208 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000208:	b480      	push	{r7}
 800020a:	b083      	sub	sp, #12
 800020c:	af00      	add	r7, sp, #0
 800020e:	4603      	mov	r3, r0
 8000210:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000216:	2b00      	cmp	r3, #0
 8000218:	db0b      	blt.n	8000232 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800021a:	79fb      	ldrb	r3, [r7, #7]
 800021c:	f003 021f 	and.w	r2, r3, #31
 8000220:	4907      	ldr	r1, [pc, #28]	@ (8000240 <__NVIC_EnableIRQ+0x38>)
 8000222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000226:	095b      	lsrs	r3, r3, #5
 8000228:	2001      	movs	r0, #1
 800022a:	fa00 f202 	lsl.w	r2, r0, r2
 800022e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000232:	bf00      	nop
 8000234:	370c      	adds	r7, #12
 8000236:	46bd      	mov	sp, r7
 8000238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop
 8000240:	e000e100 	.word	0xe000e100

08000244 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000244:	b480      	push	{r7}
 8000246:	b083      	sub	sp, #12
 8000248:	af00      	add	r7, sp, #0
 800024a:	4603      	mov	r3, r0
 800024c:	6039      	str	r1, [r7, #0]
 800024e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000250:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000254:	2b00      	cmp	r3, #0
 8000256:	db0a      	blt.n	800026e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000258:	683b      	ldr	r3, [r7, #0]
 800025a:	b2da      	uxtb	r2, r3
 800025c:	490c      	ldr	r1, [pc, #48]	@ (8000290 <__NVIC_SetPriority+0x4c>)
 800025e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000262:	0112      	lsls	r2, r2, #4
 8000264:	b2d2      	uxtb	r2, r2
 8000266:	440b      	add	r3, r1
 8000268:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800026c:	e00a      	b.n	8000284 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800026e:	683b      	ldr	r3, [r7, #0]
 8000270:	b2da      	uxtb	r2, r3
 8000272:	4908      	ldr	r1, [pc, #32]	@ (8000294 <__NVIC_SetPriority+0x50>)
 8000274:	79fb      	ldrb	r3, [r7, #7]
 8000276:	f003 030f 	and.w	r3, r3, #15
 800027a:	3b04      	subs	r3, #4
 800027c:	0112      	lsls	r2, r2, #4
 800027e:	b2d2      	uxtb	r2, r2
 8000280:	440b      	add	r3, r1
 8000282:	761a      	strb	r2, [r3, #24]
}
 8000284:	bf00      	nop
 8000286:	370c      	adds	r7, #12
 8000288:	46bd      	mov	sp, r7
 800028a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028e:	4770      	bx	lr
 8000290:	e000e100 	.word	0xe000e100
 8000294:	e000ed00 	.word	0xe000ed00

08000298 <main>:
void GPIO_Init(void);
void TIM2_Init(void);
void TIM3_Init(void);
void SystemClock_Config(void);
int main(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
	SystemClock_Config();
 800029c:	f000 f840 	bl	8000320 <SystemClock_Config>
    GPIO_Init();
 80002a0:	f000 f80e 	bl	80002c0 <GPIO_Init>
    TIM2_Init();
 80002a4:	f000 f8a4 	bl	80003f0 <TIM2_Init>
    TIM3_Init();
 80002a8:	f000 f8d0 	bl	800044c <TIM3_Init>

    TIM2->CR1 |= TIM_CR1_CEN; // Start TIM2 to begin the blink cycle
 80002ac:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002b6:	f043 0301 	orr.w	r3, r3, #1
 80002ba:	6013      	str	r3, [r2, #0]

    while (1) {
 80002bc:	bf00      	nop
 80002be:	e7fd      	b.n	80002bc <main+0x24>

080002c0 <GPIO_Init>:
        // LED control handled by interrupts
    }
}

void GPIO_Init(void)
{
 80002c0:	b480      	push	{r7}
 80002c2:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 80002c4:	4b14      	ldr	r3, [pc, #80]	@ (8000318 <GPIO_Init+0x58>)
 80002c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002c8:	4a13      	ldr	r2, [pc, #76]	@ (8000318 <GPIO_Init+0x58>)
 80002ca:	f043 0308 	orr.w	r3, r3, #8
 80002ce:	6313      	str	r3, [r2, #48]	@ 0x30
		GPIOD->MODER &= ~(3U << 10);
 80002d0:	4b12      	ldr	r3, [pc, #72]	@ (800031c <GPIO_Init+0x5c>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	4a11      	ldr	r2, [pc, #68]	@ (800031c <GPIO_Init+0x5c>)
 80002d6:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80002da:	6013      	str	r3, [r2, #0]
		GPIOD->MODER |= (1U << 10);
 80002dc:	4b0f      	ldr	r3, [pc, #60]	@ (800031c <GPIO_Init+0x5c>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	4a0e      	ldr	r2, [pc, #56]	@ (800031c <GPIO_Init+0x5c>)
 80002e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80002e6:	6013      	str	r3, [r2, #0]

		GPIOD->OSPEEDR &= ~(3U << 10);
 80002e8:	4b0c      	ldr	r3, [pc, #48]	@ (800031c <GPIO_Init+0x5c>)
 80002ea:	689b      	ldr	r3, [r3, #8]
 80002ec:	4a0b      	ldr	r2, [pc, #44]	@ (800031c <GPIO_Init+0x5c>)
 80002ee:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80002f2:	6093      	str	r3, [r2, #8]
		GPIOD->OSPEEDR |= (1U << 10);
 80002f4:	4b09      	ldr	r3, [pc, #36]	@ (800031c <GPIO_Init+0x5c>)
 80002f6:	689b      	ldr	r3, [r3, #8]
 80002f8:	4a08      	ldr	r2, [pc, #32]	@ (800031c <GPIO_Init+0x5c>)
 80002fa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80002fe:	6093      	str	r3, [r2, #8]
		GPIOD->PUPDR |= (1U << 22);
 8000300:	4b06      	ldr	r3, [pc, #24]	@ (800031c <GPIO_Init+0x5c>)
 8000302:	68db      	ldr	r3, [r3, #12]
 8000304:	4a05      	ldr	r2, [pc, #20]	@ (800031c <GPIO_Init+0x5c>)
 8000306:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800030a:	60d3      	str	r3, [r2, #12]
}
 800030c:	bf00      	nop
 800030e:	46bd      	mov	sp, r7
 8000310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000314:	4770      	bx	lr
 8000316:	bf00      	nop
 8000318:	40023800 	.word	0x40023800
 800031c:	40020c00 	.word	0x40020c00

08000320 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8000320:	b480      	push	{r7}
 8000322:	af00      	add	r7, sp, #0
	RCC->CR |= RCC_CR_HSEON ;
 8000324:	4b2e      	ldr	r3, [pc, #184]	@ (80003e0 <SystemClock_Config+0xc0>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	4a2d      	ldr	r2, [pc, #180]	@ (80003e0 <SystemClock_Config+0xc0>)
 800032a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800032e:	6013      	str	r3, [r2, #0]
		  while(!(RCC->CR & RCC_CR_HSERDY));
 8000330:	bf00      	nop
 8000332:	4b2b      	ldr	r3, [pc, #172]	@ (80003e0 <SystemClock_Config+0xc0>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800033a:	2b00      	cmp	r3, #0
 800033c:	d0f9      	beq.n	8000332 <SystemClock_Config+0x12>

		  RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800033e:	4b28      	ldr	r3, [pc, #160]	@ (80003e0 <SystemClock_Config+0xc0>)
 8000340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000342:	4a27      	ldr	r2, [pc, #156]	@ (80003e0 <SystemClock_Config+0xc0>)
 8000344:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000348:	6413      	str	r3, [r2, #64]	@ 0x40
		  PWR-> CR1 |= PWR_CR1_ODEN;
 800034a:	4b26      	ldr	r3, [pc, #152]	@ (80003e4 <SystemClock_Config+0xc4>)
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	4a25      	ldr	r2, [pc, #148]	@ (80003e4 <SystemClock_Config+0xc4>)
 8000350:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000354:	6013      	str	r3, [r2, #0]
		  while(!(PWR->CSR1 & PWR_CSR1_ODRDY));
 8000356:	bf00      	nop
 8000358:	4b22      	ldr	r3, [pc, #136]	@ (80003e4 <SystemClock_Config+0xc4>)
 800035a:	685b      	ldr	r3, [r3, #4]
 800035c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000360:	2b00      	cmp	r3, #0
 8000362:	d0f9      	beq.n	8000358 <SystemClock_Config+0x38>

		  PWR->CR1 |= PWR_CR1_ODSWEN;
 8000364:	4b1f      	ldr	r3, [pc, #124]	@ (80003e4 <SystemClock_Config+0xc4>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	4a1e      	ldr	r2, [pc, #120]	@ (80003e4 <SystemClock_Config+0xc4>)
 800036a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800036e:	6013      	str	r3, [r2, #0]
		  while(!(PWR->CSR1 & PWR_CSR1_ODSWRDY));
 8000370:	bf00      	nop
 8000372:	4b1c      	ldr	r3, [pc, #112]	@ (80003e4 <SystemClock_Config+0xc4>)
 8000374:	685b      	ldr	r3, [r3, #4]
 8000376:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800037a:	2b00      	cmp	r3, #0
 800037c:	d0f9      	beq.n	8000372 <SystemClock_Config+0x52>

		  FLASH->ACR = FLASH_ACR_LATENCY_7WS | FLASH_ACR_PRFTEN | FLASH_ACR_ARTEN;
 800037e:	4b1a      	ldr	r3, [pc, #104]	@ (80003e8 <SystemClock_Config+0xc8>)
 8000380:	f240 3207 	movw	r2, #775	@ 0x307
 8000384:	601a      	str	r2, [r3, #0]
//HSE=25MHz SYSCLK WE NEED 216MHz
		  RCC->PLLCFGR = (25 << RCC_PLLCFGR_PLLM_Pos) |
 8000386:	4b16      	ldr	r3, [pc, #88]	@ (80003e0 <SystemClock_Config+0xc0>)
 8000388:	4a18      	ldr	r2, [pc, #96]	@ (80003ec <SystemClock_Config+0xcc>)
 800038a:	605a      	str	r2, [r3, #4]
        PLLP = 8 → 11 (3)
 * */
				                     (RCC_PLLCFGR_PLLSRC_HSE)      |
				                     (9 << RCC_PLLCFGR_PLLQ_Pos);    // PLLQ = 9

		  RCC-> CR |= RCC_CR_PLLON;
 800038c:	4b14      	ldr	r3, [pc, #80]	@ (80003e0 <SystemClock_Config+0xc0>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	4a13      	ldr	r2, [pc, #76]	@ (80003e0 <SystemClock_Config+0xc0>)
 8000392:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000396:	6013      	str	r3, [r2, #0]
		  while(!(RCC->CR & RCC_CR_PLLRDY));
 8000398:	bf00      	nop
 800039a:	4b11      	ldr	r3, [pc, #68]	@ (80003e0 <SystemClock_Config+0xc0>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d0f9      	beq.n	800039a <SystemClock_Config+0x7a>

		  RCC->CFGR = RCC_CFGR_HPRE_DIV1 | RCC_CFGR_PPRE1_DIV4 | RCC_CFGR_PPRE2_DIV2;
 80003a6:	4b0e      	ldr	r3, [pc, #56]	@ (80003e0 <SystemClock_Config+0xc0>)
 80003a8:	f44f 4214 	mov.w	r2, #37888	@ 0x9400
 80003ac:	609a      	str	r2, [r3, #8]

		  RCC->CFGR &= ~RCC_CFGR_SW;
 80003ae:	4b0c      	ldr	r3, [pc, #48]	@ (80003e0 <SystemClock_Config+0xc0>)
 80003b0:	689b      	ldr	r3, [r3, #8]
 80003b2:	4a0b      	ldr	r2, [pc, #44]	@ (80003e0 <SystemClock_Config+0xc0>)
 80003b4:	f023 0303 	bic.w	r3, r3, #3
 80003b8:	6093      	str	r3, [r2, #8]
		  RCC->CFGR |= RCC_CFGR_SW_PLL;
 80003ba:	4b09      	ldr	r3, [pc, #36]	@ (80003e0 <SystemClock_Config+0xc0>)
 80003bc:	689b      	ldr	r3, [r3, #8]
 80003be:	4a08      	ldr	r2, [pc, #32]	@ (80003e0 <SystemClock_Config+0xc0>)
 80003c0:	f043 0302 	orr.w	r3, r3, #2
 80003c4:	6093      	str	r3, [r2, #8]
		  while((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 80003c6:	bf00      	nop
 80003c8:	4b05      	ldr	r3, [pc, #20]	@ (80003e0 <SystemClock_Config+0xc0>)
 80003ca:	689b      	ldr	r3, [r3, #8]
 80003cc:	f003 030c 	and.w	r3, r3, #12
 80003d0:	2b08      	cmp	r3, #8
 80003d2:	d1f9      	bne.n	80003c8 <SystemClock_Config+0xa8>
}
 80003d4:	bf00      	nop
 80003d6:	bf00      	nop
 80003d8:	46bd      	mov	sp, r7
 80003da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003de:	4770      	bx	lr
 80003e0:	40023800 	.word	0x40023800
 80003e4:	40007000 	.word	0x40007000
 80003e8:	40023c00 	.word	0x40023c00
 80003ec:	09406c19 	.word	0x09406c19

080003f0 <TIM2_Init>:
void TIM2_Init(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80003f4:	4b14      	ldr	r3, [pc, #80]	@ (8000448 <TIM2_Init+0x58>)
 80003f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80003f8:	4a13      	ldr	r2, [pc, #76]	@ (8000448 <TIM2_Init+0x58>)
 80003fa:	f043 0301 	orr.w	r3, r3, #1
 80003fe:	6413      	str	r3, [r2, #64]	@ 0x40

    TIM2->PSC = 10799;
 8000400:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000404:	f642 222f 	movw	r2, #10799	@ 0x2a2f
 8000408:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM2->ARR = 19999; // ≈2 seconds
 800040a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800040e:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000412:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM2->DIER |= TIM_DIER_UIE;
 8000414:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000418:	68db      	ldr	r3, [r3, #12]
 800041a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800041e:	f043 0301 	orr.w	r3, r3, #1
 8000422:	60d3      	str	r3, [r2, #12]
    TIM2->CR1 |= TIM_CR1_OPM; // One pulse mode
 8000424:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800042e:	f043 0308 	orr.w	r3, r3, #8
 8000432:	6013      	str	r3, [r2, #0]
    NVIC_EnableIRQ(TIM2_IRQn);
 8000434:	201c      	movs	r0, #28
 8000436:	f7ff fee7 	bl	8000208 <__NVIC_EnableIRQ>
    NVIC_SetPriority(TIM2_IRQn, 1);
 800043a:	2101      	movs	r1, #1
 800043c:	201c      	movs	r0, #28
 800043e:	f7ff ff01 	bl	8000244 <__NVIC_SetPriority>
}
 8000442:	bf00      	nop
 8000444:	bd80      	pop	{r7, pc}
 8000446:	bf00      	nop
 8000448:	40023800 	.word	0x40023800

0800044c <TIM3_Init>:

void TIM3_Init(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8000450:	4b11      	ldr	r3, [pc, #68]	@ (8000498 <TIM3_Init+0x4c>)
 8000452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000454:	4a10      	ldr	r2, [pc, #64]	@ (8000498 <TIM3_Init+0x4c>)
 8000456:	f043 0302 	orr.w	r3, r3, #2
 800045a:	6413      	str	r3, [r2, #64]	@ 0x40

    TIM3->PSC = 10799;
 800045c:	4b0f      	ldr	r3, [pc, #60]	@ (800049c <TIM3_Init+0x50>)
 800045e:	f642 222f 	movw	r2, #10799	@ 0x2a2f
 8000462:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM3->ARR = 19999; // ≈2 seconds
 8000464:	4b0d      	ldr	r3, [pc, #52]	@ (800049c <TIM3_Init+0x50>)
 8000466:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800046a:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM3->DIER |= TIM_DIER_UIE;
 800046c:	4b0b      	ldr	r3, [pc, #44]	@ (800049c <TIM3_Init+0x50>)
 800046e:	68db      	ldr	r3, [r3, #12]
 8000470:	4a0a      	ldr	r2, [pc, #40]	@ (800049c <TIM3_Init+0x50>)
 8000472:	f043 0301 	orr.w	r3, r3, #1
 8000476:	60d3      	str	r3, [r2, #12]
    TIM3->CR1 |= TIM_CR1_OPM; // One pulse mode
 8000478:	4b08      	ldr	r3, [pc, #32]	@ (800049c <TIM3_Init+0x50>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	4a07      	ldr	r2, [pc, #28]	@ (800049c <TIM3_Init+0x50>)
 800047e:	f043 0308 	orr.w	r3, r3, #8
 8000482:	6013      	str	r3, [r2, #0]
    NVIC_EnableIRQ(TIM3_IRQn);
 8000484:	201d      	movs	r0, #29
 8000486:	f7ff febf 	bl	8000208 <__NVIC_EnableIRQ>
    NVIC_SetPriority(TIM3_IRQn, 1);
 800048a:	2101      	movs	r1, #1
 800048c:	201d      	movs	r0, #29
 800048e:	f7ff fed9 	bl	8000244 <__NVIC_SetPriority>
}
 8000492:	bf00      	nop
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	40023800 	.word	0x40023800
 800049c:	40000400 	.word	0x40000400

080004a0 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0
    if (TIM2->SR & TIM_SR_UIF) {
 80004a4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80004a8:	691b      	ldr	r3, [r3, #16]
 80004aa:	f003 0301 	and.w	r3, r3, #1
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d013      	beq.n	80004da <TIM2_IRQHandler+0x3a>
        TIM2->SR &= ~TIM_SR_UIF;
 80004b2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80004b6:	691b      	ldr	r3, [r3, #16]
 80004b8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80004bc:	f023 0301 	bic.w	r3, r3, #1
 80004c0:	6113      	str	r3, [r2, #16]
        GPIOD->ODR |= (1UL << 5);   // LED ON
 80004c2:	4b08      	ldr	r3, [pc, #32]	@ (80004e4 <TIM2_IRQHandler+0x44>)
 80004c4:	695b      	ldr	r3, [r3, #20]
 80004c6:	4a07      	ldr	r2, [pc, #28]	@ (80004e4 <TIM2_IRQHandler+0x44>)
 80004c8:	f043 0320 	orr.w	r3, r3, #32
 80004cc:	6153      	str	r3, [r2, #20]
        TIM3->CR1 |= TIM_CR1_CEN;   // Start OFF timer
 80004ce:	4b06      	ldr	r3, [pc, #24]	@ (80004e8 <TIM2_IRQHandler+0x48>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	4a05      	ldr	r2, [pc, #20]	@ (80004e8 <TIM2_IRQHandler+0x48>)
 80004d4:	f043 0301 	orr.w	r3, r3, #1
 80004d8:	6013      	str	r3, [r2, #0]
    }
}
 80004da:	bf00      	nop
 80004dc:	46bd      	mov	sp, r7
 80004de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e2:	4770      	bx	lr
 80004e4:	40020c00 	.word	0x40020c00
 80004e8:	40000400 	.word	0x40000400

080004ec <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
    if (TIM3->SR & TIM_SR_UIF) {
 80004f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000530 <TIM3_IRQHandler+0x44>)
 80004f2:	691b      	ldr	r3, [r3, #16]
 80004f4:	f003 0301 	and.w	r3, r3, #1
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d013      	beq.n	8000524 <TIM3_IRQHandler+0x38>
        TIM3->SR &= ~TIM_SR_UIF;
 80004fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000530 <TIM3_IRQHandler+0x44>)
 80004fe:	691b      	ldr	r3, [r3, #16]
 8000500:	4a0b      	ldr	r2, [pc, #44]	@ (8000530 <TIM3_IRQHandler+0x44>)
 8000502:	f023 0301 	bic.w	r3, r3, #1
 8000506:	6113      	str	r3, [r2, #16]
        GPIOD->ODR &= ~(1UL << 5);  // LED OFF
 8000508:	4b0a      	ldr	r3, [pc, #40]	@ (8000534 <TIM3_IRQHandler+0x48>)
 800050a:	695b      	ldr	r3, [r3, #20]
 800050c:	4a09      	ldr	r2, [pc, #36]	@ (8000534 <TIM3_IRQHandler+0x48>)
 800050e:	f023 0320 	bic.w	r3, r3, #32
 8000512:	6153      	str	r3, [r2, #20]
        TIM2->CR1 |= TIM_CR1_CEN;   // Start ON timer
 8000514:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800051e:	f043 0301 	orr.w	r3, r3, #1
 8000522:	6013      	str	r3, [r2, #0]
    }
}
 8000524:	bf00      	nop
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop
 8000530:	40000400 	.word	0x40000400
 8000534:	40020c00 	.word	0x40020c00

08000538 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800053c:	bf00      	nop
 800053e:	e7fd      	b.n	800053c <NMI_Handler+0x4>

08000540 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000544:	bf00      	nop
 8000546:	e7fd      	b.n	8000544 <HardFault_Handler+0x4>

08000548 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000548:	b480      	push	{r7}
 800054a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800054c:	bf00      	nop
 800054e:	e7fd      	b.n	800054c <MemManage_Handler+0x4>

08000550 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000554:	bf00      	nop
 8000556:	e7fd      	b.n	8000554 <BusFault_Handler+0x4>

08000558 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800055c:	bf00      	nop
 800055e:	e7fd      	b.n	800055c <UsageFault_Handler+0x4>

08000560 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000564:	bf00      	nop
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr

0800056e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800056e:	b480      	push	{r7}
 8000570:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000572:	bf00      	nop
 8000574:	46bd      	mov	sp, r7
 8000576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057a:	4770      	bx	lr

0800057c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000580:	bf00      	nop
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr

0800058a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800058a:	b580      	push	{r7, lr}
 800058c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800058e:	f000 f83f 	bl	8000610 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000592:	bf00      	nop
 8000594:	bd80      	pop	{r7, pc}
	...

08000598 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800059c:	4b06      	ldr	r3, [pc, #24]	@ (80005b8 <SystemInit+0x20>)
 800059e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005a2:	4a05      	ldr	r2, [pc, #20]	@ (80005b8 <SystemInit+0x20>)
 80005a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005ac:	bf00      	nop
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	e000ed00 	.word	0xe000ed00

080005bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80005bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80005f4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 80005c0:	f7ff ffea 	bl	8000598 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80005c4:	480c      	ldr	r0, [pc, #48]	@ (80005f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80005c6:	490d      	ldr	r1, [pc, #52]	@ (80005fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80005c8:	4a0d      	ldr	r2, [pc, #52]	@ (8000600 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80005ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005cc:	e002      	b.n	80005d4 <LoopCopyDataInit>

080005ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005d2:	3304      	adds	r3, #4

080005d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005d8:	d3f9      	bcc.n	80005ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005da:	4a0a      	ldr	r2, [pc, #40]	@ (8000604 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80005dc:	4c0a      	ldr	r4, [pc, #40]	@ (8000608 <LoopFillZerobss+0x22>)
  movs r3, #0
 80005de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005e0:	e001      	b.n	80005e6 <LoopFillZerobss>

080005e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005e4:	3204      	adds	r2, #4

080005e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005e8:	d3fb      	bcc.n	80005e2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80005ea:	f000 f825 	bl	8000638 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80005ee:	f7ff fe53 	bl	8000298 <main>
  bx  lr    
 80005f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80005f4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80005f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005fc:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000600:	080006a0 	.word	0x080006a0
  ldr r2, =_sbss
 8000604:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000608:	20000024 	.word	0x20000024

0800060c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800060c:	e7fe      	b.n	800060c <ADC_IRQHandler>
	...

08000610 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000614:	4b06      	ldr	r3, [pc, #24]	@ (8000630 <HAL_IncTick+0x20>)
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	461a      	mov	r2, r3
 800061a:	4b06      	ldr	r3, [pc, #24]	@ (8000634 <HAL_IncTick+0x24>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	4413      	add	r3, r2
 8000620:	4a04      	ldr	r2, [pc, #16]	@ (8000634 <HAL_IncTick+0x24>)
 8000622:	6013      	str	r3, [r2, #0]
}
 8000624:	bf00      	nop
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop
 8000630:	20000000 	.word	0x20000000
 8000634:	20000020 	.word	0x20000020

08000638 <__libc_init_array>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	4d0d      	ldr	r5, [pc, #52]	@ (8000670 <__libc_init_array+0x38>)
 800063c:	4c0d      	ldr	r4, [pc, #52]	@ (8000674 <__libc_init_array+0x3c>)
 800063e:	1b64      	subs	r4, r4, r5
 8000640:	10a4      	asrs	r4, r4, #2
 8000642:	2600      	movs	r6, #0
 8000644:	42a6      	cmp	r6, r4
 8000646:	d109      	bne.n	800065c <__libc_init_array+0x24>
 8000648:	4d0b      	ldr	r5, [pc, #44]	@ (8000678 <__libc_init_array+0x40>)
 800064a:	4c0c      	ldr	r4, [pc, #48]	@ (800067c <__libc_init_array+0x44>)
 800064c:	f000 f818 	bl	8000680 <_init>
 8000650:	1b64      	subs	r4, r4, r5
 8000652:	10a4      	asrs	r4, r4, #2
 8000654:	2600      	movs	r6, #0
 8000656:	42a6      	cmp	r6, r4
 8000658:	d105      	bne.n	8000666 <__libc_init_array+0x2e>
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000660:	4798      	blx	r3
 8000662:	3601      	adds	r6, #1
 8000664:	e7ee      	b.n	8000644 <__libc_init_array+0xc>
 8000666:	f855 3b04 	ldr.w	r3, [r5], #4
 800066a:	4798      	blx	r3
 800066c:	3601      	adds	r6, #1
 800066e:	e7f2      	b.n	8000656 <__libc_init_array+0x1e>
 8000670:	08000698 	.word	0x08000698
 8000674:	08000698 	.word	0x08000698
 8000678:	08000698 	.word	0x08000698
 800067c:	0800069c 	.word	0x0800069c

08000680 <_init>:
 8000680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000682:	bf00      	nop
 8000684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000686:	bc08      	pop	{r3}
 8000688:	469e      	mov	lr, r3
 800068a:	4770      	bx	lr

0800068c <_fini>:
 800068c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800068e:	bf00      	nop
 8000690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000692:	bc08      	pop	{r3}
 8000694:	469e      	mov	lr, r3
 8000696:	4770      	bx	lr
