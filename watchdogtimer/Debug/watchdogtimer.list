
watchdogtimer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003f4  080001c8  080001c8  000011c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080005bc  080005bc  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080005bc  080005bc  00002004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080005bc  080005bc  00002004  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080005bc  080005bc  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005bc  080005bc  000015bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080005c0  080005c0  000015c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  080005c4  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080005c8  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080005c8  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001770  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000510  00000000  00000000  000037a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000200  00000000  00000000  00003cb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000169  00000000  00000000  00003eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022ea0  00000000  00000000  00004021  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001ff5  00000000  00000000  00026ec1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dbfc5  00000000  00000000  00028eb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00104e7b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000634  00000000  00000000  00104ec0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  001054f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000004 	.word	0x20000004
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080005a4 	.word	0x080005a4

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000008 	.word	0x20000008
 8000204:	080005a4 	.word	0x080005a4

08000208 <main>:
void delay_ms(uint32_t ms);
void LED_Init(void);
void LED_Toggle(void);
void IWDG_Init(void);
void SystemClock_Config(void) ;
int main(void) {
 8000208:	b580      	push	{r7, lr}
 800020a:	b082      	sub	sp, #8
 800020c:	af00      	add	r7, sp, #0
	SystemClock_Config();
 800020e:	f000 f8bd 	bl	800038c <SystemClock_Config>
    SysTick_Init();     // 1 ms delay using SysTick
 8000212:	f000 f819 	bl	8000248 <SysTick_Init>
    LED_Init();         // Configure PD5 for output
 8000216:	f000 f849 	bl	80002ac <LED_Init>
    IWDG_Init();        // Set up Independent Watchdog
 800021a:	f000 f88d 	bl	8000338 <IWDG_Init>

    uint8_t refresh_count = 0;
 800021e:	2300      	movs	r3, #0
 8000220:	71fb      	strb	r3, [r7, #7]

    while (1) {
        LED_Toggle();
 8000222:	f000 f879 	bl	8000318 <LED_Toggle>
        delay_ms(1000); // Wait 1 second
 8000226:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800022a:	f000 f821 	bl	8000270 <delay_ms>

        if (refresh_count < 5) {
 800022e:	79fb      	ldrb	r3, [r7, #7]
 8000230:	2b04      	cmp	r3, #4
 8000232:	d8f6      	bhi.n	8000222 <main+0x1a>
            IWDG->KR = 0xAAAA;  // Refresh watchdog whenever count is greater then 5
 8000234:	4b03      	ldr	r3, [pc, #12]	@ (8000244 <main+0x3c>)
 8000236:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 800023a:	601a      	str	r2, [r3, #0]
            					// When count is <5, IWDT is triggered and MCU is restarted which restarts the code execution from beginning
            refresh_count++;
 800023c:	79fb      	ldrb	r3, [r7, #7]
 800023e:	3301      	adds	r3, #1
 8000240:	71fb      	strb	r3, [r7, #7]
        LED_Toggle();
 8000242:	e7ee      	b.n	8000222 <main+0x1a>
 8000244:	40003000 	.word	0x40003000

08000248 <SysTick_Init>:
        }
        // After 5 loops, watchdog isn’t refreshed → MCU reset
    }
}

void SysTick_Init(void) {
 8000248:	b480      	push	{r7}
 800024a:	af00      	add	r7, sp, #0
    SysTick->LOAD = 216000 - 1;        // 1 ms delay assuming 216MHz clock
 800024c:	4b06      	ldr	r3, [pc, #24]	@ (8000268 <SysTick_Init+0x20>)
 800024e:	4a07      	ldr	r2, [pc, #28]	@ (800026c <SysTick_Init+0x24>)
 8000250:	605a      	str	r2, [r3, #4]
    SysTick->VAL = 0;
 8000252:	4b05      	ldr	r3, [pc, #20]	@ (8000268 <SysTick_Init+0x20>)
 8000254:	2200      	movs	r2, #0
 8000256:	609a      	str	r2, [r3, #8]
    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
 8000258:	4b03      	ldr	r3, [pc, #12]	@ (8000268 <SysTick_Init+0x20>)
 800025a:	2205      	movs	r2, #5
 800025c:	601a      	str	r2, [r3, #0]
                    SysTick_CTRL_ENABLE_Msk;
}
 800025e:	bf00      	nop
 8000260:	46bd      	mov	sp, r7
 8000262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000266:	4770      	bx	lr
 8000268:	e000e010 	.word	0xe000e010
 800026c:	00034bbf 	.word	0x00034bbf

08000270 <delay_ms>:

void delay_ms(uint32_t ms) {
 8000270:	b480      	push	{r7}
 8000272:	b085      	sub	sp, #20
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
    for (uint32_t i = 0; i < ms; i++) {
 8000278:	2300      	movs	r3, #0
 800027a:	60fb      	str	r3, [r7, #12]
 800027c:	e009      	b.n	8000292 <delay_ms+0x22>
        while ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == 0);
 800027e:	bf00      	nop
 8000280:	4b09      	ldr	r3, [pc, #36]	@ (80002a8 <delay_ms+0x38>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000288:	2b00      	cmp	r3, #0
 800028a:	d0f9      	beq.n	8000280 <delay_ms+0x10>
    for (uint32_t i = 0; i < ms; i++) {
 800028c:	68fb      	ldr	r3, [r7, #12]
 800028e:	3301      	adds	r3, #1
 8000290:	60fb      	str	r3, [r7, #12]
 8000292:	68fa      	ldr	r2, [r7, #12]
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	429a      	cmp	r2, r3
 8000298:	d3f1      	bcc.n	800027e <delay_ms+0xe>
    }
}
 800029a:	bf00      	nop
 800029c:	bf00      	nop
 800029e:	3714      	adds	r7, #20
 80002a0:	46bd      	mov	sp, r7
 80002a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a6:	4770      	bx	lr
 80002a8:	e000e010 	.word	0xe000e010

080002ac <LED_Init>:

void LED_Init(void) {
 80002ac:	b480      	push	{r7}
 80002ae:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 80002b0:	4b17      	ldr	r3, [pc, #92]	@ (8000310 <LED_Init+0x64>)
 80002b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002b4:	4a16      	ldr	r2, [pc, #88]	@ (8000310 <LED_Init+0x64>)
 80002b6:	f043 0308 	orr.w	r3, r3, #8
 80002ba:	6313      	str	r3, [r2, #48]	@ 0x30
    GPIOD->MODER &= ~(0x3 << (5 * 2));
 80002bc:	4b15      	ldr	r3, [pc, #84]	@ (8000314 <LED_Init+0x68>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	4a14      	ldr	r2, [pc, #80]	@ (8000314 <LED_Init+0x68>)
 80002c2:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80002c6:	6013      	str	r3, [r2, #0]
    GPIOD->MODER |=  (0x1 << (5 * 2));
 80002c8:	4b12      	ldr	r3, [pc, #72]	@ (8000314 <LED_Init+0x68>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	4a11      	ldr	r2, [pc, #68]	@ (8000314 <LED_Init+0x68>)
 80002ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80002d2:	6013      	str	r3, [r2, #0]
    GPIOD->OTYPER &= ~(1 << 5);
 80002d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000314 <LED_Init+0x68>)
 80002d6:	685b      	ldr	r3, [r3, #4]
 80002d8:	4a0e      	ldr	r2, [pc, #56]	@ (8000314 <LED_Init+0x68>)
 80002da:	f023 0320 	bic.w	r3, r3, #32
 80002de:	6053      	str	r3, [r2, #4]
    GPIOD->OSPEEDR &= ~(0x3 << (5 * 2));
 80002e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000314 <LED_Init+0x68>)
 80002e2:	689b      	ldr	r3, [r3, #8]
 80002e4:	4a0b      	ldr	r2, [pc, #44]	@ (8000314 <LED_Init+0x68>)
 80002e6:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80002ea:	6093      	str	r3, [r2, #8]
    GPIOD->PUPDR &= ~(0x3 << (5 * 2));
 80002ec:	4b09      	ldr	r3, [pc, #36]	@ (8000314 <LED_Init+0x68>)
 80002ee:	68db      	ldr	r3, [r3, #12]
 80002f0:	4a08      	ldr	r2, [pc, #32]	@ (8000314 <LED_Init+0x68>)
 80002f2:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80002f6:	60d3      	str	r3, [r2, #12]
    GPIOD->ODR |= (1 << 5);            // LED OFF (active low)
 80002f8:	4b06      	ldr	r3, [pc, #24]	@ (8000314 <LED_Init+0x68>)
 80002fa:	695b      	ldr	r3, [r3, #20]
 80002fc:	4a05      	ldr	r2, [pc, #20]	@ (8000314 <LED_Init+0x68>)
 80002fe:	f043 0320 	orr.w	r3, r3, #32
 8000302:	6153      	str	r3, [r2, #20]
}
 8000304:	bf00      	nop
 8000306:	46bd      	mov	sp, r7
 8000308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop
 8000310:	40023800 	.word	0x40023800
 8000314:	40020c00 	.word	0x40020c00

08000318 <LED_Toggle>:

void LED_Toggle(void) {
 8000318:	b480      	push	{r7}
 800031a:	af00      	add	r7, sp, #0
    GPIOD->ODR ^= (1 << 5);
 800031c:	4b05      	ldr	r3, [pc, #20]	@ (8000334 <LED_Toggle+0x1c>)
 800031e:	695b      	ldr	r3, [r3, #20]
 8000320:	4a04      	ldr	r2, [pc, #16]	@ (8000334 <LED_Toggle+0x1c>)
 8000322:	f083 0320 	eor.w	r3, r3, #32
 8000326:	6153      	str	r3, [r2, #20]
}
 8000328:	bf00      	nop
 800032a:	46bd      	mov	sp, r7
 800032c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000330:	4770      	bx	lr
 8000332:	bf00      	nop
 8000334:	40020c00 	.word	0x40020c00

08000338 <IWDG_Init>:

void IWDG_Init(void) {
 8000338:	b480      	push	{r7}
 800033a:	af00      	add	r7, sp, #0
    // Step 1: Enable write access to IWDG_PR and IWDG_RLR
    IWDG->KR = 0x5555;
 800033c:	4b12      	ldr	r3, [pc, #72]	@ (8000388 <IWDG_Init+0x50>)
 800033e:	f245 5255 	movw	r2, #21845	@ 0x5555
 8000342:	601a      	str	r2, [r3, #0]

    // Step 2: Wait until prescaler update is complete
    while (IWDG->SR & IWDG_SR_PVU);
 8000344:	bf00      	nop
 8000346:	4b10      	ldr	r3, [pc, #64]	@ (8000388 <IWDG_Init+0x50>)
 8000348:	68db      	ldr	r3, [r3, #12]
 800034a:	f003 0301 	and.w	r3, r3, #1
 800034e:	2b00      	cmp	r3, #0
 8000350:	d1f9      	bne.n	8000346 <IWDG_Init+0xe>

    // Step 3: Set prescaler to divide LSI (≈ 32kHz) by 256
    IWDG->PR = IWDG_PR_PR_0 | IWDG_PR_PR_1 | IWDG_PR_PR_2; // PR = 0x07
 8000352:	4b0d      	ldr	r3, [pc, #52]	@ (8000388 <IWDG_Init+0x50>)
 8000354:	2207      	movs	r2, #7
 8000356:	605a      	str	r2, [r3, #4]

    // Step 4: Wait until reload value update is complete
    while (IWDG->SR & IWDG_SR_RVU);
 8000358:	bf00      	nop
 800035a:	4b0b      	ldr	r3, [pc, #44]	@ (8000388 <IWDG_Init+0x50>)
 800035c:	68db      	ldr	r3, [r3, #12]
 800035e:	f003 0302 	and.w	r3, r3, #2
 8000362:	2b00      	cmp	r3, #0
 8000364:	d1f9      	bne.n	800035a <IWDG_Init+0x22>

    // Step 5: Set reload value to 250 for ~2 second timeout
    // Calculation: (LSI / 256) = 125 Hz ⇒ 1 tick ≈ 8 ms ⇒ 250 * 8 ms ≈ 2000 ms
    IWDG->RLR = 250;
 8000366:	4b08      	ldr	r3, [pc, #32]	@ (8000388 <IWDG_Init+0x50>)
 8000368:	22fa      	movs	r2, #250	@ 0xfa
 800036a:	609a      	str	r2, [r3, #8]

    // Step 6: Refresh watchdog immediately after config
    IWDG->KR = 0xAAAA;
 800036c:	4b06      	ldr	r3, [pc, #24]	@ (8000388 <IWDG_Init+0x50>)
 800036e:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8000372:	601a      	str	r2, [r3, #0]

    // Step 7: Start the watchdog
    IWDG->KR = 0xCCCC;
 8000374:	4b04      	ldr	r3, [pc, #16]	@ (8000388 <IWDG_Init+0x50>)
 8000376:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 800037a:	601a      	str	r2, [r3, #0]
}
 800037c:	bf00      	nop
 800037e:	46bd      	mov	sp, r7
 8000380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000384:	4770      	bx	lr
 8000386:	bf00      	nop
 8000388:	40003000 	.word	0x40003000

0800038c <SystemClock_Config>:
void SystemClock_Config(void) {
 800038c:	b480      	push	{r7}
 800038e:	af00      	add	r7, sp, #0
    // 1. Enable HSE
    RCC->CR |= RCC_CR_HSEON;
 8000390:	4b2e      	ldr	r3, [pc, #184]	@ (800044c <SystemClock_Config+0xc0>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a2d      	ldr	r2, [pc, #180]	@ (800044c <SystemClock_Config+0xc0>)
 8000396:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800039a:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & RCC_CR_HSERDY));  // Wait until HSE is ready
 800039c:	bf00      	nop
 800039e:	4b2b      	ldr	r3, [pc, #172]	@ (800044c <SystemClock_Config+0xc0>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d0f9      	beq.n	800039e <SystemClock_Config+0x12>

    // 2. Configure Power Regulator
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80003aa:	4b28      	ldr	r3, [pc, #160]	@ (800044c <SystemClock_Config+0xc0>)
 80003ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80003ae:	4a27      	ldr	r2, [pc, #156]	@ (800044c <SystemClock_Config+0xc0>)
 80003b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80003b4:	6413      	str	r3, [r2, #64]	@ 0x40
    PWR->CR1 |= PWR_CR1_ODEN;  // Overdrive enable
 80003b6:	4b26      	ldr	r3, [pc, #152]	@ (8000450 <SystemClock_Config+0xc4>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	4a25      	ldr	r2, [pc, #148]	@ (8000450 <SystemClock_Config+0xc4>)
 80003bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80003c0:	6013      	str	r3, [r2, #0]
    while (!(PWR->CSR1 & PWR_CSR1_ODRDY));
 80003c2:	bf00      	nop
 80003c4:	4b22      	ldr	r3, [pc, #136]	@ (8000450 <SystemClock_Config+0xc4>)
 80003c6:	685b      	ldr	r3, [r3, #4]
 80003c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d0f9      	beq.n	80003c4 <SystemClock_Config+0x38>

    PWR->CR1 |= PWR_CR1_ODSWEN;  // Switch Overdrive
 80003d0:	4b1f      	ldr	r3, [pc, #124]	@ (8000450 <SystemClock_Config+0xc4>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	4a1e      	ldr	r2, [pc, #120]	@ (8000450 <SystemClock_Config+0xc4>)
 80003d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80003da:	6013      	str	r3, [r2, #0]
    while (!(PWR->CSR1 & PWR_CSR1_ODSWRDY));
 80003dc:	bf00      	nop
 80003de:	4b1c      	ldr	r3, [pc, #112]	@ (8000450 <SystemClock_Config+0xc4>)
 80003e0:	685b      	ldr	r3, [r3, #4]
 80003e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d0f9      	beq.n	80003de <SystemClock_Config+0x52>

    // 3. Configure Flash latency
    FLASH->ACR = FLASH_ACR_LATENCY_7WS | FLASH_ACR_PRFTEN | FLASH_ACR_ARTEN;
 80003ea:	4b1a      	ldr	r3, [pc, #104]	@ (8000454 <SystemClock_Config+0xc8>)
 80003ec:	f240 3207 	movw	r2, #775	@ 0x307
 80003f0:	601a      	str	r2, [r3, #0]

    // 4. Configure PLL
    RCC->PLLCFGR = (25 << RCC_PLLCFGR_PLLM_Pos)  | // PLLM = 25
 80003f2:	4b16      	ldr	r3, [pc, #88]	@ (800044c <SystemClock_Config+0xc0>)
 80003f4:	4a18      	ldr	r2, [pc, #96]	@ (8000458 <SystemClock_Config+0xcc>)
 80003f6:	605a      	str	r2, [r3, #4]
                   (0 << RCC_PLLCFGR_PLLP_Pos)   | // PLLP = 2 (00 = /2)
                   (RCC_PLLCFGR_PLLSRC_HSE)      |
                   (9 << RCC_PLLCFGR_PLLQ_Pos);    // PLLQ = 9

    // 5. Enable PLL
    RCC->CR |= RCC_CR_PLLON;
 80003f8:	4b14      	ldr	r3, [pc, #80]	@ (800044c <SystemClock_Config+0xc0>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	4a13      	ldr	r2, [pc, #76]	@ (800044c <SystemClock_Config+0xc0>)
 80003fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000402:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & RCC_CR_PLLRDY));  // Wait for PLL to lock
 8000404:	bf00      	nop
 8000406:	4b11      	ldr	r3, [pc, #68]	@ (800044c <SystemClock_Config+0xc0>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800040e:	2b00      	cmp	r3, #0
 8000410:	d0f9      	beq.n	8000406 <SystemClock_Config+0x7a>

    // 6. Configure clock dividers
    RCC->CFGR = RCC_CFGR_HPRE_DIV1 |    // AHB = SYSCLK / 1
 8000412:	4b0e      	ldr	r3, [pc, #56]	@ (800044c <SystemClock_Config+0xc0>)
 8000414:	f44f 4214 	mov.w	r2, #37888	@ 0x9400
 8000418:	609a      	str	r2, [r3, #8]
                RCC_CFGR_PPRE1_DIV4 |   // APB1 = AHB / 4
                RCC_CFGR_PPRE2_DIV2;    // APB2 = AHB / 2

    // 7. Switch system clock to PLL
    RCC->CFGR &= ~RCC_CFGR_SW;
 800041a:	4b0c      	ldr	r3, [pc, #48]	@ (800044c <SystemClock_Config+0xc0>)
 800041c:	689b      	ldr	r3, [r3, #8]
 800041e:	4a0b      	ldr	r2, [pc, #44]	@ (800044c <SystemClock_Config+0xc0>)
 8000420:	f023 0303 	bic.w	r3, r3, #3
 8000424:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000426:	4b09      	ldr	r3, [pc, #36]	@ (800044c <SystemClock_Config+0xc0>)
 8000428:	689b      	ldr	r3, [r3, #8]
 800042a:	4a08      	ldr	r2, [pc, #32]	@ (800044c <SystemClock_Config+0xc0>)
 800042c:	f043 0302 	orr.w	r3, r3, #2
 8000430:	6093      	str	r3, [r2, #8]
    while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);  // Wait until PLL is system clock
 8000432:	bf00      	nop
 8000434:	4b05      	ldr	r3, [pc, #20]	@ (800044c <SystemClock_Config+0xc0>)
 8000436:	689b      	ldr	r3, [r3, #8]
 8000438:	f003 030c 	and.w	r3, r3, #12
 800043c:	2b08      	cmp	r3, #8
 800043e:	d1f9      	bne.n	8000434 <SystemClock_Config+0xa8>
}
 8000440:	bf00      	nop
 8000442:	bf00      	nop
 8000444:	46bd      	mov	sp, r7
 8000446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044a:	4770      	bx	lr
 800044c:	40023800 	.word	0x40023800
 8000450:	40007000 	.word	0x40007000
 8000454:	40023c00 	.word	0x40023c00
 8000458:	09406c19 	.word	0x09406c19

0800045c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800045c:	b480      	push	{r7}
 800045e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000460:	bf00      	nop
 8000462:	e7fd      	b.n	8000460 <NMI_Handler+0x4>

08000464 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000464:	b480      	push	{r7}
 8000466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000468:	bf00      	nop
 800046a:	e7fd      	b.n	8000468 <HardFault_Handler+0x4>

0800046c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000470:	bf00      	nop
 8000472:	e7fd      	b.n	8000470 <MemManage_Handler+0x4>

08000474 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000474:	b480      	push	{r7}
 8000476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000478:	bf00      	nop
 800047a:	e7fd      	b.n	8000478 <BusFault_Handler+0x4>

0800047c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000480:	bf00      	nop
 8000482:	e7fd      	b.n	8000480 <UsageFault_Handler+0x4>

08000484 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000488:	bf00      	nop
 800048a:	46bd      	mov	sp, r7
 800048c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000490:	4770      	bx	lr

08000492 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000492:	b480      	push	{r7}
 8000494:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000496:	bf00      	nop
 8000498:	46bd      	mov	sp, r7
 800049a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049e:	4770      	bx	lr

080004a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004a4:	bf00      	nop
 80004a6:	46bd      	mov	sp, r7
 80004a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ac:	4770      	bx	lr

080004ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004ae:	b580      	push	{r7, lr}
 80004b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004b2:	f000 f83f 	bl	8000534 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004b6:	bf00      	nop
 80004b8:	bd80      	pop	{r7, pc}
	...

080004bc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80004c0:	4b06      	ldr	r3, [pc, #24]	@ (80004dc <SystemInit+0x20>)
 80004c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80004c6:	4a05      	ldr	r2, [pc, #20]	@ (80004dc <SystemInit+0x20>)
 80004c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80004cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004d0:	bf00      	nop
 80004d2:	46bd      	mov	sp, r7
 80004d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop
 80004dc:	e000ed00 	.word	0xe000ed00

080004e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80004e0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000518 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 80004e4:	f7ff ffea 	bl	80004bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80004e8:	480c      	ldr	r0, [pc, #48]	@ (800051c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80004ea:	490d      	ldr	r1, [pc, #52]	@ (8000520 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80004ec:	4a0d      	ldr	r2, [pc, #52]	@ (8000524 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80004ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004f0:	e002      	b.n	80004f8 <LoopCopyDataInit>

080004f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004f6:	3304      	adds	r3, #4

080004f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004fc:	d3f9      	bcc.n	80004f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004fe:	4a0a      	ldr	r2, [pc, #40]	@ (8000528 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000500:	4c0a      	ldr	r4, [pc, #40]	@ (800052c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000502:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000504:	e001      	b.n	800050a <LoopFillZerobss>

08000506 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000506:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000508:	3204      	adds	r2, #4

0800050a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800050a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800050c:	d3fb      	bcc.n	8000506 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800050e:	f000 f825 	bl	800055c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000512:	f7ff fe79 	bl	8000208 <main>
  bx  lr    
 8000516:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000518:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800051c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000520:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000524:	080005c4 	.word	0x080005c4
  ldr r2, =_sbss
 8000528:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 800052c:	20000024 	.word	0x20000024

08000530 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000530:	e7fe      	b.n	8000530 <ADC_IRQHandler>
	...

08000534 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000538:	4b06      	ldr	r3, [pc, #24]	@ (8000554 <HAL_IncTick+0x20>)
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	461a      	mov	r2, r3
 800053e:	4b06      	ldr	r3, [pc, #24]	@ (8000558 <HAL_IncTick+0x24>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	4413      	add	r3, r2
 8000544:	4a04      	ldr	r2, [pc, #16]	@ (8000558 <HAL_IncTick+0x24>)
 8000546:	6013      	str	r3, [r2, #0]
}
 8000548:	bf00      	nop
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	20000000 	.word	0x20000000
 8000558:	20000020 	.word	0x20000020

0800055c <__libc_init_array>:
 800055c:	b570      	push	{r4, r5, r6, lr}
 800055e:	4d0d      	ldr	r5, [pc, #52]	@ (8000594 <__libc_init_array+0x38>)
 8000560:	4c0d      	ldr	r4, [pc, #52]	@ (8000598 <__libc_init_array+0x3c>)
 8000562:	1b64      	subs	r4, r4, r5
 8000564:	10a4      	asrs	r4, r4, #2
 8000566:	2600      	movs	r6, #0
 8000568:	42a6      	cmp	r6, r4
 800056a:	d109      	bne.n	8000580 <__libc_init_array+0x24>
 800056c:	4d0b      	ldr	r5, [pc, #44]	@ (800059c <__libc_init_array+0x40>)
 800056e:	4c0c      	ldr	r4, [pc, #48]	@ (80005a0 <__libc_init_array+0x44>)
 8000570:	f000 f818 	bl	80005a4 <_init>
 8000574:	1b64      	subs	r4, r4, r5
 8000576:	10a4      	asrs	r4, r4, #2
 8000578:	2600      	movs	r6, #0
 800057a:	42a6      	cmp	r6, r4
 800057c:	d105      	bne.n	800058a <__libc_init_array+0x2e>
 800057e:	bd70      	pop	{r4, r5, r6, pc}
 8000580:	f855 3b04 	ldr.w	r3, [r5], #4
 8000584:	4798      	blx	r3
 8000586:	3601      	adds	r6, #1
 8000588:	e7ee      	b.n	8000568 <__libc_init_array+0xc>
 800058a:	f855 3b04 	ldr.w	r3, [r5], #4
 800058e:	4798      	blx	r3
 8000590:	3601      	adds	r6, #1
 8000592:	e7f2      	b.n	800057a <__libc_init_array+0x1e>
 8000594:	080005bc 	.word	0x080005bc
 8000598:	080005bc 	.word	0x080005bc
 800059c:	080005bc 	.word	0x080005bc
 80005a0:	080005c0 	.word	0x080005c0

080005a4 <_init>:
 80005a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005a6:	bf00      	nop
 80005a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005aa:	bc08      	pop	{r3}
 80005ac:	469e      	mov	lr, r3
 80005ae:	4770      	bx	lr

080005b0 <_fini>:
 80005b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005b2:	bf00      	nop
 80005b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005b6:	bc08      	pop	{r3}
 80005b8:	469e      	mov	lr, r3
 80005ba:	4770      	bx	lr
