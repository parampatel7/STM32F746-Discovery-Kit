
systick_ledblink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000348  080001c8  080001c8  000011c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000510  08000510  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000510  08000510  00002004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000510  08000510  00002004  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000510  08000510  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000510  08000510  00001510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000514  08000514  00001514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000518  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  0800051c  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  0800051c  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001691  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000004ff  00000000  00000000  000036c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001f8  00000000  00000000  00003bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000163  00000000  00000000  00003dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022ea0  00000000  00000000  00003f23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001f47  00000000  00000000  00026dc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dbf89  00000000  00000000  00028d0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00104c93  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000610  00000000  00000000  00104cd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  001052e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000004 	.word	0x20000004
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080004f8 	.word	0x080004f8

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000008 	.word	0x20000008
 8000204:	080004f8 	.word	0x080004f8

08000208 <main>:
void SysTick_Init(void);
void delay_ms(uint32_t ms);
void LED_Init(void);
void LED_Toggle(void);
void system_clock_config(void);
int main(void) {
 8000208:	b580      	push	{r7, lr}
 800020a:	af00      	add	r7, sp, #0
    LED_Init();
 800020c:	f000 f80c 	bl	8000228 <LED_Init>
    system_clock_config();// Initialize PD5 as output
 8000210:	f000 f882 	bl	8000318 <system_clock_config>
    SysTick_Init();     // Initialize SysTick timer
 8000214:	f000 f83e 	bl	8000294 <SysTick_Init>

    while (1) {
        LED_Toggle();   // Toggle LED
 8000218:	f000 f86e 	bl	80002f8 <LED_Toggle>
        delay_ms(2000); // Wait 2 seconds
 800021c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000220:	f000 f84c 	bl	80002bc <delay_ms>
        LED_Toggle();   // Toggle LED
 8000224:	bf00      	nop
 8000226:	e7f7      	b.n	8000218 <main+0x10>

08000228 <LED_Init>:
    }
}

void LED_Init(void) {
 8000228:	b480      	push	{r7}
 800022a:	af00      	add	r7, sp, #0
    // Enable GPIOD clock
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 800022c:	4b17      	ldr	r3, [pc, #92]	@ (800028c <LED_Init+0x64>)
 800022e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000230:	4a16      	ldr	r2, [pc, #88]	@ (800028c <LED_Init+0x64>)
 8000232:	f043 0308 	orr.w	r3, r3, #8
 8000236:	6313      	str	r3, [r2, #48]	@ 0x30

    // Set PD5 as output
    GPIOD->MODER &= ~(0x3 << (5 * 2));      // Clear mode bits
 8000238:	4b15      	ldr	r3, [pc, #84]	@ (8000290 <LED_Init+0x68>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4a14      	ldr	r2, [pc, #80]	@ (8000290 <LED_Init+0x68>)
 800023e:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000242:	6013      	str	r3, [r2, #0]
    GPIOD->MODER |=  (0x1 << (5 * 2));      // Set to General Purpose Output
 8000244:	4b12      	ldr	r3, [pc, #72]	@ (8000290 <LED_Init+0x68>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	4a11      	ldr	r2, [pc, #68]	@ (8000290 <LED_Init+0x68>)
 800024a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800024e:	6013      	str	r3, [r2, #0]

    // Set output type to push-pull
    GPIOD->OTYPER &= ~(1 << 5);
 8000250:	4b0f      	ldr	r3, [pc, #60]	@ (8000290 <LED_Init+0x68>)
 8000252:	685b      	ldr	r3, [r3, #4]
 8000254:	4a0e      	ldr	r2, [pc, #56]	@ (8000290 <LED_Init+0x68>)
 8000256:	f023 0320 	bic.w	r3, r3, #32
 800025a:	6053      	str	r3, [r2, #4]

    // Set speed to low
    GPIOD->OSPEEDR &= ~(0x3 << (5 * 2));
 800025c:	4b0c      	ldr	r3, [pc, #48]	@ (8000290 <LED_Init+0x68>)
 800025e:	689b      	ldr	r3, [r3, #8]
 8000260:	4a0b      	ldr	r2, [pc, #44]	@ (8000290 <LED_Init+0x68>)
 8000262:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000266:	6093      	str	r3, [r2, #8]

    // No pull-up/pull-down
    GPIOD->PUPDR &= ~(0x3 << (5 * 2));
 8000268:	4b09      	ldr	r3, [pc, #36]	@ (8000290 <LED_Init+0x68>)
 800026a:	68db      	ldr	r3, [r3, #12]
 800026c:	4a08      	ldr	r2, [pc, #32]	@ (8000290 <LED_Init+0x68>)
 800026e:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000272:	60d3      	str	r3, [r2, #12]

    // Set initial state (LED OFF - active low)
    GPIOD->ODR |= (1 << 5);
 8000274:	4b06      	ldr	r3, [pc, #24]	@ (8000290 <LED_Init+0x68>)
 8000276:	695b      	ldr	r3, [r3, #20]
 8000278:	4a05      	ldr	r2, [pc, #20]	@ (8000290 <LED_Init+0x68>)
 800027a:	f043 0320 	orr.w	r3, r3, #32
 800027e:	6153      	str	r3, [r2, #20]
}
 8000280:	bf00      	nop
 8000282:	46bd      	mov	sp, r7
 8000284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000288:	4770      	bx	lr
 800028a:	bf00      	nop
 800028c:	40023800 	.word	0x40023800
 8000290:	40020c00 	.word	0x40020c00

08000294 <SysTick_Init>:

void SysTick_Init(void) {
 8000294:	b480      	push	{r7}
 8000296:	af00      	add	r7, sp, #0

	/*    The SystemCoreClock is assumed to be 216 MHz, which means:
        The processor runs at 216,000,000 cycles per second
    	Since 1 second = 1,000 milliseconds, then:
		So, for a delay of 1 millisecond, you need the SysTick timer to count */
    SysTick->LOAD = 216000 - 1;  // 1 ms delay
 8000298:	4b06      	ldr	r3, [pc, #24]	@ (80002b4 <SysTick_Init+0x20>)
 800029a:	4a07      	ldr	r2, [pc, #28]	@ (80002b8 <SysTick_Init+0x24>)
 800029c:	605a      	str	r2, [r3, #4]
    SysTick->VAL = 0;            // Resets the current value register.   This ensures the timer starts fresh from the reload value.
 800029e:	4b05      	ldr	r3, [pc, #20]	@ (80002b4 <SysTick_Init+0x20>)
 80002a0:	2200      	movs	r2, #0
 80002a2:	609a      	str	r2, [r3, #8]
    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
 80002a4:	4b03      	ldr	r3, [pc, #12]	@ (80002b4 <SysTick_Init+0x20>)
 80002a6:	2205      	movs	r2, #5
 80002a8:	601a      	str	r2, [r3, #0]
                    SysTick_CTRL_ENABLE_Msk;
    /*SysTick_CTRL_CLKSOURCE_Msk: Selects processor (core) clock as source. SysTick_CTRL_ENABLE_Msk: Starts the timer.*/
}
 80002aa:	bf00      	nop
 80002ac:	46bd      	mov	sp, r7
 80002ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b2:	4770      	bx	lr
 80002b4:	e000e010 	.word	0xe000e010
 80002b8:	00034bbf 	.word	0x00034bbf

080002bc <delay_ms>:

void delay_ms(uint32_t ms) {
 80002bc:	b480      	push	{r7}
 80002be:	b085      	sub	sp, #20
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	6078      	str	r0, [r7, #4]
    for (uint32_t i = 0; i < ms; i++) {
 80002c4:	2300      	movs	r3, #0
 80002c6:	60fb      	str	r3, [r7, #12]
 80002c8:	e009      	b.n	80002de <delay_ms+0x22>
        while ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == 0);
 80002ca:	bf00      	nop
 80002cc:	4b09      	ldr	r3, [pc, #36]	@ (80002f4 <delay_ms+0x38>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d0f9      	beq.n	80002cc <delay_ms+0x10>
    for (uint32_t i = 0; i < ms; i++) {
 80002d8:	68fb      	ldr	r3, [r7, #12]
 80002da:	3301      	adds	r3, #1
 80002dc:	60fb      	str	r3, [r7, #12]
 80002de:	68fa      	ldr	r2, [r7, #12]
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	429a      	cmp	r2, r3
 80002e4:	d3f1      	bcc.n	80002ca <delay_ms+0xe>
    }
}
 80002e6:	bf00      	nop
 80002e8:	bf00      	nop
 80002ea:	3714      	adds	r7, #20
 80002ec:	46bd      	mov	sp, r7
 80002ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f2:	4770      	bx	lr
 80002f4:	e000e010 	.word	0xe000e010

080002f8 <LED_Toggle>:

void LED_Toggle(void) {
 80002f8:	b480      	push	{r7}
 80002fa:	af00      	add	r7, sp, #0
    GPIOD->ODR ^= (1 << 5);  // Toggle PD5
 80002fc:	4b05      	ldr	r3, [pc, #20]	@ (8000314 <LED_Toggle+0x1c>)
 80002fe:	695b      	ldr	r3, [r3, #20]
 8000300:	4a04      	ldr	r2, [pc, #16]	@ (8000314 <LED_Toggle+0x1c>)
 8000302:	f083 0320 	eor.w	r3, r3, #32
 8000306:	6153      	str	r3, [r2, #20]
}
 8000308:	bf00      	nop
 800030a:	46bd      	mov	sp, r7
 800030c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000310:	4770      	bx	lr
 8000312:	bf00      	nop
 8000314:	40020c00 	.word	0x40020c00

08000318 <system_clock_config>:
void system_clock_config(void)
{
 8000318:	b480      	push	{r7}
 800031a:	af00      	add	r7, sp, #0
    RCC->CR |= RCC_CR_HSEON;
 800031c:	4b21      	ldr	r3, [pc, #132]	@ (80003a4 <system_clock_config+0x8c>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	4a20      	ldr	r2, [pc, #128]	@ (80003a4 <system_clock_config+0x8c>)
 8000322:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000326:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & RCC_CR_HSERDY));
 8000328:	bf00      	nop
 800032a:	4b1e      	ldr	r3, [pc, #120]	@ (80003a4 <system_clock_config+0x8c>)
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000332:	2b00      	cmp	r3, #0
 8000334:	d0f9      	beq.n	800032a <system_clock_config+0x12>

    FLASH->ACR = FLASH_ACR_LATENCY_7WS | FLASH_ACR_PRFTEN | FLASH_ACR_ARTEN;//latency for 216MHz, Enable Prefetch, Enable Adaptice Real Time accelerator
 8000336:	4b1c      	ldr	r3, [pc, #112]	@ (80003a8 <system_clock_config+0x90>)
 8000338:	f240 3207 	movw	r2, #775	@ 0x307
 800033c:	601a      	str	r2, [r3, #0]
    RCC->PLLCFGR = (25 << RCC_PLLCFGR_PLLM_Pos) |
 800033e:	4b19      	ldr	r3, [pc, #100]	@ (80003a4 <system_clock_config+0x8c>)
 8000340:	4a1a      	ldr	r2, [pc, #104]	@ (80003ac <system_clock_config+0x94>)
 8000342:	605a      	str	r2, [r3, #4]
                   (432 << RCC_PLLCFGR_PLLN_Pos) |
                   (0 << RCC_PLLCFGR_PLLP_Pos) |
                   RCC_PLLCFGR_PLLSRC_HSE;

    RCC->CR |= RCC_CR_PLLON;
 8000344:	4b17      	ldr	r3, [pc, #92]	@ (80003a4 <system_clock_config+0x8c>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	4a16      	ldr	r2, [pc, #88]	@ (80003a4 <system_clock_config+0x8c>)
 800034a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800034e:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & RCC_CR_PLLRDY));
 8000350:	bf00      	nop
 8000352:	4b14      	ldr	r3, [pc, #80]	@ (80003a4 <system_clock_config+0x8c>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800035a:	2b00      	cmp	r3, #0
 800035c:	d0f9      	beq.n	8000352 <system_clock_config+0x3a>

    RCC->CFGR |= (0 << RCC_CFGR_HPRE_Pos);   // AHB = 216 MHz
 800035e:	4b11      	ldr	r3, [pc, #68]	@ (80003a4 <system_clock_config+0x8c>)
 8000360:	4a10      	ldr	r2, [pc, #64]	@ (80003a4 <system_clock_config+0x8c>)
 8000362:	689b      	ldr	r3, [r3, #8]
 8000364:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= (5 << RCC_CFGR_PPRE1_Pos);  // APB1 = 54 MHz
 8000366:	4b0f      	ldr	r3, [pc, #60]	@ (80003a4 <system_clock_config+0x8c>)
 8000368:	689b      	ldr	r3, [r3, #8]
 800036a:	4a0e      	ldr	r2, [pc, #56]	@ (80003a4 <system_clock_config+0x8c>)
 800036c:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 8000370:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= (4 << RCC_CFGR_PPRE2_Pos);  // APB2 = 108 MHz
 8000372:	4b0c      	ldr	r3, [pc, #48]	@ (80003a4 <system_clock_config+0x8c>)
 8000374:	689b      	ldr	r3, [r3, #8]
 8000376:	4a0b      	ldr	r2, [pc, #44]	@ (80003a4 <system_clock_config+0x8c>)
 8000378:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800037c:	6093      	str	r3, [r2, #8]

    RCC->CFGR |= RCC_CFGR_SW_PLL;
 800037e:	4b09      	ldr	r3, [pc, #36]	@ (80003a4 <system_clock_config+0x8c>)
 8000380:	689b      	ldr	r3, [r3, #8]
 8000382:	4a08      	ldr	r2, [pc, #32]	@ (80003a4 <system_clock_config+0x8c>)
 8000384:	f043 0302 	orr.w	r3, r3, #2
 8000388:	6093      	str	r3, [r2, #8]
    while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 800038a:	bf00      	nop
 800038c:	4b05      	ldr	r3, [pc, #20]	@ (80003a4 <system_clock_config+0x8c>)
 800038e:	689b      	ldr	r3, [r3, #8]
 8000390:	f003 030c 	and.w	r3, r3, #12
 8000394:	2b08      	cmp	r3, #8
 8000396:	d1f9      	bne.n	800038c <system_clock_config+0x74>
}
 8000398:	bf00      	nop
 800039a:	bf00      	nop
 800039c:	46bd      	mov	sp, r7
 800039e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a2:	4770      	bx	lr
 80003a4:	40023800 	.word	0x40023800
 80003a8:	40023c00 	.word	0x40023c00
 80003ac:	00406c19 	.word	0x00406c19

080003b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003b0:	b480      	push	{r7}
 80003b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80003b4:	bf00      	nop
 80003b6:	e7fd      	b.n	80003b4 <NMI_Handler+0x4>

080003b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003b8:	b480      	push	{r7}
 80003ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003bc:	bf00      	nop
 80003be:	e7fd      	b.n	80003bc <HardFault_Handler+0x4>

080003c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003c0:	b480      	push	{r7}
 80003c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003c4:	bf00      	nop
 80003c6:	e7fd      	b.n	80003c4 <MemManage_Handler+0x4>

080003c8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003c8:	b480      	push	{r7}
 80003ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003cc:	bf00      	nop
 80003ce:	e7fd      	b.n	80003cc <BusFault_Handler+0x4>

080003d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003d0:	b480      	push	{r7}
 80003d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003d4:	bf00      	nop
 80003d6:	e7fd      	b.n	80003d4 <UsageFault_Handler+0x4>

080003d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003d8:	b480      	push	{r7}
 80003da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003dc:	bf00      	nop
 80003de:	46bd      	mov	sp, r7
 80003e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e4:	4770      	bx	lr

080003e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003e6:	b480      	push	{r7}
 80003e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003ea:	bf00      	nop
 80003ec:	46bd      	mov	sp, r7
 80003ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f2:	4770      	bx	lr

080003f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003f8:	bf00      	nop
 80003fa:	46bd      	mov	sp, r7
 80003fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000400:	4770      	bx	lr

08000402 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000402:	b580      	push	{r7, lr}
 8000404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000406:	f000 f83f 	bl	8000488 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800040a:	bf00      	nop
 800040c:	bd80      	pop	{r7, pc}
	...

08000410 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000414:	4b06      	ldr	r3, [pc, #24]	@ (8000430 <SystemInit+0x20>)
 8000416:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800041a:	4a05      	ldr	r2, [pc, #20]	@ (8000430 <SystemInit+0x20>)
 800041c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000420:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000424:	bf00      	nop
 8000426:	46bd      	mov	sp, r7
 8000428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042c:	4770      	bx	lr
 800042e:	bf00      	nop
 8000430:	e000ed00 	.word	0xe000ed00

08000434 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000434:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800046c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000438:	f7ff ffea 	bl	8000410 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800043c:	480c      	ldr	r0, [pc, #48]	@ (8000470 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800043e:	490d      	ldr	r1, [pc, #52]	@ (8000474 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000440:	4a0d      	ldr	r2, [pc, #52]	@ (8000478 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000442:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000444:	e002      	b.n	800044c <LoopCopyDataInit>

08000446 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000446:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000448:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800044a:	3304      	adds	r3, #4

0800044c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800044c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800044e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000450:	d3f9      	bcc.n	8000446 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000452:	4a0a      	ldr	r2, [pc, #40]	@ (800047c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000454:	4c0a      	ldr	r4, [pc, #40]	@ (8000480 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000456:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000458:	e001      	b.n	800045e <LoopFillZerobss>

0800045a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800045a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800045c:	3204      	adds	r2, #4

0800045e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800045e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000460:	d3fb      	bcc.n	800045a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000462:	f000 f825 	bl	80004b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000466:	f7ff fecf 	bl	8000208 <main>
  bx  lr    
 800046a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800046c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000470:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000474:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000478:	08000518 	.word	0x08000518
  ldr r2, =_sbss
 800047c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000480:	20000024 	.word	0x20000024

08000484 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000484:	e7fe      	b.n	8000484 <ADC_IRQHandler>
	...

08000488 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800048c:	4b06      	ldr	r3, [pc, #24]	@ (80004a8 <HAL_IncTick+0x20>)
 800048e:	781b      	ldrb	r3, [r3, #0]
 8000490:	461a      	mov	r2, r3
 8000492:	4b06      	ldr	r3, [pc, #24]	@ (80004ac <HAL_IncTick+0x24>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	4413      	add	r3, r2
 8000498:	4a04      	ldr	r2, [pc, #16]	@ (80004ac <HAL_IncTick+0x24>)
 800049a:	6013      	str	r3, [r2, #0]
}
 800049c:	bf00      	nop
 800049e:	46bd      	mov	sp, r7
 80004a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a4:	4770      	bx	lr
 80004a6:	bf00      	nop
 80004a8:	20000000 	.word	0x20000000
 80004ac:	20000020 	.word	0x20000020

080004b0 <__libc_init_array>:
 80004b0:	b570      	push	{r4, r5, r6, lr}
 80004b2:	4d0d      	ldr	r5, [pc, #52]	@ (80004e8 <__libc_init_array+0x38>)
 80004b4:	4c0d      	ldr	r4, [pc, #52]	@ (80004ec <__libc_init_array+0x3c>)
 80004b6:	1b64      	subs	r4, r4, r5
 80004b8:	10a4      	asrs	r4, r4, #2
 80004ba:	2600      	movs	r6, #0
 80004bc:	42a6      	cmp	r6, r4
 80004be:	d109      	bne.n	80004d4 <__libc_init_array+0x24>
 80004c0:	4d0b      	ldr	r5, [pc, #44]	@ (80004f0 <__libc_init_array+0x40>)
 80004c2:	4c0c      	ldr	r4, [pc, #48]	@ (80004f4 <__libc_init_array+0x44>)
 80004c4:	f000 f818 	bl	80004f8 <_init>
 80004c8:	1b64      	subs	r4, r4, r5
 80004ca:	10a4      	asrs	r4, r4, #2
 80004cc:	2600      	movs	r6, #0
 80004ce:	42a6      	cmp	r6, r4
 80004d0:	d105      	bne.n	80004de <__libc_init_array+0x2e>
 80004d2:	bd70      	pop	{r4, r5, r6, pc}
 80004d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80004d8:	4798      	blx	r3
 80004da:	3601      	adds	r6, #1
 80004dc:	e7ee      	b.n	80004bc <__libc_init_array+0xc>
 80004de:	f855 3b04 	ldr.w	r3, [r5], #4
 80004e2:	4798      	blx	r3
 80004e4:	3601      	adds	r6, #1
 80004e6:	e7f2      	b.n	80004ce <__libc_init_array+0x1e>
 80004e8:	08000510 	.word	0x08000510
 80004ec:	08000510 	.word	0x08000510
 80004f0:	08000510 	.word	0x08000510
 80004f4:	08000514 	.word	0x08000514

080004f8 <_init>:
 80004f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004fa:	bf00      	nop
 80004fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004fe:	bc08      	pop	{r3}
 8000500:	469e      	mov	lr, r3
 8000502:	4770      	bx	lr

08000504 <_fini>:
 8000504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000506:	bf00      	nop
 8000508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800050a:	bc08      	pop	{r3}
 800050c:	469e      	mov	lr, r3
 800050e:	4770      	bx	lr
