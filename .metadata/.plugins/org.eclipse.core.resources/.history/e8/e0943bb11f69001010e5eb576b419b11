
#include "main.h"
/*For window of 80, 1 tick timer period = 8 * 4096 / 54M = 0.61 ms. So needs to wait for atleast
 * (127 * 80) * 0.61ms = 28.5ms, Hence refresh the window watchdog timer after 28.5ms*/

/*WWDT if refreshed between (127-80) where 80 is the window time it will lead to MCU reset.
 * Hence it needs to be refreshed after counter value <= 80*/

/* If refreshed after 64 count of counter ie, 64-0 : it will cause MCU reset*/
/*The WWDG in STM32 does not count down to 0. Instead, it resets the MCU when the counter reaches 63 (0x3F). */

/*The WWDG 7-bit down-counter can hold values from 0x7F (127) down to 0x40 (64).
If the counter reaches a value less than 0x40, meaning < 64, it triggers a reset.*/

//interrupt
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void GPIO_Init(void);

void delay_ms(uint32_t ms);
void wwdg_init(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  HAL_Init();
    SystemClock_Config();
    GPIO_Init();


    // Detect if last reset was due to WWDG
    int is_wwdg_reset = (RCC->CSR & RCC_CSR_WWDGRSTF) ? 1 : 0;
    RCC->CSR |= RCC_CSR_RMVF;  // Clear reset flags

    // Init WWDG
    wwdg_init();

    // Time tracking
    uint32_t elapsed_time = 0;
    uint32_t blink_delay_ms = 0;
    uint32_t last_refresh = HAL_GetTick();
    blink_delay_ms = is_wwdg_reset ? 5000 : 2000;

    while (1)
    {
        // Toggle LED (active low)
        GPIOD->ODR &= ~(1UL << 5);


        // Wait (longer delay if we just restarted from WWDG reset)
        HAL_Delay(blink_delay_ms / 2);
        GPIOD->ODR |= (1UL << 5);

        // Wait (longer delay if we just restarted from WWDG reset)
        HAL_Delay(blink_delay_ms / 2);
        elapsed_time += blink_delay_ms;

        // Refresh WWDG only for first 10 seconds
        if (!is_wwdg_reset && elapsed_time < 10000)
        {
            // Must refresh after ~28.5 ms but before ~38 ms
            if ((HAL_GetTick() - last_refresh) > 30) {
                last_refresh = HAL_GetTick();
                WWDG->CR = WWDG_CR_WDGA | 0x7F;
        }

        // After 10 seconds, we skip refresh, WWDG will reset MCU
        // On reboot, we'll see LED blinking slowly (5s) as a signal
    }
  }
  /* USER CODE END 3 */


/**
  * @brief System Clock Configuration
  * @retval None
  */
void wwdg_init(void)
{
    RCC->APB1ENR |= RCC_APB1ENR_WWDGEN;          // Enable WWDG clock as wwdt needs PCLK

    /* Configure CFR: WDGTB=
     *  00: CK counter clock (PCLK div 4096) div 1
		01: CK counter clock (PCLK div 4096) div 2
		10: CK counter clock (PCLK div 4096) div 4
		11: CK counter clock (PCLK div 4096) div 8 */
    WWDG->CFR =  (3U << WWDG_CFR_WDGTB_Pos)         // prescaler 8
               | (80U << WWDG_CFR_W_Pos);           // window = 80

    /* Activate WWDG: counter = 127 */
   // WWDG->CR = WWDG_CR_WDGA | (127U & 0x7F);//<---------------------------
}


void GPIO_Init(void) {
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
    GPIOD->MODER &= ~(0x3 << (5 * 2));
    GPIOD->MODER |=  (0x1 << (5 * 2));
    GPIOD->OTYPER &= ~(1 << 5);
    GPIOD->OSPEEDR &= ~(0x3 << (5 * 2));
    GPIOD->PUPDR &= ~(0x3 << (5 * 2));
    GPIOD->ODR |= (1 << 5);            // LED OFF (active low)
}

void SystemClock_Config(void)
{
	RCC->CR |= RCC_CR_HSEON;
	    while (!(RCC->CR & RCC_CR_HSERDY));

	    FLASH->ACR = FLASH_ACR_LATENCY_7WS | FLASH_ACR_PRFTEN | FLASH_ACR_ARTEN;//latency for 216MHz, Enable Prefetch, Enable Adaptice Real Time accelerator
	    RCC->PLLCFGR = (25 << RCC_PLLCFGR_PLLM_Pos) |
	                   (432 << RCC_PLLCFGR_PLLN_Pos) |
	                   (0 << RCC_PLLCFGR_PLLP_Pos) |
	                   RCC_PLLCFGR_PLLSRC_HSE;

	    RCC->CR |= RCC_CR_PLLON;
	    while (!(RCC->CR & RCC_CR_PLLRDY));

	    RCC->CFGR |= (0 << RCC_CFGR_HPRE_Pos);   // AHB = 216 MHz
	    RCC->CFGR |= (5 << RCC_CFGR_PPRE1_Pos);  // APB1 = 54 MHz
	    RCC->CFGR |= (4 << RCC_CFGR_PPRE2_Pos);  // APB2 = 108 MHz

	    RCC->CFGR |= RCC_CFGR_SW_PLL;
	    while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);

}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
