/*Wiring Type	    | Released State	|  Pressed State  |	Rising Edge =  |	Falling Edge =
 Pull-up resistor	|   HIGH	        |      LOW	      |    Release     |	   Press
 Pull-down resistor	|   LOW	            |  HIGH	          |    Press	   |       Release         */

/*In your case:
    Start timer on falling edge (button press)
    Stop timer on rising edge (button release)

So your EXTI configuration should:
    Trigger interrupt on FALLING → start timer
    Trigger interrupt on RISING → stop timer and read TIMx->CNT*/


#include "stm32f7xx.h"
#include "main.h"

static void gpio_init(void);
void systemclock_init(void);
void tim6_init(void);

volatile uint32_t duration_ms = 0;
volatile uint8_t button_pressed = 0;

int main(void)
{
    HAL_Init();
    systemclock_init();
    gpio_init();
    tim6_init();

    while (1)
    {
        if (duration_ms > 0)
        {
            // LED ON (active-low)
            GPIOD->ODR &= ~(1 << 5);
            HAL_Delay(duration_ms);

            // LED OFF
            GPIOD->ODR |= (1 << 5);
            HAL_Delay(duration_ms);

             duration_ms =0;// Prevent re-trigger
        }
    }
}

void EXTI15_10_IRQHandler(void)
{
    if (EXTI->PR & EXTI_PR_PR11)
    {
        EXTI->PR = EXTI_PR_PR11;

        if ((GPIOI->IDR & (1 << 11)) == 1)
        {
            // rising edge = button pressed
            TIM6->CNT = 0;
            TIM6->CR1 |= TIM_CR1_CEN;
        }
        else
        {
            // falling edge = button released
            TIM6->CR1 &= ~TIM_CR1_CEN;
            duration_ms = TIM6->CNT;
        }
    }
}

void tim6_init(void)
{
    RCC->APB1ENR |= RCC_APB1ENR_TIM6EN;

    // Timer6 1ms tick
    // Assuming APB1 Timer Clock = 108MHz
    // (PSC + 1) * (ARR + 1) = 108000 → PSC=10799, ARR=9

    TIM6->PSC = 10799U;     // Prescaler
    TIM6->ARR = 0xFFFF;     // Max ARR (we use CNT anyway)
    TIM6->EGR = TIM_EGR_UG; // Load prescaler
    TIM6->CR1 |= TIM_CR1_ARPE;
    TIM6->CR1 &= ~TIM_CR1_CEN; // Initially off
}

void gpio_init(void)
{
    GPIO_InitTypeDef GPIO_InitStruct = {0};

    // Clock Enable
    __HAL_RCC_GPIOD_CLK_ENABLE();
    __HAL_RCC_GPIOI_CLK_ENABLE();
    __HAL_RCC_SYSCFG_CLK_ENABLE();

    // Configure PD5 as output (LED)
    GPIO_InitStruct.Pin = GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

    // Configure PI11 as input with interrupt on both edges
    GPIO_InitStruct.Pin = GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
    GPIO_InitStruct.Pull = GPIO_PULLUP;  // Use pull-up if button pulls to GND
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);

    // EXTI Configuration for PI11
    SYSCFG->EXTICR[2] &= ~(0xF << 12);   // Clear EXTI11 bits
    SYSCFG->EXTICR[2] |= (0x8 << 12);    // Set EXTI11 to port I

    EXTI->IMR |= (1 << 11);              // Unmask EXTI11
    EXTI->RTSR |= (1 << 11);             // Rising edge


    // NVIC Interrupt Enable
    NVIC_SetPriority(EXTI15_10_IRQn, 1);
    NVIC_EnableIRQ(EXTI15_10_IRQn);
}

void systemclock_init(void)
{
    RCC->CR |= RCC_CR_HSEON;
    while (!(RCC->CR & RCC_CR_HSERDY));

    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
    PWR->CR1 |= PWR_CR1_ODEN;
    while (!(PWR->CSR1 & PWR_CSR1_ODRDY));
    PWR->CR1 |= PWR_CR1_ODSWEN;
    while (!(PWR->CSR1 & PWR_CSR1_ODSWRDY));

    FLASH->ACR = FLASH_ACR_LATENCY_7WS | FLASH_ACR_PRFTEN | FLASH_ACR_ARTEN;

    RCC->PLLCFGR = (25 << RCC_PLLCFGR_PLLM_Pos) |
                   (432 << RCC_PLLCFGR_PLLN_Pos) |
                   (0 << RCC_PLLCFGR_PLLP_Pos) |     // PLLP = 2
                   (RCC_PLLCFGR_PLLSRC_HSE) |
                   (9 << RCC_PLLCFGR_PLLQ_Pos);      // PLLQ = 9

    RCC->CR |= RCC_CR_PLLON;
    while (!(RCC->CR & RCC_CR_PLLRDY));

    RCC->CFGR = RCC_CFGR_HPRE_DIV1 | RCC_CFGR_PPRE1_DIV4 | RCC_CFGR_PPRE2_DIV2;

    RCC->CFGR &= ~RCC_CFGR_SW;
    RCC->CFGR |= RCC_CFGR_SW_PLL;
    while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
}
