#include "stm32f7xx.h"

volatile uint32_t tick = 0;

// ------------------- SysTick Handler ---------------------
void My_SysTick_Handler(void)
{
    tick++;
}

void delay_ms(uint32_t ms)
{
    uint32_t start = tick;
    while ((tick - start) < ms);
}

// ------------------- GPIO Init --------------------------
void gpio_init(void)
{
    // Enable clock for GPIOD
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;

    // Set PD5 as output (MODER = 01)
    GPIOD->MODER &= ~(3 << (5 * 2));
    GPIOD->MODER |=  (1 << (5 * 2));

    // Set as push-pull, no pull-up/pull-down
    GPIOD->OTYPER &= ~(1 << 5);
    GPIOD->PUPDR  &= ~(3 << (5 * 2));

    // Set to low speed
    GPIOD->OSPEEDR &= ~(3 << (5 * 2));

    // Turn off LED initially (active-low)
    GPIOD->ODR |= (1 << 5);
}

// ------------------- Clock Setup --------------------------
void system_clock_config(void)
{
    // 1. Enable HSE
    RCC->CR |= RCC_CR_HSEON;
    while (!(RCC->CR & RCC_CR_HSERDY)); // Wait for HSE ready

    // 2. Configure Flash wait states and enable prefetch
    // Reset and enable caches + set latency
    FLASH->ACR = FLASH_ACR_LATENCY_7WS | FLASH_ACR_PRFTEN | FLASH_ACR_ARTEN;


    // 3. Configure PLL:
    // VCO input = HSE / PLLM = 25 / 25 = 1 MHz
    // VCO output = 1 MHz * PLLN = 1 * 432 = 432 MHz
    // PLL output = VCO / PLLP = 432 / 2 = 216 MHz

    RCC->PLLCFGR = (25 << RCC_PLLCFGR_PLLM_Pos)  |  // PLLM = 25
                   (432 << RCC_PLLCFGR_PLLN_Pos) |  // PLLN = 432
                   (0 << RCC_PLLCFGR_PLLP_Pos)   |  // PLLP = 2 (00)
                   RCC_PLLCFGR_PLLSRC_HSE;         // HSE as PLL source

    // 4. Enable PLL
    RCC->CR |= RCC_CR_PLLON;
    while (!(RCC->CR & RCC_CR_PLLRDY)); // Wait for PLL ready

    // 5. Set prescalers: AHB /1, APB1 /4, APB2 /2
    RCC->CFGR |= (0 << RCC_CFGR_HPRE_Pos);   // AHB = 216 MHz
    RCC->CFGR |= (5 << RCC_CFGR_PPRE1_Pos);  // APB1 = 216/4 = 54 MHz
    RCC->CFGR |= (4 << RCC_CFGR_PPRE2_Pos);  // APB2 = 216/2 = 108 MHz

    // 6. Select PLL as system clock
    RCC->CFGR &= ~RCC_CFGR_SW;
    RCC->CFGR |= RCC_CFGR_SW_PLL;
    while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL); // Wait for switch
}

// ------------------- SysTick Init --------------------------
void systick_init(uint32_t cpu_freq_hz)
{
    SysTick->LOAD = (cpu_freq_hz / 1000) - 1;  // 1ms tick
    SysTick->VAL  = 0;
    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
                    SysTick_CTRL_TICKINT_Msk   |
                    SysTick_CTRL_ENABLE_Msk;
}

// ------------------- Main --------------------------
int main(void)
{
    system_clock_config();       // Configure HSE + PLL → 216 MHz
    gpio_init();                 // Set up PD5 as output (LED)
    systick_init(216000000);     // 216 MHz core → 1 ms SysTick

    while (1)
    {
        GPIOD->ODR ^= (1 << 5);  // Toggle PD5 (LED is active low)
        delay_ms(2000);          // 2-second delay
    }
}
