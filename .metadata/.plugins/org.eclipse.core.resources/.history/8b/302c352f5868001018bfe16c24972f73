#include "stm32f7xx.h"
#include "main.h"
void SystemClock_Config(void) ;
void GPIO_Init(void);

int main()
{
	GPIO_Init();
	SystemClock_Config();

}

void GPIO_Init(void) {
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
    GPIOD->MODER &= ~(0x3 << (5 * 2));
    GPIOD->MODER |=  (0x1 << (5 * 2));
    GPIOD->OTYPER &= ~(1 << 5);
    GPIOD->OSPEEDR &= ~(0x3 << (5 * 2));
    GPIOD->PUPDR &= ~(0x3 << (5 * 2));
    GPIOD->ODR |= (1 << 5);            // LED OFF (active low)
}
void SystemClock_Config(void) {
    // 1. Enable HSE
    RCC->CR |= RCC_CR_HSEON;
    while (!(RCC->CR & RCC_CR_HSERDY));  // Wait until HSE is ready

    // 2. Configure Power Regulator
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
    PWR->CR1 |= PWR_CR1_ODEN;  // Overdrive enable
    while (!(PWR->CSR1 & PWR_CSR1_ODRDY));

    PWR->CR1 |= PWR_CR1_ODSWEN;  // Switch Overdrive
    while (!(PWR->CSR1 & PWR_CSR1_ODSWRDY));

    // 3. Configure Flash latency
    FLASH->ACR = FLASH_ACR_LATENCY_7WS | FLASH_ACR_PRFTEN | FLASH_ACR_ARTEN;

    // 4. Configure PLL
    RCC->PLLCFGR = (25 << RCC_PLLCFGR_PLLM_Pos)  | // PLLM = 25
                   (432 << RCC_PLLCFGR_PLLN_Pos) | // PLLN = 432
                   (0 << RCC_PLLCFGR_PLLP_Pos)   | // PLLP = 2 (00 = /2)
                   (RCC_PLLCFGR_PLLSRC_HSE)      |
                   (9 << RCC_PLLCFGR_PLLQ_Pos);    // PLLQ = 9

    // 5. Enable PLL
    RCC->CR |= RCC_CR_PLLON;
    while (!(RCC->CR & RCC_CR_PLLRDY));  // Wait for PLL to lock

    // 6. Configure clock dividers
    RCC->CFGR = RCC_CFGR_HPRE_DIV1 |    // AHB = SYSCLK / 1
                RCC_CFGR_PPRE1_DIV4 |   // APB1 = AHB / 4
                RCC_CFGR_PPRE2_DIV2;    // APB2 = AHB / 2

    // 7. Switch system clock to PLL
    RCC->CFGR &= ~RCC_CFGR_SW;
    RCC->CFGR |= RCC_CFGR_SW_PLL;
    while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);  // Wait until PLL is system clock
}
