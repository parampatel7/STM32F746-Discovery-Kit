#include "stm32f7xx.h"
/*Blinks led with 2s delay using systick*/
void SysTick_Init(void);
void delay_ms(uint32_t ms);
void LED_Init(void);
void LED_Toggle(void);
void system_clock_config(void);
int main(void) {
    LED_Init();
    system_clock_config();// Initialize PD5 as output
    SysTick_Init();     // Initialize SysTick timer

    while (1) {
        LED_Toggle();   // Toggle LED
        delay_ms(2000); // Wait 2 seconds
    }
}

void LED_Init(void) {
    // Enable GPIOD clock
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;

    // Set PD5 as output
    GPIOD->MODER &= ~(0x3 << (5 * 2));      // Clear mode bits
    GPIOD->MODER |=  (0x1 << (5 * 2));      // Set to General Purpose Output

    // Set output type to push-pull
    GPIOD->OTYPER &= ~(1 << 5);

    // Set speed to low
    GPIOD->OSPEEDR &= ~(0x3 << (5 * 2));

    // No pull-up/pull-down
    GPIOD->PUPDR &= ~(0x3 << (5 * 2));

    // Set initial state (LED OFF - active low)
    GPIOD->ODR |= (1 << 5);
}

void SysTick_Init(void) {
    // Assuming SystemCoreClock = 216MHz
    SysTick->LOAD = 216000 - 1;  // 1 ms delay
    SysTick->VAL = 0;            // Reset current value
    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
                    SysTick_CTRL_ENABLE_Msk;
}

void delay_ms(uint32_t ms) {
    for (uint32_t i = 0; i < ms; i++) {
        while ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == 0);
    }
}

void LED_Toggle(void) {
    GPIOD->ODR ^= (1 << 5);  // Toggle PD5
}
void system_clock_config(void)
{
    RCC->CR |= RCC_CR_HSEON;
    while (!(RCC->CR & RCC_CR_HSERDY));

    FLASH->ACR = FLASH_ACR_LATENCY_7WS | FLASH_ACR_PRFTEN | FLASH_ACR_ARTEN;//latency for 216MHz, Enable Prefetch, Enable Adaptice Real Time accelerator
    RCC->PLLCFGR = (25 << RCC_PLLCFGR_PLLM_Pos) |
                   (432 << RCC_PLLCFGR_PLLN_Pos) |
                   (0 << RCC_PLLCFGR_PLLP_Pos) |
                   RCC_PLLCFGR_PLLSRC_HSE;

    RCC->CR |= RCC_CR_PLLON;
    while (!(RCC->CR & RCC_CR_PLLRDY));

    RCC->CFGR |= (0 << RCC_CFGR_HPRE_Pos);   // AHB = 216 MHz
    RCC->CFGR |= (5 << RCC_CFGR_PPRE1_Pos);  // APB1 = 54 MHz
    RCC->CFGR |= (4 << RCC_CFGR_PPRE2_Pos);  // APB2 = 108 MHz

    RCC->CFGR |= RCC_CFGR_SW_PLL;
    while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
}
