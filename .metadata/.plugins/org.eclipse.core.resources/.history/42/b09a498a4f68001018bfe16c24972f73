#include "stm32f7xx.h"

void SysTick_Init(void);
void delay_ms(uint32_t ms);
void LED_Init(void);
void LED_Toggle(void);
void IWDG_Init(void);
void SystemClock_Config(void) ;
int main(void) {
	SystemClock_Config();
    SysTick_Init();     // 1 ms delay using SysTick
    LED_Init();         // Configure PD5 for output
    IWDG_Init();        // Set up Independent Watchdog

    uint8_t refresh_count = 0;

    while (1) {
        LED_Toggle();
        delay_ms(1000); // Wait 1 second

        if (refresh_count < 5) {
            IWDG->KR = 0xAAAA;  // Refresh watchdog whenever count is greater then 5
            					// When count is <5, IWDT is triggered and MCU is restarted which restarts the code execution from beginning
            refresh_count++;
        }
        // After 5 loops, watchdog isn’t refreshed → MCU reset
    }
}

void SysTick_Init(void) {
    SysTick->LOAD = 216000 - 1;        // 1 ms delay assuming 216MHz clock
    SysTick->VAL = 0;
    SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
                    SysTick_CTRL_ENABLE_Msk;
}

void delay_ms(uint32_t ms) {
    for (uint32_t i = 0; i < ms; i++) {
        while ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == 0);
    }
}

void LED_Init(void) {
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
    GPIOD->MODER &= ~(0x3 << (5 * 2));
    GPIOD->MODER |=  (0x1 << (5 * 2));
    GPIOD->OTYPER &= ~(1 << 5);
    GPIOD->OSPEEDR &= ~(0x3 << (5 * 2));
    GPIOD->PUPDR &= ~(0x3 << (5 * 2));
    GPIOD->ODR |= (1 << 5);            // LED OFF (active low)
}

void LED_Toggle(void) {
    GPIOD->ODR ^= (1 << 5);
}

void IWDG_Init(void) {
    // Step 1: Enable write access to IWDG_PR and IWDG_RLR
    IWDG->KR = 0x5555;

    // Step 2: Wait until prescaler update is complete
    while (IWDG->SR & IWDG_SR_PVU);

    // Step 3: Set prescaler to divide LSI (≈ 32kHz) by 256
    IWDG->PR = IWDG_PR_PR_0 | IWDG_PR_PR_1 | IWDG_PR_PR_2; // PR = 0x07

    // Step 4: Wait until reload value update is complete
    while (IWDG->SR & IWDG_SR_RVU);

    // Step 5: Set reload value to 250 for ~2 second timeout
    // Calculation: (LSI / 256) = 125 Hz ⇒ 1 tick ≈ 8 ms ⇒ 250 * 8 ms ≈ 2000 ms
    IWDG->RLR = 250;

    // Step 6: Refresh watchdog immediately after config
    IWDG->KR = 0xAAAA;

    // Step 7: Start the watchdog
    IWDG->KR = 0xCCCC;
}
void SystemClock_Config(void) {
    // 1. Enable HSE
    RCC->CR |= RCC_CR_HSEON;
    while (!(RCC->CR & RCC_CR_HSERDY));  // Wait until HSE is ready

    // 2. Configure Power Regulator
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
    PWR->CR1 |= PWR_CR1_ODEN;  // Overdrive enable
    while (!(PWR->CSR1 & PWR_CSR1_ODRDY));

    PWR->CR1 |= PWR_CR1_ODSWEN;  // Switch Overdrive
    while (!(PWR->CSR1 & PWR_CSR1_ODSWRDY));

    // 3. Configure Flash latency
    FLASH->ACR = FLASH_ACR_LATENCY_7WS | FLASH_ACR_PRFTEN | FLASH_ACR_ARTEN;

    // 4. Configure PLL
    RCC->PLLCFGR = (25 << RCC_PLLCFGR_PLLM_Pos)  | // PLLM = 25
                   (432 << RCC_PLLCFGR_PLLN_Pos) | // PLLN = 432
                   (0 << RCC_PLLCFGR_PLLP_Pos)   | // PLLP = 2 (00 = /2)
                   (RCC_PLLCFGR_PLLSRC_HSE)      |
                   (9 << RCC_PLLCFGR_PLLQ_Pos);    // PLLQ = 9

    // 5. Enable PLL
    RCC->CR |= RCC_CR_PLLON;
    while (!(RCC->CR & RCC_CR_PLLRDY));  // Wait for PLL to lock

    // 6. Configure clock dividers
    RCC->CFGR = RCC_CFGR_HPRE_DIV1 |    // AHB = SYSCLK / 1
                RCC_CFGR_PPRE1_DIV4 |   // APB1 = AHB / 4
                RCC_CFGR_PPRE2_DIV2;    // APB2 = AHB / 2

    // 7. Switch system clock to PLL
    RCC->CFGR &= ~RCC_CFGR_SW;
    RCC->CFGR |= RCC_CFGR_SW_PLL;
    while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);  // Wait until PLL is system clock
}
