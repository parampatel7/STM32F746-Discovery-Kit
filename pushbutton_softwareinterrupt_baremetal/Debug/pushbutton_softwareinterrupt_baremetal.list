
pushbutton_softwareinterrupt_baremetal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000038c  080001c8  080001c8  000011c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000554  08000554  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000554  08000554  00002004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000554  08000554  00002004  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000554  08000554  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000554  08000554  00001554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000558  08000558  00001558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  0800055c  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000560  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000560  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001dc1  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000005a2  00000000  00000000  00003df5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000208  00000000  00000000  00004398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000016e  00000000  00000000  000045a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022eaa  00000000  00000000  0000470e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001f69  00000000  00000000  000275b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dbfed  00000000  00000000  00029521  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010550e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000065c  00000000  00000000  00105554  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  00105bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000004 	.word	0x20000004
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800053c 	.word	0x0800053c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000008 	.word	0x20000008
 8000204:	0800053c 	.word	0x0800053c

08000208 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000208:	b480      	push	{r7}
 800020a:	b083      	sub	sp, #12
 800020c:	af00      	add	r7, sp, #0
 800020e:	4603      	mov	r3, r0
 8000210:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000216:	2b00      	cmp	r3, #0
 8000218:	db0b      	blt.n	8000232 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800021a:	79fb      	ldrb	r3, [r7, #7]
 800021c:	f003 021f 	and.w	r2, r3, #31
 8000220:	4907      	ldr	r1, [pc, #28]	@ (8000240 <__NVIC_EnableIRQ+0x38>)
 8000222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000226:	095b      	lsrs	r3, r3, #5
 8000228:	2001      	movs	r0, #1
 800022a:	fa00 f202 	lsl.w	r2, r0, r2
 800022e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000232:	bf00      	nop
 8000234:	370c      	adds	r7, #12
 8000236:	46bd      	mov	sp, r7
 8000238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop
 8000240:	e000e100 	.word	0xe000e100

08000244 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000244:	b480      	push	{r7}
 8000246:	b083      	sub	sp, #12
 8000248:	af00      	add	r7, sp, #0
 800024a:	4603      	mov	r3, r0
 800024c:	6039      	str	r1, [r7, #0]
 800024e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000250:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000254:	2b00      	cmp	r3, #0
 8000256:	db0a      	blt.n	800026e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000258:	683b      	ldr	r3, [r7, #0]
 800025a:	b2da      	uxtb	r2, r3
 800025c:	490c      	ldr	r1, [pc, #48]	@ (8000290 <__NVIC_SetPriority+0x4c>)
 800025e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000262:	0112      	lsls	r2, r2, #4
 8000264:	b2d2      	uxtb	r2, r2
 8000266:	440b      	add	r3, r1
 8000268:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800026c:	e00a      	b.n	8000284 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800026e:	683b      	ldr	r3, [r7, #0]
 8000270:	b2da      	uxtb	r2, r3
 8000272:	4908      	ldr	r1, [pc, #32]	@ (8000294 <__NVIC_SetPriority+0x50>)
 8000274:	79fb      	ldrb	r3, [r7, #7]
 8000276:	f003 030f 	and.w	r3, r3, #15
 800027a:	3b04      	subs	r3, #4
 800027c:	0112      	lsls	r2, r2, #4
 800027e:	b2d2      	uxtb	r2, r2
 8000280:	440b      	add	r3, r1
 8000282:	761a      	strb	r2, [r3, #24]
}
 8000284:	bf00      	nop
 8000286:	370c      	adds	r7, #12
 8000288:	46bd      	mov	sp, r7
 800028a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028e:	4770      	bx	lr
 8000290:	e000e100 	.word	0xe000e100
 8000294:	e000ed00 	.word	0xe000ed00

08000298 <main>:
void init_exti11(void);
void trigger_software_interrupt(void);
void delay(volatile uint32_t count);

// Main
int main(void) {
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
    init_gpio();
 800029c:	f000 f81e 	bl	80002dc <init_gpio>
    init_exti11();
 80002a0:	f000 f852 	bl	8000348 <init_exti11>

    while (1) {
        delay(5000000);
 80002a4:	4803      	ldr	r0, [pc, #12]	@ (80002b4 <main+0x1c>)
 80002a6:	f000 f807 	bl	80002b8 <delay>
        trigger_software_interrupt();  // trigger the LED toggle interrupt
 80002aa:	f000 f875 	bl	8000398 <trigger_software_interrupt>
        delay(5000000);
 80002ae:	bf00      	nop
 80002b0:	e7f8      	b.n	80002a4 <main+0xc>
 80002b2:	bf00      	nop
 80002b4:	004c4b40 	.word	0x004c4b40

080002b8 <delay>:
    }
}

// Delay loop to visually see LED blinking
void delay(volatile uint32_t count) {
 80002b8:	b480      	push	{r7}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0
 80002be:	6078      	str	r0, [r7, #4]
    while (count--) ;
 80002c0:	bf00      	nop
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	1e5a      	subs	r2, r3, #1
 80002c6:	607a      	str	r2, [r7, #4]
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d1fa      	bne.n	80002c2 <delay+0xa>
}
 80002cc:	bf00      	nop
 80002ce:	bf00      	nop
 80002d0:	370c      	adds	r7, #12
 80002d2:	46bd      	mov	sp, r7
 80002d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d8:	4770      	bx	lr
	...

080002dc <init_gpio>:

// Setup PD5 as output
void init_gpio(void) {
 80002dc:	b480      	push	{r7}
 80002de:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;       // Enable clock for GPIOD
 80002e0:	4b17      	ldr	r3, [pc, #92]	@ (8000340 <init_gpio+0x64>)
 80002e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002e4:	4a16      	ldr	r2, [pc, #88]	@ (8000340 <init_gpio+0x64>)
 80002e6:	f043 0308 	orr.w	r3, r3, #8
 80002ea:	6313      	str	r3, [r2, #48]	@ 0x30
    while (!(RCC->AHB1ENR & RCC_AHB1ENR_GPIODEN)); // Wait clock stable
 80002ec:	bf00      	nop
 80002ee:	4b14      	ldr	r3, [pc, #80]	@ (8000340 <init_gpio+0x64>)
 80002f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002f2:	f003 0308 	and.w	r3, r3, #8
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d0f9      	beq.n	80002ee <init_gpio+0x12>

    GPIOD->MODER &= ~(3U << (5 * 2));  // Clear mode bits
 80002fa:	4b12      	ldr	r3, [pc, #72]	@ (8000344 <init_gpio+0x68>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	4a11      	ldr	r2, [pc, #68]	@ (8000344 <init_gpio+0x68>)
 8000300:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000304:	6013      	str	r3, [r2, #0]
    GPIOD->MODER |=  (1U << (5 * 2));  // Set PD5 to push-pull output
 8000306:	4b0f      	ldr	r3, [pc, #60]	@ (8000344 <init_gpio+0x68>)
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	4a0e      	ldr	r2, [pc, #56]	@ (8000344 <init_gpio+0x68>)
 800030c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000310:	6013      	str	r3, [r2, #0]
    GPIOD->OTYPER &= ~(1U << 5);
 8000312:	4b0c      	ldr	r3, [pc, #48]	@ (8000344 <init_gpio+0x68>)
 8000314:	685b      	ldr	r3, [r3, #4]
 8000316:	4a0b      	ldr	r2, [pc, #44]	@ (8000344 <init_gpio+0x68>)
 8000318:	f023 0320 	bic.w	r3, r3, #32
 800031c:	6053      	str	r3, [r2, #4]
    GPIOD->OSPEEDR |= (3U << (5 * 2)); // High speed
 800031e:	4b09      	ldr	r3, [pc, #36]	@ (8000344 <init_gpio+0x68>)
 8000320:	689b      	ldr	r3, [r3, #8]
 8000322:	4a08      	ldr	r2, [pc, #32]	@ (8000344 <init_gpio+0x68>)
 8000324:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 8000328:	6093      	str	r3, [r2, #8]
    GPIOD->PUPDR &= ~(3U << (5 * 2));  // No pull-up/down
 800032a:	4b06      	ldr	r3, [pc, #24]	@ (8000344 <init_gpio+0x68>)
 800032c:	68db      	ldr	r3, [r3, #12]
 800032e:	4a05      	ldr	r2, [pc, #20]	@ (8000344 <init_gpio+0x68>)
 8000330:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000334:	60d3      	str	r3, [r2, #12]
}
 8000336:	bf00      	nop
 8000338:	46bd      	mov	sp, r7
 800033a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033e:	4770      	bx	lr
 8000340:	40023800 	.word	0x40023800
 8000344:	40020c00 	.word	0x40020c00

08000348 <init_exti11>:

// EXTI line setup for software trigger
void init_exti11(void) {
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;     // Enable SYSCFG clock
 800034c:	4b10      	ldr	r3, [pc, #64]	@ (8000390 <init_exti11+0x48>)
 800034e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000350:	4a0f      	ldr	r2, [pc, #60]	@ (8000390 <init_exti11+0x48>)
 8000352:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000356:	6453      	str	r3, [r2, #68]	@ 0x44

    while (!(RCC->APB2ENR & RCC_APB2ENR_SYSCFGEN));//system configuration clock enable
 8000358:	bf00      	nop
 800035a:	4b0d      	ldr	r3, [pc, #52]	@ (8000390 <init_exti11+0x48>)
 800035c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800035e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000362:	2b00      	cmp	r3, #0
 8000364:	d0f9      	beq.n	800035a <init_exti11+0x12>

    EXTI->IMR |= (1U << 11);   // Unmask EXTI line 11
 8000366:	4b0b      	ldr	r3, [pc, #44]	@ (8000394 <init_exti11+0x4c>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	4a0a      	ldr	r2, [pc, #40]	@ (8000394 <init_exti11+0x4c>)
 800036c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000370:	6013      	str	r3, [r2, #0]
    EXTI->RTSR |= (1U << 11);  // Enable rising edge trigger
 8000372:	4b08      	ldr	r3, [pc, #32]	@ (8000394 <init_exti11+0x4c>)
 8000374:	689b      	ldr	r3, [r3, #8]
 8000376:	4a07      	ldr	r2, [pc, #28]	@ (8000394 <init_exti11+0x4c>)
 8000378:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800037c:	6093      	str	r3, [r2, #8]

    NVIC_SetPriority(EXTI15_10_IRQn, 1);
 800037e:	2101      	movs	r1, #1
 8000380:	2028      	movs	r0, #40	@ 0x28
 8000382:	f7ff ff5f 	bl	8000244 <__NVIC_SetPriority>
    NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000386:	2028      	movs	r0, #40	@ 0x28
 8000388:	f7ff ff3e 	bl	8000208 <__NVIC_EnableIRQ>
}
 800038c:	bf00      	nop
 800038e:	bd80      	pop	{r7, pc}
 8000390:	40023800 	.word	0x40023800
 8000394:	40013c00 	.word	0x40013c00

08000398 <trigger_software_interrupt>:

// Manually fire EXTI11 interrupt
void trigger_software_interrupt(void) {//this function is called, it calls interrupt which is executed from ISR
 8000398:	b480      	push	{r7}
 800039a:	af00      	add	r7, sp, #0
    EXTI->SWIER |= (1U << 11);  //software interrupt register, Why pin 11: push button sample
 800039c:	4b05      	ldr	r3, [pc, #20]	@ (80003b4 <trigger_software_interrupt+0x1c>)
 800039e:	691b      	ldr	r3, [r3, #16]
 80003a0:	4a04      	ldr	r2, [pc, #16]	@ (80003b4 <trigger_software_interrupt+0x1c>)
 80003a2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80003a6:	6113      	str	r3, [r2, #16]
}/*Equivalent to mcu thinking rising edge occurred at pin PI11 even if no actual signal occurred*/
 80003a8:	bf00      	nop
 80003aa:	46bd      	mov	sp, r7
 80003ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b0:	4770      	bx	lr
 80003b2:	bf00      	nop
 80003b4:	40013c00 	.word	0x40013c00

080003b8 <EXTI15_10_IRQHandler>:

// ISR for EXTI lines 10–15
void EXTI15_10_IRQHandler(void) {
 80003b8:	b480      	push	{r7}
 80003ba:	af00      	add	r7, sp, #0
    if (EXTI->PR & (1U << 11)) {
 80003bc:	4b0b      	ldr	r3, [pc, #44]	@ (80003ec <EXTI15_10_IRQHandler+0x34>)
 80003be:	695b      	ldr	r3, [r3, #20]
 80003c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d00b      	beq.n	80003e0 <EXTI15_10_IRQHandler+0x28>
        EXTI->PR |= (1U << 11);     // Clear pending flag
 80003c8:	4b08      	ldr	r3, [pc, #32]	@ (80003ec <EXTI15_10_IRQHandler+0x34>)
 80003ca:	695b      	ldr	r3, [r3, #20]
 80003cc:	4a07      	ldr	r2, [pc, #28]	@ (80003ec <EXTI15_10_IRQHandler+0x34>)
 80003ce:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80003d2:	6153      	str	r3, [r2, #20]
        GPIOD->ODR ^= (1U << 5);    // Toggle LED on PD5
 80003d4:	4b06      	ldr	r3, [pc, #24]	@ (80003f0 <EXTI15_10_IRQHandler+0x38>)
 80003d6:	695b      	ldr	r3, [r3, #20]
 80003d8:	4a05      	ldr	r2, [pc, #20]	@ (80003f0 <EXTI15_10_IRQHandler+0x38>)
 80003da:	f083 0320 	eor.w	r3, r3, #32
 80003de:	6153      	str	r3, [r2, #20]
    }
}
 80003e0:	bf00      	nop
 80003e2:	46bd      	mov	sp, r7
 80003e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e8:	4770      	bx	lr
 80003ea:	bf00      	nop
 80003ec:	40013c00 	.word	0x40013c00
 80003f0:	40020c00 	.word	0x40020c00

080003f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80003f8:	bf00      	nop
 80003fa:	e7fd      	b.n	80003f8 <NMI_Handler+0x4>

080003fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003fc:	b480      	push	{r7}
 80003fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000400:	bf00      	nop
 8000402:	e7fd      	b.n	8000400 <HardFault_Handler+0x4>

08000404 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000404:	b480      	push	{r7}
 8000406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000408:	bf00      	nop
 800040a:	e7fd      	b.n	8000408 <MemManage_Handler+0x4>

0800040c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000410:	bf00      	nop
 8000412:	e7fd      	b.n	8000410 <BusFault_Handler+0x4>

08000414 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000414:	b480      	push	{r7}
 8000416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000418:	bf00      	nop
 800041a:	e7fd      	b.n	8000418 <UsageFault_Handler+0x4>

0800041c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000420:	bf00      	nop
 8000422:	46bd      	mov	sp, r7
 8000424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000428:	4770      	bx	lr

0800042a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800042a:	b480      	push	{r7}
 800042c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800042e:	bf00      	nop
 8000430:	46bd      	mov	sp, r7
 8000432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000436:	4770      	bx	lr

08000438 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000438:	b480      	push	{r7}
 800043a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800043c:	bf00      	nop
 800043e:	46bd      	mov	sp, r7
 8000440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000444:	4770      	bx	lr

08000446 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000446:	b580      	push	{r7, lr}
 8000448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800044a:	f000 f83f 	bl	80004cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800044e:	bf00      	nop
 8000450:	bd80      	pop	{r7, pc}
	...

08000454 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000454:	b480      	push	{r7}
 8000456:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000458:	4b06      	ldr	r3, [pc, #24]	@ (8000474 <SystemInit+0x20>)
 800045a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800045e:	4a05      	ldr	r2, [pc, #20]	@ (8000474 <SystemInit+0x20>)
 8000460:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000464:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000468:	bf00      	nop
 800046a:	46bd      	mov	sp, r7
 800046c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop
 8000474:	e000ed00 	.word	0xe000ed00

08000478 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000478:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80004b0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 800047c:	f7ff ffea 	bl	8000454 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000480:	480c      	ldr	r0, [pc, #48]	@ (80004b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000482:	490d      	ldr	r1, [pc, #52]	@ (80004b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000484:	4a0d      	ldr	r2, [pc, #52]	@ (80004bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000486:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000488:	e002      	b.n	8000490 <LoopCopyDataInit>

0800048a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800048a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800048c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800048e:	3304      	adds	r3, #4

08000490 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000490:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000492:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000494:	d3f9      	bcc.n	800048a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000496:	4a0a      	ldr	r2, [pc, #40]	@ (80004c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000498:	4c0a      	ldr	r4, [pc, #40]	@ (80004c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800049a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800049c:	e001      	b.n	80004a2 <LoopFillZerobss>

0800049e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800049e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004a0:	3204      	adds	r2, #4

080004a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004a4:	d3fb      	bcc.n	800049e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80004a6:	f000 f825 	bl	80004f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80004aa:	f7ff fef5 	bl	8000298 <main>
  bx  lr    
 80004ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80004b0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80004b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004b8:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80004bc:	0800055c 	.word	0x0800055c
  ldr r2, =_sbss
 80004c0:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80004c4:	20000024 	.word	0x20000024

080004c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80004c8:	e7fe      	b.n	80004c8 <ADC_IRQHandler>
	...

080004cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80004d0:	4b06      	ldr	r3, [pc, #24]	@ (80004ec <HAL_IncTick+0x20>)
 80004d2:	781b      	ldrb	r3, [r3, #0]
 80004d4:	461a      	mov	r2, r3
 80004d6:	4b06      	ldr	r3, [pc, #24]	@ (80004f0 <HAL_IncTick+0x24>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	4413      	add	r3, r2
 80004dc:	4a04      	ldr	r2, [pc, #16]	@ (80004f0 <HAL_IncTick+0x24>)
 80004de:	6013      	str	r3, [r2, #0]
}
 80004e0:	bf00      	nop
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	20000000 	.word	0x20000000
 80004f0:	20000020 	.word	0x20000020

080004f4 <__libc_init_array>:
 80004f4:	b570      	push	{r4, r5, r6, lr}
 80004f6:	4d0d      	ldr	r5, [pc, #52]	@ (800052c <__libc_init_array+0x38>)
 80004f8:	4c0d      	ldr	r4, [pc, #52]	@ (8000530 <__libc_init_array+0x3c>)
 80004fa:	1b64      	subs	r4, r4, r5
 80004fc:	10a4      	asrs	r4, r4, #2
 80004fe:	2600      	movs	r6, #0
 8000500:	42a6      	cmp	r6, r4
 8000502:	d109      	bne.n	8000518 <__libc_init_array+0x24>
 8000504:	4d0b      	ldr	r5, [pc, #44]	@ (8000534 <__libc_init_array+0x40>)
 8000506:	4c0c      	ldr	r4, [pc, #48]	@ (8000538 <__libc_init_array+0x44>)
 8000508:	f000 f818 	bl	800053c <_init>
 800050c:	1b64      	subs	r4, r4, r5
 800050e:	10a4      	asrs	r4, r4, #2
 8000510:	2600      	movs	r6, #0
 8000512:	42a6      	cmp	r6, r4
 8000514:	d105      	bne.n	8000522 <__libc_init_array+0x2e>
 8000516:	bd70      	pop	{r4, r5, r6, pc}
 8000518:	f855 3b04 	ldr.w	r3, [r5], #4
 800051c:	4798      	blx	r3
 800051e:	3601      	adds	r6, #1
 8000520:	e7ee      	b.n	8000500 <__libc_init_array+0xc>
 8000522:	f855 3b04 	ldr.w	r3, [r5], #4
 8000526:	4798      	blx	r3
 8000528:	3601      	adds	r6, #1
 800052a:	e7f2      	b.n	8000512 <__libc_init_array+0x1e>
 800052c:	08000554 	.word	0x08000554
 8000530:	08000554 	.word	0x08000554
 8000534:	08000554 	.word	0x08000554
 8000538:	08000558 	.word	0x08000558

0800053c <_init>:
 800053c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800053e:	bf00      	nop
 8000540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000542:	bc08      	pop	{r3}
 8000544:	469e      	mov	lr, r3
 8000546:	4770      	bx	lr

08000548 <_fini>:
 8000548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800054a:	bf00      	nop
 800054c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800054e:	bc08      	pop	{r3}
 8000550:	469e      	mov	lr, r3
 8000552:	4770      	bx	lr
